// üß¨.ts - —Å–∞–º–æ–∑–∞–ø–∏—Å—É—é—á–∏–π –≥–ª—ñ—Ñ

import { DB } from "https://deno.land/x/sqlite@v3.9.1/mod.ts";

const glyph = "üß¨";
const db = new DB("üß¨.db");

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –≥–ª—ñ—Ñ—ñ–≤
db.execute(`
  create table if not exists glyphs (
    glyph text primary key,
    ts text,
    code text,
    hash text
  )
`);

// –¢—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∑ —Ñ–∞–π–ª—É, –∞ –Ω–µ –∑ –ë–î
if (import.meta.url.startsWith("file://")) {
  // –ß–∏—Ç–∞—î–º–æ —Å–∞–º —Å–µ–±–µ
  const code = await Deno.readTextFile(decodeURIComponent(new URL(import.meta.url).pathname));
  const ts = new Date().toISOString();
  
  // –ó–∞–ø–∏—Å—É—î–º–æ —Å–µ–±–µ –≤ –±–∞–∑—É
  const hash = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(code))
    .then(buf => [...new Uint8Array(buf)].map(x => x.toString(16).padStart(2, '0')).join(''));
  
  db.query(`insert or replace into glyphs (glyph, ts, code, hash) values (?, ?, ?, ?)`, 
    [glyph, ts, code, hash]);
  
  console.log(`‚úÖ ${glyph} ‚Üí –ë–î [${hash.slice(0, 8)}...]`);
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
export default () => {
  console.log(`${glyph} –∂–∏–≤–µ!`);
  return db;
};

// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ë–î —è–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (import.meta.main) {
  db.close();
}