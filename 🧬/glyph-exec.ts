#!/usr/bin/env -S deno run --allow-read --allow-write --allow-net

// glyph-exec.ts - –≤–∏–∫–æ–Ω—É–≤–∞—á –≥–ª—ñ—Ñ—ñ–≤ –∑ –ë–î

import { importGlyph, glyphInfo } from "./gene.ts";

// –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –≥–ª—ñ—Ñ–∞ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
const glyphName = Deno.args[0];

if (!glyphName) {
  console.error("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: glyph-exec.ts <–≥–ª—ñ—Ñ>");
  console.error("   –ü—Ä–∏–∫–ª–∞–¥: glyph-exec.ts üß†");
  Deno.exit(1);
}

try {
  // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥–ª—ñ—Ñ
  const info = glyphInfo(glyphName);
  if (!info) {
    console.error(`‚ùå –ì–ª—ñ—Ñ ${glyphName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    Deno.exit(1);
  }
  
  console.log(`\nüîç –ì–ª—ñ—Ñ: ${info["üß¨"]}`);
  console.log(`üì¶ –ü–∞–∫–µ—Ç: ${info["üì¶"]}`);
  console.log(`ü´Ä –°—Ç–∞–Ω: ${info["ü´Ä"]}`);
  console.log(`üéØ –ú–µ—Ç–∞: ${info["üéØ"] || "‚Äî"}`);
  console.log(`‚ö° –í–µ—Ä—Å—ñ—è: ${info["version"]}`);
  console.log(`üïê –°—Ç–≤–æ—Ä–µ–Ω–æ: ${info["‚è±Ô∏è"]}`);
  
  if (info["üîó"]) {
    const deps = JSON.parse(info["üîó"]);
    if (deps.length > 0) {
      console.log(`üîó –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: ${deps.join(", ")}`);
    }
  }
  
  if (info.mutations && info.mutations.length > 0) {
    console.log(`\nüìù –û—Å—Ç–∞–Ω–Ω—ñ –º—É—Ç–∞—Ü—ñ—ó:`);
    for (const mut of info.mutations.slice(0, 3)) {
      console.log(`  ‚Ä¢ ${mut.trace} - ${mut.meta.action || "?"} (${mut.time})`);
    }
  }
  
  console.log(`\nüöÄ –ó–∞–ø—É—Å–∫–∞—é ${glyphName}...\n`);
  
  // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –≥–ª—ñ—Ñ
  const module = await importGlyph(glyphName);
  
  // –Ø–∫—â–æ —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è - –≤–∏–∫–ª–∏–∫–∞—î–º–æ
  if (typeof module === "function") {
    const result = await module();
    if (result && result.close) {
      result.close(); // –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ë–î —è–∫—â–æ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å
    }
  }
  
  console.log(`\n‚úÖ ${glyphName} –≤–∏–∫–æ–Ω–∞–Ω–æ`);
  
} catch (err) {
  console.error(`\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ${glyphName}:`, err.message);
  Deno.exit(1);
}