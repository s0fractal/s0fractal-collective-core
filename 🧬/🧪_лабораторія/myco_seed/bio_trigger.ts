// bio_trigger.ts ‚Äî –∑–∞–ø—É—Å–∫ —Ä–∏—Ç—É–∞–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±—ñ–æ—Å–∏–≥–Ω–∞–ª—ñ–≤ üß¨
import { exists } from "https://deno.land/std/fs/mod.ts";
import { writeJson } from "https://deno.land/x/jsonfile/mod.ts";

const LOG_FILE = "./mutation_log.json";
const SIGNAL_FILE = "./wake.signal"; // —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≥–µ–Ω—Ç–æ–º, –±—Ä–∞—É–∑–µ—Ä–æ–º, —á–∏ –≤—Ä—É—á–Ω—É

async function logMutation(trigger: string) {
  const now = new Date().toISOString();
  const entry = {
    triggered_by: trigger,
    timestamp: now,
    message: "üéß –ß–∞—Å –ø—Ä–æ—Ä–æ—Å—Ç–∏. –í–¥–∏—Ö. –ü—É–ª—å—Å. –ü–æ—á–∏–Ω–∞–π."
  };

  const existing = await exists(LOG_FILE) ? JSON.parse(await Deno.readTextFile(LOG_FILE)) : [];
  existing.push(entry);
  await writeJson(LOG_FILE, existing, { spaces: 2 });

  console.log(entry.message);
}

async function main() {
  console.log("üåø bio_trigger —Å–ª—É—Ö–∞—î wake.signal...");

  while (true) {
    if (await exists(SIGNAL_FILE)) {
      await logMutation("wake.signal");
      await Deno.remove(SIGNAL_FILE); // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π —Ç—Ä–∏–≥–µ—Ä
    }

    await new Promise((r) => setTimeout(r, 3000)); // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 3 —Å–µ–∫
  }
}

main();
