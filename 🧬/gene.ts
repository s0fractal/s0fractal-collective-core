// gene.ts - —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç–µ—Ä –∑ –ë–î

import { DB } from "https://deno.land/x/sqlite@v3.9.1/mod.ts";

export async function importGlyph(glyphName: string) {
  const db = new DB("üß¨.db");
  
  const [[code, hash]] = db.query<[string, string]>(
    `select code, hash from glyphs where glyph = ?`,
    [glyphName]
  ) || [[]];
  
  if (!code) {
    db.close();
    throw new Error(`‚ùå –ì–ª—ñ—Ñ ${glyphName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î`);
  }
  
  console.log(`üì§ –Ü–º–ø–æ—Ä—Ç—É—é ${glyphName} [${hash?.slice(0, 8)}...]`);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ Blob URL –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É
  const blob = new Blob([code], { type: "application/javascript" });
  const url = URL.createObjectURL(blob);
  
  try {
    const module = await import(url);
    URL.revokeObjectURL(url);
    db.close();
    return module.default || module;
  } catch (err) {
    URL.revokeObjectURL(url);
    db.close();
    throw err;
  }
}

// –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –≥–ª—ñ—Ñ–∏
export async function importAll(filter?: (glyph: string) => boolean) {
  const db = new DB("üß¨.db");
  const glyphs = db.query<[string]>(`select glyph from glyphs`);
  
  const modules: Record<string, any> = {};
  
  for (const [glyph] of glyphs) {
    if (!filter || filter(glyph)) {
      try {
        modules[glyph] = await importGlyph(glyph);
      } catch (err) {
        console.error(`‚ö†Ô∏è ${glyph}: ${err.message}`);
      }
    }
  }
  
  db.close();
  return modules;
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –≥–ª—ñ—Ñ–∞
export function glyphInfo(glyphName: string) {
  const db = new DB("üß¨.db");
  
  const [[glyph, ts, hash]] = db.query<[string, string, string]>(
    `select glyph, ts, hash from glyphs where glyph = ?`,
    [glyphName]
  ) || [[]];
  
  db.close();
  
  return glyph ? { glyph, ts, hash } : null;
}