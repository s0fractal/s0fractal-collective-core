// gene.ts - —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç–µ—Ä –∑ –ø–æ–≤–Ω–æ—é —Å—Ö–µ–º–æ—é

import { DB } from "https://deno.land/x/sqlite@v3.9.1/mod.ts";

export async function importGlyph(glyphName: string) {
  const db = new DB("üß¨.db");
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –∑ –Ω–æ–≤–æ—ó —Å—Ö–µ–º–∏
  const [[brain]] = db.query<[string]>(
    `select "üß†" from "üß¨" where "üß¨" = ?`,
    [glyphName]
  ) || [[]];
  
  if (!brain) {
    db.close();
    throw new Error(`‚ùå –ì–ª—ñ—Ñ ${glyphName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î`);
  }
  
  const { code, hash } = JSON.parse(brain);
  console.log(`üì§ –Ü–º–ø–æ—Ä—Ç—É—é ${glyphName} [${hash?.slice(0, 8)}...]`);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
  db.query(`update "üß¨" set "exec_ts" = ? where "üß¨" = ?`, [
    new Date().toISOString(),
    glyphName
  ]);
  
  // –ó–∞–ø–∏—Å—É—î–º–æ –º—É—Ç–∞—Ü—ñ—é –ø—Ä–æ —ñ–º–ø–æ—Ä—Ç
  db.query(`
    insert into "üß¨_mutations" ("üß¨", "meta", "üë£")
    values (?, ?, ?)
  `, [
    glyphName,
    JSON.stringify({ action: "import", timestamp: new Date().toISOString() }),
    "import:dynamic"
  ]);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ Blob URL –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É
  const blob = new Blob([code], { type: "application/javascript" });
  const url = URL.createObjectURL(blob);
  
  try {
    const module = await import(url);
    URL.revokeObjectURL(url);
    db.close();
    return module.default || module;
  } catch (err) {
    URL.revokeObjectURL(url);
    db.close();
    throw err;
  }
}

// –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –≥–ª—ñ—Ñ–∏ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É
export async function importByPackage(packageType: string) {
  const db = new DB("üß¨.db");
  const glyphs = db.query<[string]>(
    `select "üß¨" from "üß¨" where "üì¶" = ?`,
    [packageType]
  );
  
  const modules: Record<string, any> = {};
  
  for (const [glyph] of glyphs) {
    try {
      modules[glyph] = await importGlyph(glyph);
    } catch (err) {
      console.error(`‚ö†Ô∏è ${glyph}: ${err.message}`);
    }
  }
  
  db.close();
  return modules;
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ –≥–ª—ñ—Ñ–∞
export function glyphInfo(glyphName: string) {
  const db = new DB("üß¨.db");
  
  const result = db.query(
    `select * from "üß¨" where "üß¨" = ?`,
    [glyphName]
  );
  
  if (!result || result.length === 0) {
    db.close();
    return null;
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±'—î–∫—Ç
  const columns = db.query(`PRAGMA table_info("üß¨")`).map(row => row[1]);
  const row = result[0];
  const info: any = {};
  
  columns.forEach((col, idx) => {
    info[col as string] = row[idx];
  });
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –º—É—Ç–∞—Ü—ñ—ó
  const mutations = db.query<[string, string, string]>(
    `select "meta", "üë£", "‚è±Ô∏è" from "üß¨_mutations" 
     where "üß¨" = ? order by "‚è±Ô∏è" desc limit 5`,
    [glyphName]
  );
  
  db.close();
  
  return {
    ...row,
    mutations: mutations.map(([meta, trace, time]) => ({
      meta: JSON.parse(meta),
      trace,
      time
    }))
  };
}

// –ì—Ä–∞—Ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
export function glyphDependencies(glyphName: string) {
  const db = new DB("üß¨.db");
  
  const [[deps]] = db.query<[string]>(
    `select "üîó" from "üß¨" where "üß¨" = ?`,
    [glyphName]
  ) || [[]];
  
  db.close();
  
  return deps ? JSON.parse(deps) : [];
}