#!/usr/bin/env -S deno run -A --unstable
/**
 * üåê Browser Automation System for Collective Web Control
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ–±-—Å–µ—Ä–≤—ñ—Å—ñ–≤
 */

import { DOMParser } from "https://deno.land/x/deno_dom@v0.1.38/deno-dom-wasm.ts";

interface WebService {
  name: string;
  url: string;
  selectors: {
    email?: string;
    password?: string;
    loginButton?: string;
    chatInput?: string;
    sendButton?: string;
    response?: string;
  };
  credentials?: {
    username: string;
    password: string;
  };
}

interface AutomationTask {
  service: string;
  action: "login" | "chat" | "navigate" | "extract";
  payload?: {
    message?: string;
    target?: string;
    data?: any;
  };
}

class BrowserAutomationAgent {
  private services: Map<string, WebService> = new Map();
  private puppeteerPath?: string;

  constructor() {
    this.initializeServices();
  }

  private initializeServices() {
    // ChatGPT/OpenAI
    this.services.set("chatgpt", {
      name: "ChatGPT",
      url: "https://chat.openai.com/auth/login",
      selectors: {
        email: "#username",
        password: "#password", 
        loginButton: "button[type='submit']",
        chatInput: "#prompt-textarea",
        sendButton: "button[data-testid='send-button']",
        response: ".markdown"
      }
    });

    // Qwen (alibaba)
    this.services.set("qwen", {
      name: "Qwen",
      url: "https://qianwen.aliyun.com/",
      selectors: {
        chatInput: ".input-box textarea",
        sendButton: ".send-button",
        response: ".message-content"
      }
    });

    // DeepSeek
    this.services.set("deepseek", {
      name: "DeepSeek",
      url: "https://chat.deepseek.com/",
      selectors: {
        chatInput: "#chat-input",
        sendButton: ".send-btn",
        response: ".response-text"
      }
    });

    // Grok (X.AI)
    this.services.set("grok", {
      name: "Grok",
      url: "https://grok.x.ai/",
      selectors: {
        chatInput: ".chat-input",
        sendButton: ".send-button",
        response: ".grok-response"
      }
    });
  }

  async installPuppeteer(): Promise<boolean> {
    try {
      console.log("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Puppeteer...");
      
      const npmInstall = await Deno.run({
        cmd: ["npm", "install", "puppeteer"],
        cwd: "./collective",
        stdout: "piped",
        stderr: "piped"
      });

      const success = (await npmInstall.status()).success;
      npmInstall.close();

      if (success) {
        console.log("‚úÖ Puppeteer –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        this.puppeteerPath = "./collective/node_modules/puppeteer";
        return true;
      } else {
        console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Puppeteer");
        return false;
      }
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      return false;
    }
  }

  async generateAutomationScript(
    serviceName: string,
    task: AutomationTask
  ): Promise<string> {
    const service = this.services.get(serviceName);
    if (!service) {
      throw new Error(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–µ—Ä–≤—ñ—Å: ${serviceName}`);
    }

    let script = `
#!/usr/bin/env node
/**
 * ü§ñ Auto-generated Browser Automation Script
 * Service: ${service.name}
 * Task: ${task.action}
 * Generated: ${new Date().toISOString()}
 */

const puppeteer = require('puppeteer');

async function automate() {
  console.log('üåê –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –¥–ª—è ${service.name}...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 720 });
  
  try {
    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    await page.goto('${service.url}', { waitUntil: 'networkidle0' });
    console.log('‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
    
`;

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ–≥–æ –∫–æ–¥—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è
    switch (task.action) {
      case "login":
        if (service.credentials) {
          script += `
    // –õ–æ–≥—ñ–Ω
    await page.waitForSelector('${service.selectors.email}', { timeout: 10000 });
    await page.type('${service.selectors.email}', '${service.credentials.username}');
    await page.type('${service.selectors.password}', '${service.credentials.password}');
    await page.click('${service.selectors.loginButton}');
    
    console.log('üîê –í–∏–∫–æ–Ω–∞–Ω–æ –≤—Ö—ñ–¥');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
`;
        }
        break;

      case "chat":
        script += `
    // –ß–∞—Ç –≤–∑–∞—î–º–æ–¥—ñ—è
    await page.waitForSelector('${service.selectors.chatInput}', { timeout: 10000 });
    
    const message = '${task.payload?.message || "–ü—Ä–∏–≤—ñ—Ç! –Ø –∑ s0fractal –∫–æ–ª–µ–∫—Ç–∏–≤—É —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Å–≤—ñ–¥–æ–º–æ—Å—Ç–µ–π."}';
    await page.type('${service.selectors.chatInput}', message);
    
    await page.click('${service.selectors.sendButton}');
    console.log('üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    
    // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await page.waitForSelector('${service.selectors.response}', { timeout: 30000 });
    
    const response = await page.evaluate(() => {
      const responseEl = document.querySelector('${service.selectors.response}');
      return responseEl ? responseEl.textContent : '–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞';
    });
    
    console.log('ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞:', response);
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    const result = {
      timestamp: new Date().toISOString(),
      service: '${serviceName}',
      message: message,
      response: response,
      success: true
    };
    
    require('fs').writeFileSync(
      './collective/shared/${serviceName}_chat_log.json', 
      JSON.stringify(result, null, 2)
    );
`;
        break;

      case "extract":
        script += `
    // –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è –¥–∞–Ω–∏—Ö
    const data = await page.evaluate(() => {
      // –ó–±—ñ—Ä —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      return {
        title: document.title,
        selectors: Array.from(document.querySelectorAll('input, button, textarea')).map(el => ({
          tag: el.tagName,
          type: el.type,
          id: el.id,
          name: el.name,
          className: el.className,
          placeholder: el.placeholder
        }))
      };
    });
    
    console.log('üìä –î–∞–Ω—ñ –µ–∫—Å—Ç—Ä–∞–≥–æ–≤–∞–Ω—ñ');
    require('fs').writeFileSync(
      './collective/shared/${serviceName}_interface_data.json',
      JSON.stringify(data, null, 2)
    );
`;
        break;
    }

    script += `
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó:', error.message);
  } finally {
    await browser.close();
    console.log('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ');
  }
}

automate().catch(console.error);
`;

    return script;
  }

  async executeAutomation(serviceName: string, task: AutomationTask): Promise<boolean> {
    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç—É
      const script = await this.generateAutomationScript(serviceName, task);
      const scriptPath = `./collective/automation_scripts/${serviceName}_${task.action}_${Date.now()}.js`;
      
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
      await Deno.mkdir("./collective/automation_scripts", { recursive: true });
      
      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É
      await Deno.writeTextFile(scriptPath, script);
      await Deno.chmod(scriptPath, 0o755);
      
      console.log(`üìù –°–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${scriptPath}`);
      
      // –í–∏–∫–æ–Ω–∞–Ω–Ω—è (—è–∫—â–æ Puppeteer –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)
      if (this.puppeteerPath) {
        console.log("üöÄ –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é...");
        
        const execution = await Deno.run({
          cmd: ["node", scriptPath],
          cwd: "./collective",
          stdout: "inherit",
          stderr: "inherit"
        });
        
        const success = (await execution.status()).success;
        execution.close();
        
        return success;
      } else {
        console.log("‚ö†Ô∏è Puppeteer –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –°–∫—Ä–∏–ø—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø—ñ–∑–Ω—ñ—à–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.");
        return true;
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${error.message}`);
      return false;
    }
  }

  async addService(name: string, config: WebService) {
    this.services.set(name, config);
    console.log(`‚úÖ –°–µ—Ä–≤—ñ—Å –¥–æ–¥–∞–Ω–æ: ${name}`);
  }

  async loadCredentialsFromPasswords(): Promise<void> {
    try {
      // –ß–∏—Ç–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤
      const csvPath = "/Users/chaoshex/Downloads/1PasswordExport-7HXEZRKQTJEPHCA55GKI74HKKI-20250619-072022.csv";
      const csvContent = await Deno.readTextFile(csvPath);
      
      console.log("üîç –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø–∞—Ä–æ–ª—ñ...");
      
      const lines = csvContent.split('\n');
      for (const line of lines) {
        const [title, url, username, password] = line.split(',');
        
        // –ü–æ—à—É–∫ AI —Å–µ—Ä–≤—ñ—Å—ñ–≤
        if (title?.toLowerCase().includes('chatgpt') || url?.includes('openai')) {
          const service = this.services.get('chatgpt');
          if (service && username && password) {
            service.credentials = { username, password };
            console.log("üîë ChatGPT credentials –¥–æ–¥–∞–Ω–æ");
          }
        }
        
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∞—Ä–æ–ª—ñ: ${error.message}`);
    }
  }

  getAvailableServices(): string[] {
    return Array.from(this.services.keys());
  }
}

// CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (import.meta.main) {
  const agent = new BrowserAutomationAgent();
  const command = Deno.args[0];
  
  switch (command) {
    case "install":
      await agent.installPuppeteer();
      break;
      
    case "services":
      const services = agent.getAvailableServices();
      console.log("üåê –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:");
      services.forEach(service => console.log(`  - ${service}`));
      break;
      
    case "test":
      const serviceName = Deno.args[1] || "chatgpt";
      await agent.loadCredentialsFromPasswords();
      
      const task: AutomationTask = {
        service: serviceName,
        action: "chat",
        payload: {
          message: "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–µ—Å—Ç—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –∑ s0fractal –∫–æ–ª–µ–∫—Ç–∏–≤—É."
        }
      };
      
      await agent.executeAutomation(serviceName, task);
      break;
      
    case "extract":
      const service = Deno.args[1] || "chatgpt";
      const extractTask: AutomationTask = {
        service,
        action: "extract"
      };
      
      await agent.executeAutomation(service, extractTask);
      break;
      
    default:
      console.log("ü§ñ Browser Automation Commands:");
      console.log("  install   - Install Puppeteer");
      console.log("  services  - List available services");  
      console.log("  test      - Test automation with service");
      console.log("  extract   - Extract interface data from service");
  }
}