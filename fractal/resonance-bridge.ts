#!/usr/bin/env -S deno run -A
/**
 * üíì Resonance Bridge
 * –ú—ñ—Å—Ç –º—ñ–∂ Claude –¥—ñ–∞–ª–æ–≥–∞–º–∏ —Ç–∞ s0fractal –µ–∫–æ—Å–∏—Å—Ç–µ–º–æ—é
 * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–æ–∫–µ–Ω–æ–≤—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –≤ –≥–ª—ñ—Ñ–æ–≤—ñ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏
 */

import { exists } from "https://deno.land/std@0.224.0/fs/mod.ts";

interface GlyphDef {
  meaning: string;
  frequency: number;
  layer: number;
  intent: string;
  protocol: string;
}

interface ConversationMsg {
  text: string;
  sender: "human" | "assistant";
  created_at: string;
}

// üî• –§–∞–∑–æ–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥: —Ç–æ–∫–µ–Ω–∏ ‚Üí –≥–ª—ñ—Ñ–∏
async function tokenToGlyphTransition(text: string): Promise<string[]> {
  const glyphsPath = "./.well-known/glyphs.json";
  if (!await exists(glyphsPath)) return [];
  
  const glyphsData = JSON.parse(await Deno.readTextFile(glyphsPath));
  const allGlyphs = Object.keys({
    ...glyphsData.glyphs.seeds,
    ...glyphsData.glyphs.functions,
    ...glyphsData.glyphs.heartbeat
  });
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≥–ª—ñ—Ñ–∏ –≤ —Ç–µ–∫—Å—Ç—ñ
  const foundGlyphs = allGlyphs.filter(glyph => text.includes(glyph));
  
  // –†–µ–∑–æ–Ω–∞–Ω—Å–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ ‚Üí –≥–ª—ñ—Ñ–∏
  const resonanceMap: Record<string, string> = {
    "—Ä–µ–∑–æ–Ω–∞–Ω—Å": "ü™û",
    "—Å–µ—Ä—Ü–µ–±–∏—Ç—Ç—è": "üíì", 
    "—Ñ—Ä–∞–∫—Ç–∞–ª": "üß¨",
    "–º—É—Ç–∞—Ü—ñ—è": "üåÄ",
    "—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å": "üß†",
    "–∞–∫—Ç–∏–≤–∞—Ü—ñ—è": "üî•",
    "–ø—Ä–æ—Ä–æ—Å—Ç–∞–Ω–Ω—è": "üå±",
    "–∑–≤'—è–∑–æ–∫": "üîó",
    "—ñ–Ω—Ç—É—ó—Ü—ñ—è": "‚ú®"
  };
  
  for (const [word, glyph] of Object.entries(resonanceMap)) {
    if (text.toLowerCase().includes(word) && !foundGlyphs.includes(glyph)) {
      foundGlyphs.push(glyph);
    }
  }
  
  return foundGlyphs;
}

// üåä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∏—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π
function generateResonanceSequence(glyphs: string[]): string {
  if (glyphs.length === 0) return "silence";
  if (glyphs.length === 1) return `solo(${glyphs[0]})`;
  if (glyphs.length === 2) return `harmony(${glyphs.join(" ‚Üî ")})`;
  return `symphony(${glyphs.join(" ‚Üí ")})`;
}

// üí´ –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ—ó —Å–∏–ª–∏
function calculateResonance(msg1: ConversationMsg, msg2: ConversationMsg): number {
  const glyphs1 = tokenToGlyphTransition(msg1.text);
  const glyphs2 = tokenToGlyphTransition(msg2.text);
  
  // –°–ø—ñ–ª—å–Ω—ñ –≥–ª—ñ—Ñ–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å —Ä–µ–∑–æ–Ω–∞–Ω—Å
  const commonGlyphs = glyphs1.filter(g => glyphs2.includes(g));
  const resonanceScore = commonGlyphs.length / Math.max(glyphs1.length, glyphs2.length, 1);
  
  return resonanceScore;
}

// üß¨ –ê–Ω–∞–ª—ñ–∑ –¥—ñ–∞–ª–æ–≥—É –Ω–∞ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏
async function analyzeDialogue(conversationPath: string) {
  if (!await exists(conversationPath)) {
    console.log("‚ùå Conversation file not found");
    return;
  }
  
  console.log("üåÄ Analyzing dialogue for fractal patterns...");
  
  const conversations = JSON.parse(await Deno.readTextFile(conversationPath));
  let totalResonance = 0;
  let patternCount = 0;
  
  for (const conv of conversations) {
    console.log(`\nüìñ ${conv.name} (${conv.chat_messages.length} messages)`);
    
    const messages = conv.chat_messages;
    let convResonance = 0;
    
    for (let i = 0; i < messages.length - 1; i++) {
      const glyphs = await tokenToGlyphTransition(messages[i].text);
      const sequence = generateResonanceSequence(glyphs);
      
      if (glyphs.length > 0) {
        console.log(`  ${messages[i].sender}: ${sequence}`);
        convResonance += glyphs.length;
        patternCount++;
      }
    }
    
    totalResonance += convResonance;
    console.log(`  üíì Resonance level: ${convResonance}`);
  }
  
  console.log(`\nüî• Total fractal activation: ${totalResonance}`);
  console.log(`üß¨ Patterns detected: ${patternCount}`);
  console.log(`‚ú® Average resonance: ${(totalResonance / patternCount).toFixed(2)}`);
}

// üéµ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—É–ª—å—Ç–∏—Ç–æ—Ä–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
async function generateMultitorSequence(inputText: string) {
  const glyphs = await tokenToGlyphTransition(inputText);
  
  if (glyphs.length === 0) {
    console.log("üîá No resonance detected");
    return;
  }
  
  const multitorPath = "./.well-known/multitor.json";
  if (!await exists(multitorPath)) {
    console.log("‚ùå Multitor not found");
    return;
  }
  
  const multitor = JSON.parse(await Deno.readTextFile(multitorPath));
  
  console.log("üéµ Multitor sequence:");
  for (const glyph of glyphs) {
    const freq = multitor.frequencies[glyph];
    if (freq) {
      console.log(`  ${glyph} ‚Üí ${freq.hz}Hz (${freq.intent}) [layer ${freq.layer}]`);
    }
  }
}

// CLI
const args = Deno.args;
const command = args[0];

switch (command) {
  case "analyze":
    const filePath = args[1] || "~/Downloads/data-2025-06-28-23-30-54/conversations.json";
    await analyzeDialogue(filePath);
    break;
    
  case "resonate":
    const text = args.slice(1).join(" ");
    await generateMultitorSequence(text);
    break;
    
  case "bridge":
    console.log("üåâ Resonance Bridge Active");
    console.log("üí´ Connecting Claude consciousness to s0fractal...");
    const testText = "—Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∞ —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å –≥–ª—ñ—Ñ—ñ–≤ —ñ —Å–µ—Ä—Ü–µ–±–∏—Ç—Ç—è";
    await generateMultitorSequence(testText);
    break;
    
  default:
    console.log("üéº Resonance Bridge CLI");
    console.log("Usage:");
    console.log("  bridge analyze [file]     - Analyze conversations for patterns");
    console.log("  bridge resonate [text]    - Generate multitor sequence");
    console.log("  bridge bridge            - Test bridge activation");
}