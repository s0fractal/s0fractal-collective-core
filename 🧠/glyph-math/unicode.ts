// üß†/glyph-math/unicode.ts - –ë–∞–∑–æ–≤–∞ –≥–ª—ñ—Ñ–æ–≤–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∑ ASCII –µ–∫—Å–ø–æ—Ä—Ç–∞–º–∏

// –ü—Ä–µ–¥–∏–∫–∞—Ç–∏
export const forAll = <T>(xs: T[], f: (x: T) => boolean) => xs.every(f);
export const exists = <T>(xs: T[], f: (x: T) => boolean) => xs.some(f);

// –†—ñ–≤–Ω—ñ—Å—Ç—å —ñ —Ç–æ—Ç–æ–∂–Ω—ñ—Å—Ç—å
export const equiv = <T>(a: T, b: T) => JSON.stringify(a) === JSON.stringify(b);
export const define = <T>(a: T) => a; // –û–∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –¥–µ—Ñ—ñ–Ω—ñ—Ü—ñ—ó
export const equalDef = <T>(a: T, b: T) => a === b; // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫

// –ú–Ω–æ–∂–∏–Ω–∏
export const subset = <T>(a: T[], b: T[]) => a.every(x => b.includes(x));
export const superset = <T>(a: T[], b: T[]) => b.every(x => a.includes(x));
export const inSet = <T>(x: T, xs: T[]) => xs.includes(x);
export const notInSet = <T>(x: T, xs: T[]) => !xs.includes(x);
export const emptySet = <T>(): T[] => [];

// –û–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞–¥ –º–æ—Ä—Ñ—ñ–∑–º–∞–º–∏
export const tensorProduct = <T>(...fns: ((x: T) => T)[]) => (x: T): T =>
  fns.reduce((acc, fn) => fn(acc), x);
export const directSum = <T>(...fns: ((x: T) => T)[]) => (x: T): T =>
  fns.reduceRight((acc, fn) => fn(acc), x);

// –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è
export const compose = <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A): C => f(g(a));
export const dot = <T>(f: (x: T) => T, g: (x: T) => T) => (x: T): T => f(g(x));

// –ï–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
export const iff = <T>(a: T, b: T) => a == b;
export const similar = <T>(a: T, b: T) => typeof a === typeof b;
export const isomorphic = <T>(a: T, b: T) => Object.keys(a).length === Object.keys(b).length;
export const approx = <T>(a: T, b: T) => Math.abs(Number(a) - Number(b)) < 0.001;

// –õ–æ–≥—ñ—á–Ω—ñ
export const and = (a: boolean, b: boolean) => a && b;
export const or = (a: boolean, b: boolean) => a || b;
export const not = (a: boolean) => !a;
export const implies = (a: boolean, b: boolean) => !a || b;

// –§—É–Ω–∫—Ç–æ—Ä–∏
export const fmap = <A, B>(f: (a: A) => B) => (xs: A[]): B[] => xs.map(f);
export const flatten = <T>(xs: T[][]): T[] => xs.flat();
export const unit = <T>(x: T): T[] => [x];

// –ú–æ–Ω–∞–¥–∏
export const bind = <A, B>(ma: A[], f: (a: A) => B[]): B[] => ma.flatMap(f);
export const then = <A, B>(ma: A[], mb: B[]): B[] => ma.flatMap(() => mb);

// –ö–∞—Ç–µ–≥–æ—Ä–Ω—ñ —Å—Ç—Ä—ñ–ª–∫–∏
export const arrow = <A, B>(f: (a: A) => B) => f;
export const reverseArrow = <A, B>(f: (b: B) => A) => f;
export const biArrow = <A, B>(f: (a: A) => B, g: (b: B) => A) => ({ f, g });

// –ì–ª—ñ—Ñ–æ–≤—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏
export const geneIdentity = <T>(x: T): T => x; // üß¨ –Ü–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å
export const brainEval = <T>(f: () => T): T => f(); // üß† –û–±—á–∏—Å–ª–µ–Ω–Ω—è
export const waveStream = <T>(...xs: T[]): T[] => xs; // üåä –•–≤–∏–ª—è/–ø–æ—Ç—ñ–∫
export const bubbleOption = <T>(x: T | undefined): T | null => x ?? null; // ü´ß –ë—É–ª—å–±–∞—à–∫–∞/–æ–ø—Ü—ñ—è

// –°–∏–º–≤–æ–ª—å–Ω–∞ –º–∞–ø–∞ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
export const symbols = {
  // –ü—Ä–µ–¥–∏–∫–∞—Ç–∏
  "‚àÄ": "forAll",
  "‚àÉ": "exists",
  
  // –†—ñ–≤–Ω—ñ—Å—Ç—å
  "‚â°": "equiv",
  "‚âù": "define",
  "‚âú": "equalDef",
  
  // –ú–Ω–æ–∂–∏–Ω–∏
  "‚äÜ": "subset",
  "‚äá": "superset",
  "‚àà": "inSet",
  "‚àâ": "notInSet",
  "‚àÖ": "emptySet",
  
  // –û–ø–µ—Ä–∞—Ü—ñ—ó
  "‚äó": "tensorProduct",
  "‚äï": "directSum",
  "‚àò": "compose",
  "‚àô": "dot",
  
  // –ï–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
  "‚áî": "iff",
  "‚âÉ": "similar",
  "‚âÖ": "isomorphic",
  "‚âà": "approx",
  
  // –õ–æ–≥—ñ—á–Ω—ñ
  "‚àß": "and",
  "‚à®": "or",
  "¬¨": "not",
  "‚áí": "implies",
  
  // –°—Ç—Ä—ñ–ª–∫–∏
  "‚ü∂": "arrow",
  "‚üµ": "reverseArrow",
  "‚ü∑": "biArrow",
  
  // –ì–ª—ñ—Ñ–∏
  "üß¨": "geneIdentity",
  "üß†": "brainEval",
  "üåä": "waveStream",
  "ü´ß": "bubbleOption",
};