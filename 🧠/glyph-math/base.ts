// üß†/glyph-math/base.ts - –ë–∞–∑–æ–≤–∞ –≥–ª—ñ—Ñ–æ–≤–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞

// –ü—Ä–µ–¥–∏–∫–∞—Ç–∏
export const ‚àÄ = <T>(xs: T[], f: (x: T) => boolean) => xs.every(f);
export const ‚àÉ = <T>(xs: T[], f: (x: T) => boolean) => xs.some(f);

// –†—ñ–≤–Ω—ñ—Å—Ç—å —ñ —Ç–æ—Ç–æ–∂–Ω—ñ—Å—Ç—å
export const ‚â° = <T>(a: T, b: T) => JSON.stringify(a) === JSON.stringify(b);
export const ‚âù = <T>(a: T) => a; // –û–∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ –¥–µ—Ñ—ñ–Ω—ñ—Ü—ñ—ó
export const ‚âú = <T>(a: T, b: T) => a === b; // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫

// –ú–Ω–æ–∂–∏–Ω–∏
export const ‚äÜ = <T>(a: T[], b: T[]) => a.every(x => b.includes(x));
export const ‚äá = <T>(a: T[], b: T[]) => b.every(x => a.includes(x));
export const ‚àà = <T>(x: T, xs: T[]) => xs.includes(x);
export const ‚àâ = <T>(x: T, xs: T[]) => !xs.includes(x);
export const ‚àÖ = <T>(): T[] => [];

// –û–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞–¥ –º–æ—Ä—Ñ—ñ–∑–º–∞–º–∏
export const ‚äó = <T>(...fns: ((x: T) => T)[]) => (x: T): T =>
  fns.reduce((acc, fn) => fn(acc), x);
export const ‚äï = <T>(...fns: ((x: T) => T)[]) => (x: T): T =>
  fns.reduceRight((acc, fn) => fn(acc), x);

// –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è
export const ‚àò = <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A): C => f(g(a));
export const ‚àô = <T>(f: (x: T) => T, g: (x: T) => T) => (x: T): T => f(g(x));

// –ï–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
export const ‚áî = <T>(a: T, b: T) => a == b;
export const ‚âÉ = <T>(a: T, b: T) => typeof a === typeof b;
export const ‚âÖ = <T>(a: T, b: T) => Object.keys(a).length === Object.keys(b).length;
export const ‚âà = <T>(a: T, b: T) => Math.abs(Number(a) - Number(b)) < 0.001;

// –õ–æ–≥—ñ—á–Ω—ñ
export const ‚àß = (a: boolean, b: boolean) => a && b;
export const ‚à® = (a: boolean, b: boolean) => a || b;
export const ¬¨ = (a: boolean) => !a;
export const ‚áí = (a: boolean, b: boolean) => !a || b;

// –§—É–Ω–∫—Ç–æ—Ä–∏
export const ∆í = <A, B>(f: (a: A) => B) => (xs: A[]): B[] => xs.map(f);
export const Œº = <T>(xs: T[][]): T[] => xs.flat();
export const Œ∑ = <T>(x: T): T[] => [x];

// –ú–æ–Ω–∞–¥–∏
export const >>= = <A, B>(ma: A[], f: (a: A) => B[]): B[] => ma.flatMap(f);
export const >> = <A, B>(ma: A[], mb: B[]): B[] => ma.flatMap(() => mb);

// –ö–∞—Ç–µ–≥–æ—Ä–Ω—ñ —Å—Ç—Ä—ñ–ª–∫–∏
export const ‚ü∂ = <A, B>(f: (a: A) => B) => f;
export const ‚üµ = <A, B>(f: (b: B) => A) => f;
export const ‚ü∑ = <A, B>(f: (a: A) => B, g: (b: B) => A) => ({ f, g });

// –ì–ª—ñ—Ñ–æ–≤—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏
export const üß¨ = <T>(x: T): T => x; // –Ü–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å
export const üß† = <T>(f: () => T): T => f(); // –û–±—á–∏—Å–ª–µ–Ω–Ω—è
export const üåä = <T>(...xs: T[]): T[] => xs; // –•–≤–∏–ª—è/–ø–æ—Ç—ñ–∫
export const ü´ß = <T>(x: T | undefined): T | null => x ?? null; // –ë—É–ª—å–±–∞—à–∫–∞/–æ–ø—Ü—ñ—è