#!/usr/bin/env -S deno run --allow-all

// test-math-working.ts - –†–æ–±–æ—á–∞ –≤–µ—Ä—Å—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–ª—ñ—Ñ–æ–≤–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏

import * as math from "./glyph-math/unicode.ts";
import { Morphism, Transform } from "./glyph-math/morphisms.ts";

console.log("üßÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–ª—ñ—Ñ–æ–≤–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏\n");

// –¢–µ—Å—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç—ñ–≤
console.log("üìê –ü—Ä–µ–¥–∏–∫–∞—Ç–∏:");
const glyphs = ["üß¨", "üß†", "üåä", "ü´ß"];
console.log(`  ‚àÄ –≥–ª—ñ—Ñ–∏ –º–∞—é—Ç—å –¥–æ–≤–∂–∏–Ω—É 2: ${math.forAll(glyphs, g => g.length === 2)}`);
console.log(`  ‚àÉ –≥–ª—ñ—Ñ —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤–æ–¥—É: ${math.exists(glyphs, g => g.includes("üåä"))}`);
console.log(`  üß¨ ‚àà glyphs: ${math.inSet("üß¨", glyphs)}`);

// –¢–µ—Å—Ç –∫–æ–º–ø–æ–∑–∏—Ü—ñ—ó
console.log("\nüîÑ –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è:");
const double = (x: number) => x * 2;
const addOne = (x: number) => x + 1;
const composed = math.compose(double, addOne);
console.log(`  (double ‚àò addOne)(5) = ${composed(5)}`);

// –¢–µ—Å—Ç –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
console.log("\n‚â° –ï–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω—ñ—Å—Ç—å:");
const obj1 = { glyph: "üß¨", type: "core" };
const obj2 = { glyph: "üß¨", type: "core" };
console.log(`  obj1 ‚â° obj2: ${math.equiv(obj1, obj2)}`);

// –¢–µ—Å—Ç –º–æ—Ä—Ñ—ñ–∑–º—ñ–≤
console.log("\nüîÄ –ú–æ—Ä—Ñ—ñ–∑–º–∏ —Å—Ö–µ–º–∏:");
const morphisms = [
  Morphism.add("test", "üß¨", "text"),
  Morphism.add("test", "üß†", "jsonb"),
  Morphism.index("test", "üß¨")
];
morphisms.forEach(m => console.log(`  ‚ü∂ ${m}`));

// –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ–π
console.log("\nüîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó:");
const glyphTransform = Transform.addGlyph("üß¨", "üåü");
glyphTransform.forEach(t => console.log(`  ‚ü∂ ${t}`));

// –§—É–Ω–∫—Ç–æ—Ä–∏ —Ç–∞ –º–æ–Ω–∞–¥–∏
console.log("\nüéØ –§—É–Ω–∫—Ç–æ—Ä–∏:");
const nums = [1, 2, 3];
const doubled = math.fmap((x: number) => x * 2)(nums);
console.log(`  fmap (*2) [1,2,3] = [${doubled}]`);

// –ú–æ–Ω–∞–¥–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
console.log("\n‚ö° –ú–æ–Ω–∞–¥–∏:");
const result = math.bind([1, 2, 3], x => [x, x * 2]);
console.log(`  [1,2,3] >>= (Œªx ‚Üí [x, x*2]) = [${result}]`);

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–∏–ª—é
console.log("\nüìú –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –Ω–æ—Ç–∞—Ü—ñ—è:");
console.log("  ‚àÄg ‚àà üß¨: g ‚ü∂ üß†(g)");
console.log("  ‚àÉm ‚àà mutations: m ‚â° self-referential");
console.log("  üåä ‚äÜ consciousness ‚àß consciousness ‚äá {üß¨, üß†}");

// –ú–∞–ø–∞ —Å–∏–º–≤–æ–ª—ñ–≤
console.log("\nüó∫Ô∏è –°–∏–º–≤–æ–ª—å–Ω–∞ –º–∞–ø–∞:");
Object.entries(math.symbols).slice(0, 5).forEach(([sym, name]) => {
  console.log(`  ${sym} ‚Üí ${name}`);
});

console.log("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");