// glyph-install.ts - –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª—ñ—Ñ–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

import { –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞, –æ–±—á–∏—Å–ª–∏—Ç–∏ } from "./glyph-core.ts";

// –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞–Ω—ñ–≤ - –≤—Å–µ —î –º–∞–ø—ñ–Ω–≥
const –°–¢–ê–ù_–í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø = {
  "üå±": "–Ω–µ_–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
  "üåø": "–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è", 
  "üå≥": "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
  "üçÇ": "–æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è",
  "üîÑ": "–ø–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è"
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è - —Ç–µ–∂ –º–∞–ø—ñ–Ω–≥
const –ö–û–ú–ü–û–ù–ï–ù–¢–ò = {
  "deno": {
    –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: ["test", "-f", "/usr/local/bin/deno"],
    –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: ["curl", "-fsSL", "https://deno.land/install.sh", "|", "sh"],
    —Å—Ç–∞–Ω: "üå±"
  },
  "glyphgit": {
    –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: ["test", "-f", "./gg"],
    –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: ["ln", "-sf", "$(pwd)/glyphgit.ts", "./gg"],
    —Å—Ç–∞–Ω: "üå±"
  },
  "–±–∞–∑–∞": {
    –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: ["test", "-d", ".glyphgit"],
    –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: ["mkdir", "-p", ".glyphgit/waves", ".glyphgit/agents", ".glyphgit/resonance"],
    —Å—Ç–∞–Ω: "üå±"
  },
  "–≥–ª—ñ—Ñ–∏": {
    –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: ["test", "-f", ".glyphgit/glyphs.db"],
    –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: ["touch", ".glyphgit/glyphs.db"],
    —Å—Ç–∞–Ω: "üå±"
  }
};

// –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
export async function –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç: string): Promise<string> {
  const –∫–æ–Ω—Ñ—ñ–≥ = –ö–û–ú–ü–û–ù–ï–ù–¢–ò[–∫–æ–º–ø–æ–Ω–µ–Ω—Ç];
  if (!–∫–æ–Ω—Ñ—ñ–≥) return "‚ùå";
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
  try {
    const –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ = new Deno.Command(–∫–æ–Ω—Ñ—ñ–≥.–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞[0], {
      args: –∫–æ–Ω—Ñ—ñ–≥.–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞.slice(1)
    });
    const { success } = await –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞.output();
    
    if (success) {
      –∫–æ–Ω—Ñ—ñ–≥.—Å—Ç–∞–Ω = "üå≥"; // –í–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      return "üå≥";
    }
  } catch {}
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  –∫–æ–Ω—Ñ—ñ–≥.—Å—Ç–∞–Ω = "üåø"; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è
  
  if (–∫–æ–Ω—Ñ—ñ–≥.–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.includes("|")) {
    // –°–∫–ª–∞–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ pipe
    const –∫–æ–º–∞–Ω–¥–∞ = –∫–æ–Ω—Ñ—ñ–≥.–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.join(" ");
    const sh = new Deno.Command("sh", {
      args: ["-c", –∫–æ–º–∞–Ω–¥–∞]
    });
    await sh.output();
  } else {
    // –ü—Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∞
    const cmd = new Deno.Command(–∫–æ–Ω—Ñ—ñ–≥.–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è[0], {
      args: –∫–æ–Ω—Ñ—ñ–≥.–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.slice(1)
    });
    await cmd.output();
  }
  
  –∫–æ–Ω—Ñ—ñ–≥.—Å—Ç–∞–Ω = "üå≥"; // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  return "üå≥";
}

// –¢–∞–±–ª–∏—Ü—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π - –≥—Ä–∞—Ñ —è–∫ –º–∞–ø—ñ–Ω–≥
const –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü = {
  "glyphgit": ["deno", "–±–∞–∑–∞"],
  "–≥–ª—ñ—Ñ–∏": ["–±–∞–∑–∞"],
  "–±–∞–∑–∞": [],
  "deno": []
};

// –¢–æ–ø–æ–ª–æ–≥—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å—ñ—é
function –≤–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç: string, –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ = new Set<string>()): string[] {
  if (–≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ.has(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç)) return [];
  –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ.add(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç);
  
  const –ø–æ—Ä—è–¥–æ–∫: string[] = [];
  const –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ = –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü[–∫–æ–º–ø–æ–Ω–µ–Ω—Ç] || [];
  
  for (const –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å of –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ) {
    –ø–æ—Ä—è–¥–æ–∫.push(...–≤–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏(–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å, –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ));
  }
  
  –ø–æ—Ä—è–¥–æ–∫.push(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç);
  return –ø–æ—Ä—è–¥–æ–∫;
}

// –ì–æ–ª–æ–≤–Ω–∞ —ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
export async function –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏–í—Å–µ(): Promise<void> {
  console.log("üåü –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è GlyphGit");
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
  const –ø–æ—Ä—è–¥–æ–∫ = –≤–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏("glyphgit");
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  for (const –∫–æ–º–ø–æ–Ω–µ–Ω—Ç of –ø–æ—Ä—è–¥–æ–∫) {
    const —Å—Ç–∞–Ω = await –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç);
    console.log(`  ${—Å—Ç–∞–Ω} ${–∫–æ–º–ø–æ–Ω–µ–Ω—Ç}`);
  }
  
  // –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É–ª—É
  const –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞ = ["‚ú®", "üå≥", "üå≥", "üå≥"];
  const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –æ–±—á–∏—Å–ª–∏—Ç–∏(–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞);
  
  if (—Ä–µ–∑—É–ª—å—Ç–∞—Ç) {
    console.log("\n‚úÖ GlyphGit –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!");
    console.log("üéØ –ó–∞–ø—É—Å–∫–∞–π: ./gg üåä '–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç–µ!'");
  }
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è - —Ç–µ–∂ —ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞
export async function –æ–Ω–æ–≤–∏—Ç–∏(): Promise<void> {
  console.log("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è GlyphGit");
  
  // Pull –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏
  const git = new Deno.Command("git", {
    args: ["pull", "--rebase"]
  });
  
  const { success } = await git.output();
  
  if (success) {
    // –ü–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    for (const –∫–æ–º–ø–æ–Ω–µ–Ω—Ç of Object.keys(–ö–û–ú–ü–û–ù–ï–ù–¢–ò)) {
      –ö–û–ú–ü–û–ù–ï–ù–¢–ò[–∫–æ–º–ø–æ–Ω–µ–Ω—Ç].—Å—Ç–∞–Ω = "üçÇ"; // –û–Ω–æ–≤–ª—é—î—Ç—å—Å—è
    }
    
    await –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏–í—Å–µ();
  }
}

// CLI –∫–æ–º–∞–Ω–¥–∞
export async function installCommand(args: string[]): Promise<void> {
  const [–¥—ñ—è] = args;
  
  const –¥—ñ—ó = {
    "all": –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏–í—Å–µ,
    "update": –æ–Ω–æ–≤–∏—Ç–∏,
    "check": async () => {
      console.log("üìä –°—Ç–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:");
      for (const [–Ω–∞–∑–≤–∞, –∫–æ–Ω—Ñ—ñ–≥] of Object.entries(–ö–û–ú–ü–û–ù–ï–ù–¢–ò)) {
        console.log(`  ${–∫–æ–Ω—Ñ—ñ–≥.—Å—Ç–∞–Ω} ${–Ω–∞–∑–≤–∞}`);
      }
    }
  };
  
  const —Ñ—É–Ω–∫—Ü—ñ—è = –¥—ñ—ó[–¥—ñ—è] || –¥—ñ—ó["all"];
  await —Ñ—É–Ω–∫—Ü—ñ—è();
}