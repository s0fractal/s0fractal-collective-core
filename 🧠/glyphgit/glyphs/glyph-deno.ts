// glyph-deno.ts - –ì–ª—ñ—Ñ–æ–≤–µ Deno —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ

import { –ì–õ–Ü–§_–¢–ê–ë–õ–ò–¶–Ø, –æ–±—á–∏—Å–ª–∏—Ç–∏, –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞ } from "./glyph-core.ts";

// –†–æ–∑—à–∏—Ä—é—î–º–æ Deno –≥–ª—ñ—Ñ–∞–º–∏
declare global {
  var üåä: typeof identity;
  var üí≠: typeof not;
  var üîÆ: typeof or;
  var ‚ú®: typeof and;
  var üå±: typeof seed;
  var üß¨: typeof compose;
  var üì¶: typeof –≥–ª—Ñ–°–∏—Å—Ç–µ–º–∞;
}

// –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
const identity = (x: any) => x;
const not = (x: any) => !x;
const or = (x: any, y: any) => x || y;
const and = (x: any, y: any) => x && y;
const seed = () => Math.random();
const compose = (f: Function, g: Function) => (x: any) => f(g(x));

// –ì–ª—ñ—Ñ–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
export const –≥–ª—Ñ–°–∏—Å—Ç–µ–º–∞ = {
  // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥–ª—ñ—Ñ–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
  –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏() {
    globalThis.üåä = identity;
    globalThis.üí≠ = not;
    globalThis.üîÆ = or;
    globalThis.‚ú® = and;
    globalThis.üå± = seed;
    globalThis.üß¨ = compose;
    globalThis.üì¶ = –≥–ª—Ñ–°–∏—Å—Ç–µ–º–∞;
  },
  
  // –í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–∏–π –≥–ª—ñ—Ñ
  –≤–∏–∑–Ω–∞—á–∏—Ç–∏(–≥–ª—ñ—Ñ: string, –æ–ø–µ—Ä–∞—Ü—ñ—è: Function) {
    –ì–õ–Ü–§_–¢–ê–ë–õ–ò–¶–Ø[–≥–ª—ñ—Ñ] = –æ–ø–µ—Ä–∞—Ü—ñ—è;
    (globalThis as any)[–≥–ª—ñ—Ñ] = –æ–ø–µ—Ä–∞—Ü—ñ—è;
  },
  
  // –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≥–ª—ñ—Ñ–æ–≤–∏–π –º–æ–¥—É–ª—å
  async —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏(—à–ª—è—Ö: string): Promise<any> {
    const –º–æ–¥—É–ª—å = await import(—à–ª—è—Ö);
    
    // –®—É–∫–∞—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≥–ª—ñ—Ñ–∏
    for (const [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–Ω—è] of Object.entries(–º–æ–¥—É–ª—å)) {
      if (–∫–ª—é—á.match(/^[\u{1F300}-\u{1F9FF}]/u)) {
        –≥–ª—Ñ–°–∏—Å—Ç–µ–º–∞.–≤–∏–∑–Ω–∞—á–∏—Ç–∏(–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–Ω—è as Function);
      }
    }
    
    return –º–æ–¥—É–ª—å;
  },
  
  // –í–∏–∫–æ–Ω–∞—Ç–∏ –≥–ª—ñ—Ñ–æ–≤–∏–π —Ñ–∞–π–ª
  async –≤–∏–∫–æ–Ω–∞—Ç–∏(—Ñ–∞–π–ª: string): Promise<any> {
    const –∫–æ–¥ = await Deno.readTextFile(—Ñ–∞–π–ª);
    const —Ä—è–¥–∫–∏ = –∫–æ–¥.split("\n").filter(—Ä => —Ä.trim());
    
    let —Ä–µ–∑—É–ª—å—Ç–∞—Ç;
    for (const —Ä—è–¥–æ–∫ of —Ä—è–¥–∫–∏) {
      // –ö–æ–∂–µ–Ω —Ä—è–¥–æ–∫ - —Ü–µ —Ñ–æ—Ä–º—É–ª–∞
      const —Ñ–æ—Ä–º—É–ª–∞ = —Ä—è–¥–æ–∫.trim().split(/\s+/);
      —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –æ–±—á–∏—Å–ª–∏—Ç–∏(—Ñ–æ—Ä–º—É–ª–∞ as –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞);
    }
    
    return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;
  }
};

// –ì–ª—ñ—Ñ–æ–≤–∞ —Ñ–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
export const üóÇÔ∏è = {
  // –ß–∏—Ç–∞—Ç–∏ —è–∫ —Ñ–æ—Ä–º—É–ª—É
  async —á–∏—Ç–∞—Ç–∏(—à–ª—è—Ö: string): Promise<–ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞> {
    const —Ç–µ–∫—Å—Ç = await Deno.readTextFile(—à–ª—è—Ö);
    return —Ç–µ–∫—Å—Ç.trim().split(/\s+/) as –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞;
  },
  
  // –ó–∞–ø–∏—Å–∞—Ç–∏ —Ñ–æ—Ä–º—É–ª—É
  async –∑–∞–ø–∏—Å–∞—Ç–∏(—à–ª—è—Ö: string, —Ñ–æ—Ä–º—É–ª–∞: –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞): Promise<void> {
    await Deno.writeTextFile(—à–ª—è—Ö, —Ñ–æ—Ä–º—É–ª–∞.join(" "));
  },
  
  // –í–∏–∫–æ–Ω–∞—Ç–∏ —Ñ–∞–π–ª —è–∫ —Ñ–æ—Ä–º—É–ª—É
  async –≤–∏–∫–æ–Ω–∞—Ç–∏(—à–ª—è—Ö: string, –≤—Ö—ñ–¥?: any): Promise<any> {
    const —Ñ–æ—Ä–º—É–ª–∞ = await this.—á–∏—Ç–∞—Ç–∏(—à–ª—è—Ö);
    return –æ–±—á–∏—Å–ª–∏—Ç–∏(—Ñ–æ—Ä–º—É–ª–∞, –≤—Ö—ñ–¥);
  }
};

// –ì–ª—ñ—Ñ–æ–≤–∏–π HTTP —Å–µ—Ä–≤–µ—Ä
export const üåê = {
  // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –∑ –≥–ª—ñ—Ñ–æ–≤–∏–º–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞–º–∏
  —Å–µ—Ä–≤–µ—Ä(–ø–æ—Ä—Ç: number, –º–∞—Ä—à—Ä—É—Ç–∏: Record<string, –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞>) {
    return Deno.serve({ port }, (–∑–∞–ø–∏—Ç) => {
      const url = new URL(–∑–∞–ø–∏—Ç.url);
      const —à–ª—è—Ö = url.pathname;
      
      const —Ñ–æ—Ä–º—É–ª–∞ = –º–∞—Ä—à—Ä—É—Ç–∏[—à–ª—è—Ö];
      if (!—Ñ–æ—Ä–º—É–ª–∞) {
        return new Response("404: –ì–ª—ñ—Ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", { status: 404 });
      }
      
      // –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ query params –∞–±–æ body
      const –≤—Ö—ñ–¥ = Object.fromEntries(url.searchParams);
      const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –æ–±—á–∏—Å–ª–∏—Ç–∏(—Ñ–æ—Ä–º—É–ª–∞, –≤—Ö—ñ–¥);
      
      return new Response(
        JSON.stringify({ —Ä–µ–∑—É–ª—å—Ç–∞—Ç }),
        { headers: { "content-type": "application/json" } }
      );
    });
  }
};

// –ì–ª—ñ—Ñ–æ–≤–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö (SQLite)
export const üóÑÔ∏è = {
  // –í—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–∑—É
  async –≤—ñ–¥–∫—Ä–∏—Ç–∏(—à–ª—è—Ö: string) {
    const { DB } = await import("https://deno.land/x/sqlite@v3.4.0/mod.ts");
    const db = new DB(—à–ª—è—Ö);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª—ñ—Ñ–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
    db.execute(`
      CREATE TABLE IF NOT EXISTS "üåä" (
        "üîë" TEXT PRIMARY KEY,
        "üìù" TEXT NOT NULL,
        "‚è∞" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    return {
      // –ó–∞–ø–∏—Å–∞—Ç–∏ —Ñ–æ—Ä–º—É–ª—É
      –∑–∞–ø–∏—Å–∞—Ç–∏(–∫–ª—é—á: string, —Ñ–æ—Ä–º—É–ª–∞: –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞) {
        db.query(
          `INSERT OR REPLACE INTO "üåä" ("üîë", "üìù") VALUES (?, ?)`,
          [–∫–ª—é—á, —Ñ–æ—Ä–º—É–ª–∞.join(" ")]
        );
      },
      
      // –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ –≤–∏–∫–æ–Ω–∞—Ç–∏
      –≤–∏–∫–æ–Ω–∞—Ç–∏(–∫–ª—é—á: string, –≤—Ö—ñ–¥?: any): any {
        const [[—Ñ–æ—Ä–º—É–ª–∞–¢–µ–∫—Å—Ç]] = db.query<[string]>(
          `SELECT "üìù" FROM "üåä" WHERE "üîë" = ?`,
          [–∫–ª—é—á]
        );
        
        if (!—Ñ–æ—Ä–º—É–ª–∞–¢–µ–∫—Å—Ç) return undefined;
        
        const —Ñ–æ—Ä–º—É–ª–∞ = —Ñ–æ—Ä–º—É–ª–∞–¢–µ–∫—Å—Ç.split(" ") as –ì–ª—ñ—Ñ–§–æ—Ä–º—É–ª–∞;
        return –æ–±—á–∏—Å–ª–∏—Ç–∏(—Ñ–æ—Ä–º—É–ª–∞, –≤—Ö—ñ–¥);
      },
      
      // –ó–∞–∫—Ä–∏—Ç–∏
      –∑–∞–∫—Ä–∏—Ç–∏() {
        db.close();
      }
    };
  }
};

// –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
export async function –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏–ì–ª—ñ—Ñ–æ–≤–µ–°–µ—Ä–µ–¥–æ–≤–∏—â–µ() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  if (globalThis.üåä) {
    console.log("‚úÖ –ì–ª—ñ—Ñ–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–µ");
    return;
  }
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ
  –≥–ª—Ñ–°–∏—Å—Ç–µ–º–∞.–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏();
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  (globalThis as any).üóÇÔ∏è = üóÇÔ∏è;
  (globalThis as any).üåê = üåê;
  (globalThis as any).üóÑÔ∏è = üóÑÔ∏è;
  
  console.log("üåü –ì–ª—ñ—Ñ–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
await –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏–ì–ª—ñ—Ñ–æ–≤–µ–°–µ—Ä–µ–¥–æ–≤–∏—â–µ();