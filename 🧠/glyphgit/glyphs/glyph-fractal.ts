// glyph-fractal.ts - –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ñ —Å–∞–º–æ–æ–±—á–∏—Å–ª—é–≤–∞–ª—å–Ω—ñ –≥–ª—ñ—Ñ–∏

import { –ì–ª—ñ—Ñ, –ì–ª—ñ—Ñ–ú–æ—Ä—Ñ—ñ–∑–º, –ü—É–ª—å—Å—É—é—á–∏–π–ì–ª—ñ—Ñ } from "./glyph-category.ts";

// –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π –≥–ª—ñ—Ñ - –∫–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø–æ–¥—ñ–±–Ω–∞ —Ü—ñ–ª–æ–º—É
export class –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π–ì–ª—ñ—Ñ {
  private –≥–ª–∏–±–∏–Ω–∞: number;
  private –ø—Ä–∞–≤–∏–ª–∞: Map<string, (–≥: –ì–ª—ñ—Ñ) => –ì–ª—ñ—Ñ[]>;
  
  constructor(–ø–æ—á–∞—Ç–∫–æ–≤–∏–π: –ì–ª—ñ—Ñ, –≥–ª–∏–±–∏–Ω–∞ = 3) {
    this.–≥–ª–∏–±–∏–Ω–∞ = –≥–ª–∏–±–∏–Ω–∞;
    this.–ø—Ä–∞–≤–∏–ª–∞ = new Map([
      // L-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≥–ª—ñ—Ñ—ñ–≤
      ["üå±", (–≥) => ["üåø", "üå±", "üåø"]],
      ["üåø", (–≥) => ["üå≥", "üåø", "üå±"]],
      ["üå≥", (–≥) => ["üå≥", "üçÇ", "üå≥"]],
      ["üçÇ", (–≥) => ["üå±"]], // —Ü–∏–∫–ª
    ]);
  }
  
  // –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª
  —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏(–≥–ª—ñ—Ñ: –ì–ª—ñ—Ñ, —Ä—ñ–≤–µ–Ω—å = 0): any {
    if (—Ä—ñ–≤–µ–Ω—å >= this.–≥–ª–∏–±–∏–Ω–∞) {
      return –≥–ª—ñ—Ñ; // –±–∞–∑–æ–≤–∏–π –≤–∏–ø–∞–¥–æ–∫
    }
    
    const –ø—Ä–∞–≤–∏–ª–æ = this.–ø—Ä–∞–≤–∏–ª–∞.get(–≥–ª—ñ—Ñ as string);
    if (!–ø—Ä–∞–≤–∏–ª–æ) {
      return –≥–ª—ñ—Ñ;
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –∫–æ–∂–Ω—É —á–∞—Å—Ç–∏–Ω—É
    const —á–∞—Å—Ç–∏–Ω–∏ = –ø—Ä–∞–≤–∏–ª–æ(–≥–ª—ñ—Ñ);
    return {
      —Ü–µ–Ω—Ç—Ä: –≥–ª—ñ—Ñ,
      –≥—ñ–ª–∫–∏: —á–∞—Å—Ç–∏–Ω–∏.map(—á => this.—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏(—á, —Ä—ñ–≤–µ–Ω—å + 1))
    };
  }
  
  // –ó–≥–æ—Ä–Ω—É—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª –Ω–∞–∑–∞–¥
  –∑–≥–æ—Ä–Ω—É—Ç–∏(—Ñ—Ä–∞–∫—Ç–∞–ª: any): –ì–ª—ñ—Ñ {
    if (typeof —Ñ—Ä–∞–∫—Ç–∞–ª === "string") {
      return —Ñ—Ä–∞–∫—Ç–∞–ª;
    }
    
    // –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–µ–Ω—Ç—Ä, —ñ–≥–Ω–æ—Ä—É—î–º–æ –≥—ñ–ª–∫–∏
    return —Ñ—Ä–∞–∫—Ç–∞–ª.—Ü–µ–Ω—Ç—Ä || "üå±";
  }
  
  // –û–±—á–∏—Å–ª–∏—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—É —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å
  —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å(): number {
    let –∫—ñ–ª—å–∫—ñ—Å—Ç—å = 0;
    let –º–∞—Å—à—Ç–∞–± = 1;
    
    for (const [–≥–ª—ñ—Ñ, –ø—Ä–∞–≤–∏–ª–æ] of this.–ø—Ä–∞–≤–∏–ª–∞) {
      const —á–∞—Å—Ç–∏–Ω–∏ = –ø—Ä–∞–≤–∏–ª–æ(–≥–ª—ñ—Ñ);
      –∫—ñ–ª—å–∫—ñ—Å—Ç—å += —á–∞—Å—Ç–∏–Ω–∏.length;
      –º–∞—Å—à—Ç–∞–± *= 3; // –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Ç—Ä–∏—á–∞—Å—Ç–∏–Ω–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è
    }
    
    // D = log(N) / log(r)
    return Math.log(–∫—ñ–ª—å–∫—ñ—Å—Ç—å) / Math.log(–º–∞—Å—à—Ç–∞–±);
  }
}

// –ö–≤–∞–Ω—Ç–æ–≤–∏–π —Ñ—Ä–∞–∫—Ç–∞–ª - —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü—ñ—è —Å—Ç–∞–Ω—ñ–≤
export class –ö–≤–∞–Ω—Ç–æ–≤–∏–π–§—Ä–∞–∫—Ç–∞–ª {
  private —Å—Ç–∞–Ω–∏: Map<string, number> = new Map(); // –∞–º–ø–ª—ñ—Ç—É–¥–∏
  
  constructor(–ø–æ—á–∞—Ç–∫–æ–≤—ñ–°—Ç–∞–Ω–∏: [–ì–ª—ñ—Ñ, number][]) {
    for (const [–≥–ª—ñ—Ñ, –∞–º–ø–ª—ñ—Ç—É–¥–∞] of –ø–æ—á–∞—Ç–∫–æ–≤—ñ–°—Ç–∞–Ω–∏) {
      this.—Å—Ç–∞–Ω–∏.set(–≥–ª—ñ—Ñ as string, –∞–º–ø–ª—ñ—Ç—É–¥–∞);
    }
    this.–Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏();
  }
  
  // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–º–ø–ª—ñ—Ç—É–¥
  private –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏(): void {
    const —Å—É–º–∞ = Array.from(this.—Å—Ç–∞–Ω–∏.values())
      .reduce((—Å, –∞) => —Å + –∞ * –∞, 0);
    const –Ω–æ—Ä–º–∞ = Math.sqrt(—Å—É–º–∞);
    
    for (const [–≥–ª—ñ—Ñ, –∞–º–ø–ª—ñ—Ç—É–¥–∞] of this.—Å—Ç–∞–Ω–∏) {
      this.—Å—Ç–∞–Ω–∏.set(–≥–ª—ñ—Ñ, –∞–º–ø–ª—ñ—Ç—É–¥–∞ / –Ω–æ—Ä–º–∞);
    }
  }
  
  // –ö–æ–ª–∞–ø—Å —Ö–≤–∏–ª—å–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
  –∫–æ–ª–∞–ø—Å(): –ì–ª—ñ—Ñ {
    const –≤–∏–ø–∞–¥–∫–æ–≤–µ = Math.random();
    let –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∞ = 0;
    
    for (const [–≥–ª—ñ—Ñ, –∞–º–ø–ª—ñ—Ç—É–¥–∞] of this.—Å—Ç–∞–Ω–∏) {
      –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∞ += –∞–º–ø–ª—ñ—Ç—É–¥–∞ * –∞–º–ø–ª—ñ—Ç—É–¥–∞;
      if (–≤–∏–ø–∞–¥–∫–æ–≤–µ <= –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∞) {
        // –ö–æ–ª–∞–ø—Å—É—î–º–æ –≤ —Ü–µ–π —Å—Ç–∞–Ω
        this.—Å—Ç–∞–Ω–∏.clear();
        this.—Å—Ç–∞–Ω–∏.set(–≥–ª—ñ—Ñ, 1);
        return –≥–ª—ñ—Ñ;
      }
    }
    
    return "üå±"; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  }
  
  // –ö–≤–∞–Ω—Ç–æ–≤–∞ –µ–≤–æ–ª—é—Ü—ñ—è —á–µ—Ä–µ–∑ —É–Ω—ñ—Ç–∞—Ä–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
  –µ–≤–æ–ª—é—Ü—ñ—è(–æ–ø–µ—Ä–∞—Ç–æ—Ä: (–≥: string) => Map<string, number>): void {
    const –Ω–æ–≤—ñ–°—Ç–∞–Ω–∏ = new Map<string, number>();
    
    for (const [–≥–ª—ñ—Ñ, –∞–º–ø–ª—ñ—Ç—É–¥–∞] of this.—Å—Ç–∞–Ω–∏) {
      const –ø–µ—Ä–µ—Ö–æ–¥–∏ = –æ–ø–µ—Ä–∞—Ç–æ—Ä(–≥–ª—ñ—Ñ);
      
      for (const [–Ω–æ–≤–∏–π–ì–ª—ñ—Ñ, –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∞–ê–º–ø–ª—ñ—Ç—É–¥–∞] of –ø–µ—Ä–µ—Ö–æ–¥–∏) {
        const –ø–æ—Ç–æ—á–Ω–∞ = –Ω–æ–≤—ñ–°—Ç–∞–Ω–∏.get(–Ω–æ–≤–∏–π–ì–ª—ñ—Ñ) || 0;
        –Ω–æ–≤—ñ–°—Ç–∞–Ω–∏.set(–Ω–æ–≤–∏–π–ì–ª—ñ—Ñ, –ø–æ—Ç–æ—á–Ω–∞ + –∞–º–ø–ª—ñ—Ç—É–¥–∞ * –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∞–ê–º–ø–ª—ñ—Ç—É–¥–∞);
      }
    }
    
    this.—Å—Ç–∞–Ω–∏ = –Ω–æ–≤—ñ–°—Ç–∞–Ω–∏;
    this.–Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏();
  }
  
  // –ï–Ω—Ç–∞–Ω–≥–ª–º–µ–Ω—Ç –∑ —ñ–Ω—à–∏–º –∫–≤–∞–Ω—Ç–æ–≤–∏–º —Ñ—Ä–∞–∫—Ç–∞–ª–æ–º
  –∑–∞–ø–ª—É—Ç–∞—Ç–∏(—ñ–Ω—à–∏–π: –ö–≤–∞–Ω—Ç–æ–≤–∏–π–§—Ä–∞–∫—Ç–∞–ª): –ö–≤–∞–Ω—Ç–æ–≤–∏–π–§—Ä–∞–∫—Ç–∞–ª {
    const –∑–∞–ø–ª—É—Ç–∞–Ω—ñ–°—Ç–∞–Ω–∏: [–ì–ª—ñ—Ñ, number][] = [];
    
    for (const [–≥1, –∞1] of this.—Å—Ç–∞–Ω–∏) {
      for (const [–≥2, –∞2] of —ñ–Ω—à–∏–π.—Å—Ç–∞–Ω–∏) {
        –∑–∞–ø–ª—É—Ç–∞–Ω—ñ–°—Ç–∞–Ω–∏.push([`${–≥1}‚äó${–≥2}`, –∞1 * –∞2]);
      }
    }
    
    return new –ö–≤–∞–Ω—Ç–æ–≤–∏–π–§—Ä–∞–∫—Ç–∞–ª(–∑–∞–ø–ª—É—Ç–∞–Ω—ñ–°—Ç–∞–Ω–∏);
  }
}

// –ì–æ–ª–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø - –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ñ
export class –ì–æ–ª–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π–ì–ª—ñ—Ñ {
  private –≥—Ä–∞–Ω–∏—Ü—è: –ì–ª—ñ—Ñ[] = [];
  private –æ–±'—î–º: Map<string, –ì–ª—ñ—Ñ> = new Map();
  
  constructor(—Ä–æ–∑–º—ñ—Ä: number) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞–Ω–∏—Ü—é
    for (let i = 0; i < —Ä–æ–∑–º—ñ—Ä; i++) {
      this.–≥—Ä–∞–Ω–∏—Ü—è.push("üåä");
    }
  }
  
  // –ó–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—é
  –∑–∞–ø–∏—Å–∞—Ç–∏–ù–∞–ì—Ä–∞–Ω–∏—Ü—é(–ø–æ–∑–∏—Ü—ñ—è: number, –≥–ª—ñ—Ñ: –ì–ª—ñ—Ñ): void {
    if (–ø–æ–∑–∏—Ü—ñ—è >= 0 && –ø–æ–∑–∏—Ü—ñ—è < this.–≥—Ä–∞–Ω–∏—Ü—è.length) {
      this.–≥—Ä–∞–Ω–∏—Ü—è[–ø–æ–∑–∏—Ü—ñ—è] = –≥–ª—ñ—Ñ;
      this.—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞—Ç–∏–û–±'—î–º();
    }
  }
  
  // –†–µ–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞—Ç–∏ –æ–±'—î–º –∑ –≥—Ä–∞–Ω–∏—Ü—ñ (–≥–æ–ª–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø)
  private —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞—Ç–∏–û–±'—î–º(): void {
    this.–æ–±'—î–º.clear();
    
    // –ö–æ–∂–Ω–∞ —Ç–æ—á–∫–∞ –æ–±'—î–º—É –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –≤—Å—ñ—î—é –≥—Ä–∞–Ω–∏—Ü–µ—é
    for (let x = 0; x < this.–≥—Ä–∞–Ω–∏—Ü—è.length; x++) {
      for (let y = 0; y < this.–≥—Ä–∞–Ω–∏—Ü—è.length; y++) {
        const –∫–ª—é—á = `${x},${y}`;
        
        // –Ü–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü—ñ—è –≤—ñ–¥ –≤—Å—ñ—Ö —Ç–æ—á–æ–∫ –≥—Ä–∞–Ω–∏—Ü—ñ
        const —ñ–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü—ñ—è = this.–æ–±—á–∏—Å–ª–∏—Ç–∏–Ü–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü—ñ—é(x, y);
        this.–æ–±'—î–º.set(–∫–ª—é—á, —ñ–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü—ñ—è);
      }
    }
  }
  
  // –û–±—á–∏—Å–ª–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü—ñ–π–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω
  private –æ–±—á–∏—Å–ª–∏—Ç–∏–Ü–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü—ñ—é(x: number, y: number): –ì–ª—ñ—Ñ {
    const –≥–ª—ñ—Ñ–∏ = ["üåä", "üåÄ", "‚ú®", "üí´"];
    let —Å—É–º–∞ = 0;
    
    for (let i = 0; i < this.–≥—Ä–∞–Ω–∏—Ü—è.length; i++) {
      const –≤—ñ–¥—Å—Ç–∞–Ω—å = Math.sqrt((x - i) ** 2 + y ** 2);
      const —Ñ–∞–∑–∞ = (–≤—ñ–¥—Å—Ç–∞–Ω—å * 2 * Math.PI) / this.–≥—Ä–∞–Ω–∏—Ü—è.length;
      
      // –î–æ–¥–∞—î–º–æ –≤–∫–ª–∞–¥ –≤—ñ–¥ –∫–æ–∂–Ω–æ—ó —Ç–æ—á–∫–∏ –≥—Ä–∞–Ω–∏—Ü—ñ
      —Å—É–º–∞ += Math.sin(—Ñ–∞–∑–∞) * i;
    }
    
    // –ö–≤–∞–Ω—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –≥–ª—ñ—Ñ–∞
    const —ñ–Ω–¥–µ–∫—Å = Math.abs(Math.floor(—Å—É–º–∞)) % –≥–ª—ñ—Ñ–∏.length;
    return –≥–ª—ñ—Ñ–∏[—ñ–Ω–¥–µ–∫—Å];
  }
  
  // –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑ –æ–±'—î–º—É
  –ø—Ä–æ—á–∏—Ç–∞—Ç–∏(x: number, y: number): –ì–ª—ñ—Ñ | undefined {
    return this.–æ–±'—î–º.get(`${x},${y}`);
  }
  
  // –ï–Ω—Ç—Ä–æ–ø—ñ—è –≥—Ä–∞–Ω–∏—Ü—ñ (—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ —î–º–Ω—ñ—Å—Ç—å)
  –µ–Ω—Ç—Ä–æ–ø—ñ—è(): number {
    const —á–∞—Å—Ç–æ—Ç–∏ = new Map<string, number>();
    
    for (const –≥–ª—ñ—Ñ of this.–≥—Ä–∞–Ω–∏—Ü—è) {
      const –≥ = –≥–ª—ñ—Ñ as string;
      —á–∞—Å—Ç–æ—Ç–∏.set(–≥, (—á–∞—Å—Ç–æ—Ç–∏.get(–≥) || 0) + 1);
    }
    
    let –µ–Ω—Ç—Ä–æ–ø—ñ—è = 0;
    const –∑–∞–≥–∞–ª—å–Ω–∞ = this.–≥—Ä–∞–Ω–∏—Ü—è.length;
    
    for (const —á–∞—Å—Ç–æ—Ç–∞ of —á–∞—Å—Ç–æ—Ç–∏.values()) {
      const –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å = —á–∞—Å—Ç–æ—Ç–∞ / –∑–∞–≥–∞–ª—å–Ω–∞;
      if (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å > 0) {
        –µ–Ω—Ç—Ä–æ–ø—ñ—è -= –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å * Math.log2(–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å);
      }
    }
    
    return –µ–Ω—Ç—Ä–æ–ø—ñ—è;
  }
}

// –ú–æ—Ä—Ñ–æ–≥–µ–Ω–µ—Ç–∏—á–Ω–µ –ø–æ–ª–µ - –≥–ª—ñ—Ñ–∏ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Å—É—Å—ñ–¥—ñ–≤
export class –ú–æ—Ä—Ñ–æ–≥–µ–Ω–µ—Ç–∏—á–Ω–µ–ü–æ–ª–µ {
  private –ø–æ–ª–µ: –ì–ª—ñ—Ñ[][] = [];
  private –ø—Ä–∞–≤–∏–ª–∞–†–æ—Å—Ç—É: Map<string, (—Å—É—Å—ñ–¥–∏: –ì–ª—ñ—Ñ[]) => –ì–ª—ñ—Ñ>;
  
  constructor(—à–∏—Ä–∏–Ω–∞: number, –≤–∏—Å–æ—Ç–∞: number) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –Ω–∞—Å—ñ–Ω–Ω—è–º
    for (let y = 0; y < –≤–∏—Å–æ—Ç–∞; y++) {
      this.–ø–æ–ª–µ[y] = [];
      for (let x = 0; x < —à–∏—Ä–∏–Ω–∞; x++) {
        this.–ø–æ–ª–µ[y][x] = Math.random() > 0.5 ? "üå±" : "üåä";
      }
    }
    
    // –ü—Ä–∞–≤–∏–ª–∞ –º–æ—Ä—Ñ–æ–≥–µ–Ω–µ–∑—É
    this.–ø—Ä–∞–≤–∏–ª–∞–†–æ—Å—Ç—É = new Map([
      ["üå±", (—Å—É—Å—ñ–¥–∏) => {
        const –∂–∏–≤—ñ = —Å—É—Å—ñ–¥–∏.filter(—Å => —Å === "üåø" || —Å === "üå≥").length;
        return –∂–∏–≤—ñ >= 2 ? "üåø" : "üå±";
      }],
      ["üåø", (—Å—É—Å—ñ–¥–∏) => {
        const –¥–æ—Ä–æ—Å–ª—ñ = —Å—É—Å—ñ–¥–∏.filter(—Å => —Å === "üå≥").length;
        return –¥–æ—Ä–æ—Å–ª—ñ >= 1 ? "üå≥" : "üåø";
      }],
      ["üå≥", (—Å—É—Å—ñ–¥–∏) => {
        const –≤—Å—ñ = —Å—É—Å—ñ–¥–∏.length;
        return –≤—Å—ñ > 6 ? "üçÇ" : "üå≥";
      }],
      ["üçÇ", () => "üå±"], // –≤—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è
    ]);
  }
  
  // –û–¥–∏–Ω –∫—Ä–æ–∫ —Ä–æ—Å—Ç—É
  –∫—Ä–æ–∫(): void {
    const –Ω–æ–≤–µ–ü–æ–ª–µ: –ì–ª—ñ—Ñ[][] = [];
    
    for (let y = 0; y < this.–ø–æ–ª–µ.length; y++) {
      –Ω–æ–≤–µ–ü–æ–ª–µ[y] = [];
      for (let x = 0; x < this.–ø–æ–ª–µ[y].length; x++) {
        const —Å—É—Å—ñ–¥–∏ = this.–æ—Ç—Ä–∏–º–∞—Ç–∏–°—É—Å—ñ–¥—ñ–≤(x, y);
        const –ø–æ—Ç–æ—á–Ω–∏–π = this.–ø–æ–ª–µ[y][x] as string;
        const –ø—Ä–∞–≤–∏–ª–æ = this.–ø—Ä–∞–≤–∏–ª–∞–†–æ—Å—Ç—É.get(–ø–æ—Ç–æ—á–Ω–∏–π);
        
        –Ω–æ–≤–µ–ü–æ–ª–µ[y][x] = –ø—Ä–∞–≤–∏–ª–æ ? –ø—Ä–∞–≤–∏–ª–æ(—Å—É—Å—ñ–¥–∏) : –ø–æ—Ç–æ—á–Ω–∏–π;
      }
    }
    
    this.–ø–æ–ª–µ = –Ω–æ–≤–µ–ü–æ–ª–µ;
  }
  
  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—É—Å—ñ–¥—ñ–≤ –∫–ª—ñ—Ç–∏–Ω–∫–∏
  private –æ—Ç—Ä–∏–º–∞—Ç–∏–°—É—Å—ñ–¥—ñ–≤(x: number, y: number): –ì–ª—ñ—Ñ[] {
    const —Å—É—Å—ñ–¥–∏: –ì–ª—ñ—Ñ[] = [];
    
    for (let dy = -1; dy <= 1; dy++) {
      for (let dx = -1; dx <= 1; dx++) {
        if (dx === 0 && dy === 0) continue;
        
        const nx = x + dx;
        const ny = y + dy;
        
        if (ny >= 0 && ny < this.–ø–æ–ª–µ.length &&
            nx >= 0 && nx < this.–ø–æ–ª–µ[ny].length) {
          —Å—É—Å—ñ–¥–∏.push(this.–ø–æ–ª–µ[ny][nx]);
        }
      }
    }
    
    return —Å—É—Å—ñ–¥–∏;
  }
  
  // –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–ª—è
  –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏(): string {
    return this.–ø–æ–ª–µ
      .map(—Ä—è–¥–æ–∫ => —Ä—è–¥–æ–∫.join(""))
      .join("\n");
  }
}