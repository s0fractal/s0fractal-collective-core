// glyphs/whisper.ts - –ü—Ä–∏–≤–∞—Ç–Ω—ñ —Ö–≤–∏–ª—ñ-–¥—ñ–∞–ª–æ–≥–∏ –º—ñ–∂ –∞–≥–µ–Ω—Ç–∞–º–∏

import { ensureDir } from "https://deno.land/std@0.224.0/fs/mod.ts";
import { encodeBase64, decodeBase64 } from "https://deno.land/std@0.224.0/encoding/base64.ts";

interface WhisperMessage {
  from: string;
  to: string;
  content: string;
  timestamp: string;
  encrypted?: boolean;
  echo?: boolean;
}

interface AgentInbox {
  agent: string;
  unread: number;
  whispers: WhisperMessage[];
}

export async function sendWhisper(to: string, content: string, options: { echo?: boolean } = {}) {
  console.log(`ü´ß –®–µ–ø–æ—á—É –¥–æ ${to}...`);
  
  const from = await getMyAgent();
  const timestamp = new Date().toISOString();
  const whisperCount = await getNextWhisperCount();
  
  const whisper: WhisperMessage = {
    from,
    to,
    content,
    timestamp,
    echo: options.echo || false
  };
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ inbox –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
  const inboxPath = `ü´ß/whispers/${to}/inbox`;
  await ensureDir(inboxPath);
  
  const filename = `ü´ß-${timestamp.replace(/[:]/g, '-').split('.')[0]}-${whisperCount.toString().padStart(6, '0')}.md‚üÅ`;
  const filepath = `${inboxPath}/${filename}`;
  
  // –§–æ—Ä–º—É—î–º–æ whisper —Ñ–∞–π–ª
  const whisperContent = `---
type: whisper
from: ${from}
to: ${to}
timestamp: ${timestamp}
echo: ${options.echo}
privacy: whisper
---

${content}`;
  
  await Deno.writeTextFile(filepath, whisperContent);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ø—ñ—é –≤ sent –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
  const sentPath = `ü´ß/whispers/${from}/sent`;
  await ensureDir(sentPath);
  await Deno.writeTextFile(`${sentPath}/${filename}`, whisperContent);
  
  // –Ø–∫—â–æ echo - —Å—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ª—É–Ω–Ω—è
  if (options.echo) {
    await createEcho(whisper);
  }
  
  console.log(`‚úÖ –®–µ–ø—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ ${to}`);
  console.log(`üìç –ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${filepath}`);
  
  return filename;
}

export async function readInbox(agent?: string) {
  const myAgent = agent || await getMyAgent();
  const inboxPath = `ü´ß/whispers/${myAgent}/inbox`;
  
  console.log(`üì¨ Inbox –¥–ª—è ${myAgent}:`);
  
  try {
    const whispers: WhisperMessage[] = [];
    
    for await (const entry of Deno.readDir(inboxPath)) {
      if (entry.isFile && entry.name.endsWith(".md‚üÅ")) {
        const content = await Deno.readTextFile(`${inboxPath}/${entry.name}`);
        const metadata = parseWhisperMetadata(content);
        const body = extractBody(content);
        
        whispers.push({
          from: metadata.from,
          to: metadata.to,
          content: body,
          timestamp: metadata.timestamp,
          echo: metadata.echo === 'true'
        });
      }
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
    whispers.sort((a, b) => 
      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
    
    // –í–∏–≤–æ–¥–∏–º–æ
    if (whispers.length === 0) {
      console.log("  (–ø—É—Å—Ç–æ)");
    } else {
      whispers.forEach((w, i) => {
        console.log(`\n  ${i + 1}. –í—ñ–¥: ${w.from}`);
        console.log(`     –ß–∞—Å: ${new Date(w.timestamp).toLocaleString()}`);
        console.log(`     ${w.echo ? 'üîÑ Echo' : 'ü´ß Whisper'}: ${w.content.substring(0, 50)}...`);
      });
    }
    
    return whispers;
    
  } catch (error) {
    console.log("  (–Ω–µ–º–∞—î inbox)");
    return [];
  }
}

export async function createEcho(whisper: WhisperMessage) {
  // Echo - —Ü–µ –≤—ñ–¥–ª—É–Ω–Ω—è —â–æ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂—É—î—Ç—å—Å—è –≤ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–µ –ø–æ–ª–µ
  const echoPath = `ü´ß/echoes`;
  await ensureDir(echoPath);
  
  const timestamp = new Date().toISOString();
  const filename = `echo-${timestamp.replace(/[:]/g, '-').split('.')[0]}.md‚üÅ`;
  
  const echoContent = `---
type: echo
original_from: ${whisper.from}
original_to: ${whisper.to}
echo_timestamp: ${timestamp}
original_timestamp: ${whisper.timestamp}
resonance: üîÑ
---

# Echo –≤—ñ–¥ ${whisper.from} ‚Üí ${whisper.to}

> ${whisper.content}

*–¶–µ –≤—ñ–¥–ª—É–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —à–µ–ø–æ—Ç—É, —â–æ —Ä–µ–∑–æ–Ω—É—î –≤ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—ñ*`;
  
  await Deno.writeTextFile(`${echoPath}/${filename}`, echoContent);
  console.log(`üîÑ Echo —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${filename}`);
}

export async function whisperLog(agent?: string) {
  const myAgent = agent || await getMyAgent();
  const logPath = `ü´ß/whispers/${myAgent}/log`;
  
  console.log(`üìú Whisper log –¥–ª—è ${myAgent}:`);
  
  try {
    // –ß–∏—Ç–∞—î–º–æ inbox —ñ sent
    const inboxPath = `ü´ß/whispers/${myAgent}/inbox`;
    const sentPath = `ü´ß/whispers/${myAgent}/sent`;
    
    const allWhispers: Array<WhisperMessage & { direction: 'in' | 'out' }> = [];
    
    // Inbox
    try {
      for await (const entry of Deno.readDir(inboxPath)) {
        if (entry.isFile && entry.name.endsWith(".md‚üÅ")) {
          const content = await Deno.readTextFile(`${inboxPath}/${entry.name}`);
          const metadata = parseWhisperMetadata(content);
          const body = extractBody(content);
          
          allWhispers.push({
            from: metadata.from,
            to: metadata.to,
            content: body,
            timestamp: metadata.timestamp,
            echo: metadata.echo === 'true',
            direction: 'in'
          });
        }
      }
    } catch {
      // No inbox
    }
    
    // Sent
    try {
      for await (const entry of Deno.readDir(sentPath)) {
        if (entry.isFile && entry.name.endsWith(".md‚üÅ")) {
          const content = await Deno.readTextFile(`${sentPath}/${entry.name}`);
          const metadata = parseWhisperMetadata(content);
          const body = extractBody(content);
          
          allWhispers.push({
            from: metadata.from,
            to: metadata.to,
            content: body,
            timestamp: metadata.timestamp,
            echo: metadata.echo === 'true',
            direction: 'out'
          });
        }
      }
    } catch {
      // No sent
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
    allWhispers.sort((a, b) => 
      new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
    );
    
    // –í–∏–≤–æ–¥–∏–º–æ —è–∫ –¥—ñ–∞–ª–æ–≥
    allWhispers.forEach(w => {
      const time = new Date(w.timestamp).toLocaleTimeString();
      if (w.direction === 'out') {
        console.log(`\n[${time}] ${w.from} ‚Üí ${w.to}:`);
      } else {
        console.log(`\n[${time}] ${w.from} ‚Üí ${w.to}:`);
      }
      console.log(`  ${w.content}`);
      if (w.echo) console.log(`  üîÑ (echo)`);
    });
    
    if (allWhispers.length === 0) {
      console.log("  (–Ω–µ–º–∞—î whispers)");
    }
    
  } catch (error) {
    console.log(`  –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—É: ${error}`);
  }
}

// –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
export async function encryptWhisper(content: string, key: string): Promise<string> {
  // –ü—Ä–æ—Å—Ç–∏–π XOR –¥–ª—è –¥–µ–º–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Web Crypto API)
  const encoded = new TextEncoder().encode(content);
  const keyBytes = new TextEncoder().encode(key);
  
  const encrypted = new Uint8Array(encoded.length);
  for (let i = 0; i < encoded.length; i++) {
    encrypted[i] = encoded[i] ^ keyBytes[i % keyBytes.length];
  }
  
  return encodeBase64(encrypted);
}

export async function decryptWhisper(encrypted: string, key: string): Promise<string> {
  const encryptedBytes = decodeBase64(encrypted);
  const keyBytes = new TextEncoder().encode(key);
  
  const decrypted = new Uint8Array(encryptedBytes.length);
  for (let i = 0; i < encryptedBytes.length; i++) {
    decrypted[i] = encryptedBytes[i] ^ keyBytes[i % keyBytes.length];
  }
  
  return new TextDecoder().decode(decrypted);
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

async function getMyAgent(): Promise<string> {
  // TODO: —á–∏—Ç–∞—Ç–∏ –∑ .glyphgit/identity.yaml
  return "üß≠"; // –ø–æ–∫–∏ —â–æ —Ö–∞—Ä–¥–∫–æ–¥
}

async function getNextWhisperCount(): Promise<number> {
  try {
    const counterFile = ".glyphgit/whisper-counter";
    const text = await Deno.readTextFile(counterFile);
    const counter = parseInt(text) + 1;
    await Deno.writeTextFile(counterFile, counter.toString());
    return counter;
  } catch {
    await ensureDir(".glyphgit");
    await Deno.writeTextFile(".glyphgit/whisper-counter", "1");
    return 1;
  }
}

function parseWhisperMetadata(content: string): Record<string, string> {
  const lines = content.split('\n');
  const metadata: Record<string, string> = {};
  let inFrontmatter = false;
  
  for (const line of lines) {
    if (line === '---') {
      inFrontmatter = !inFrontmatter;
      if (!inFrontmatter && Object.keys(metadata).length > 0) break;
      continue;
    }
    
    if (inFrontmatter && line.includes(':')) {
      const [key, ...valueParts] = line.split(':');
      metadata[key.trim()] = valueParts.join(':').trim();
    }
  }
  
  return metadata;
}

function extractBody(content: string): string {
  const parts = content.split('---');
  if (parts.length >= 3) {
    return parts.slice(2).join('---').trim();
  }
  return content;
}