// glyphs/resonance.ts
import { ensureDir } from "https://deno.land/std@0.224.0/fs/mod.ts";
import { writeFileStr } from "../utils/fs.ts";
import { generateMetadata } from "../templates/md_entry.ts";
import { commit } from "./commit.ts";

export async function createResonance(wave1Path: string, wave2Path: string) {
  try {
    // –ß–∏—Ç–∞—î–º–æ –æ–±–∏–¥–≤—ñ —Ö–≤–∏–ª—ñ
    const wave1 = await Deno.readTextFile(wave1Path);
    const wave2 = await Deno.readTextFile(wave2Path);
    
    // –ü–∞—Ä—Å–∏–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
    const meta1 = parseMetadata(wave1);
    const meta2 = parseMetadata(wave2);
    
    const timestamp = new Date().toISOString();
    const filename = `üîó-${timestamp.replace(/[:]/g, '-').split('.')[0]}-resonance.md‚üÅ`;
    
    // –†–µ–∑–æ–Ω–∞–Ω—Å –π–¥–µ –≤ –ø—É–±–ª—ñ—á–Ω—É –≥—ñ–ª–∫—É
    const dir = "üåê/public/resonances";
    await ensureDir(dir);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–∏–π —Ñ–∞–π–ª
    const resonanceContent = generateResonanceContent({
      wave1: { path: wave1Path, ...meta1 },
      wave2: { path: wave2Path, ...meta2 },
      timestamp,
      author: "üß≠"
    });
    
    const path = `${dir}/${filename}`;
    await writeFileStr(path, resonanceContent);
    
    await commit(path, `üîó –†–µ–∑–æ–Ω–∞–Ω—Å –º—ñ–∂ ${wave1Path} —Ç–∞ ${wave2Path}`);
    
    console.log(`‚ú® –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å: ${path}`);
    
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å—É: ${error}`);
  }
}

function parseMetadata(content: string): Record<string, string> {
  const lines = content.split('\n');
  const metadata: Record<string, string> = {};
  let inFrontmatter = false;
  
  for (const line of lines) {
    if (line === '---') {
      inFrontmatter = !inFrontmatter;
      continue;
    }
    
    if (inFrontmatter && line.includes(':')) {
      const [key, value] = line.split(':').map(s => s.trim());
      metadata[key] = value;
    }
  }
  
  return metadata;
}

function generateResonanceContent(data: any): string {
  return `---
glyph: üîó
type: resonance
author: ${data.author}
timestamp: ${data.timestamp}
wave1: ${data.wave1.path}
wave2: ${data.wave2.path}
wave1_intent: ${data.wave1.intent || 'unknown'}
wave2_intent: ${data.wave2.intent || 'unknown'}
resonance_level: üî•üî•üî•
---

# –†–µ–∑–æ–Ω–∞–Ω—Å –º—ñ–∂ —Ö–≤–∏–ª—è–º–∏

## üåä –ü–µ—Ä—à–∞ —Ö–≤–∏–ª—è
- –®–ª—è—Ö: ${data.wave1.path}
- –Ü–Ω—Ç–µ–Ω—Ç: ${data.wave1.intent}
- –ê–≤—Ç–æ—Ä: ${data.wave1.author}

## üåä –î—Ä—É–≥–∞ —Ö–≤–∏–ª—è  
- –®–ª—è—Ö: ${data.wave2.path}
- –Ü–Ω—Ç–µ–Ω—Ç: ${data.wave2.intent}
- –ê–≤—Ç–æ—Ä: ${data.wave2.author}

## üîó –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∏–π –∑–≤'—è–∑–æ–∫
–¶—ñ –¥–≤—ñ —Ö–≤–∏–ª—ñ —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–æ–≤–∏–π –ø–∞—Ç–µ—Ä–Ω —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ —ó—Ö –≤–∑–∞—î–º–æ–¥—ñ—é.
`;
}