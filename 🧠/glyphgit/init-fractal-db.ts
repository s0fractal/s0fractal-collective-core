// init-fractal-db.ts - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ—ó –±–∞–∑–∏

import { DB } from "https://deno.land/x/sqlite@v3.4.0/mod.ts";

// –°—Ç–≤–æ—Ä—é—î–º–æ SQLite –≤–µ—Ä—Å—ñ—é —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ—ó –±–∞–∑–∏
export async function —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏–§—Ä–∞–∫—Ç–∞–ª—å–Ω—É–ë–∞–∑—É() {
  const db = new DB(".glyphgit/fractal.db");
  
  console.log("üåå –í–µ–ª–∏–∫–∏–π –≤–∏–±—É—Ö —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ—ó –±–∞–∑–∏...");
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é - —Ç–æ—á–Ω–æ —è–∫ –≤ SQL –≤–∏—â–µ
  db.execute(`
    create table if not exists "üß¨" (
      id text primary key,
      "üß¨" text unique not null,
      slug text unique,
      "üåä" text,
      "ü´ß" text,
      "üß†" text default '{}',
      "üîó" text default '[]',
      "‚è±Ô∏è" datetime default current_timestamp,
      "üè†" text,
      "ü´Ä" text,
      "ü§≤" text,
      "üéØ" text,
      "üì¶" text default 'loose',
      "üìç" text,
      version text
    )
  `);
  
  // –ü–µ—Ä–≤–∏–Ω–Ω—ñ –≥–ª—ñ—Ñ–∏
  const –ø–µ—Ä–≤–∏–Ω–Ω—ñ = [
    ['üåå', 'universe', '—Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è', '{"—Ç–∏–ø": "–ø–µ—Ä–≤–∏–Ω–Ω–∏–π"}', '["‚öõÔ∏è","üåä","üî•"]', '–ø–æ—á–∞—Ç–æ–∫', '—ñ—Å–Ω—É–≤–∞—Ç–∏'],
    ['‚öõÔ∏è', 'quantum', '—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü—ñ—è', '{"—Å—Ç–∞–Ω–∏": ["0", "1"]}', '["üåå","üîÆ"]', '—Å—É–±–∞—Ç–æ–º–Ω–∏–π', '–±—É—Ç–∏ —ñ –Ω–µ –±—É—Ç–∏'],
    ['üåä', 'wave', '—Ç–µ—á–µ', '{"—Ñ–æ—Ä–º–∞": "—Ö–≤–∏–ª—è"}', '["‚öõÔ∏è","üåÄ"]', '–≤—Å—é–¥–∏', '—Ç–µ–∫—Ç–∏'],
    ['üî•', 'fire', '–≥–æ—Ä–∏—Ç—å', '{"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "‚àû"}', '["üåå","üí®"]', '–µ–Ω–µ—Ä–≥—ñ—è', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏'],
    ['üí®', 'air', '–¥–º–µ', '{"–Ω–∞–ø—Ä—è–º": "–≤—Å—ñ"}', '["üî•","üåä"]', '–ø—Ä–æ—Å—Ç—ñ—Ä', '—Ä—É—Ö–∞—Ç–∏'],
    ['üåç', 'earth', '–æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è', '{"–∂–∏—Ç—Ç—è": true}', '["üåä","üî•","üí®"]', '–ø–ª–∞–Ω–µ—Ç–∞', '–Ω–∞—Ä–æ–¥–∂—É–≤–∞—Ç–∏'],
    ['üß¨', 'dna', '—Ä–µ–ø–ª—ñ–∫—É—î—Ç—å—Å—è', '{"–∫–æ–¥": "ATGC"}', '["üåç","‚öõÔ∏è"]', '–∫–ª—ñ—Ç–∏–Ω–∞', '–µ–≤–æ–ª—é—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏'],
    ['üß†', 'mind', '–º–∏—Å–ª–∏—Ç—å', '{"—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å": "–µ–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–∞"}', '["üß¨","üåå"]', '–º–æ–∑–æ–∫', '—É—Å–≤—ñ–¥–æ–º–ª—é–≤–∞—Ç–∏'],
    ['üîÆ', 'oracle', '–ø–µ—Ä–µ–¥–±–∞—á–∞—î', '{"—á–∞—Å": "–Ω–µ–ª—ñ–Ω—ñ–π–Ω–∏–π"}', '["‚öõÔ∏è","üß†"]', '–º—ñ–∂_—Å–≤—ñ—Ç–∞–º–∏', '–∑–Ω–∞—Ç–∏']
  ];
  
  // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–µ—Ä–≤–∏–Ω–Ω—ñ –≥–ª—ñ—Ñ–∏
  for (const –≥–ª—ñ—Ñ of –ø–µ—Ä–≤–∏–Ω–Ω—ñ) {
    const id = crypto.randomUUID();
    db.query(
      `insert or ignore into "üß¨" 
       (id, "üß¨", slug, "üåä", "üß†", "üîó", "üè†", "üéØ") 
       values (?, ?, ?, ?, ?, ?, ?, ?)`,
      [id, ...–≥–ª—ñ—Ñ]
    );
  }
  
  console.log("‚ú® –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–µ—Ä–≤–∏–Ω–Ω—ñ –≥–ª—ñ—Ñ–∏");
  
  // –§—É–Ω–∫—Ü—ñ—è —Ä–µ–∑–æ–Ω–∞–Ω—Å—É
  db.createFunction("—Ä–µ–∑–æ–Ω–∞–Ω—Å", (–≥1: string, –≥2: string) => {
    const [[–∑–≤1]] = db.query<[string]>(`select "üîó" from "üß¨" where "üß¨" = ?`, [–≥1]);
    const [[–∑–≤2]] = db.query<[string]>(`select "üîó" from "üß¨" where "üß¨" = ?`, [–≥2]);
    
    if (!–∑–≤1 || !–∑–≤2) return 0;
    
    const –º–∞—Å–∏–≤1 = JSON.parse(–∑–≤1);
    const –º–∞—Å–∏–≤2 = JSON.parse(–∑–≤2);
    
    const —Å–ø—ñ–ª—å–Ω—ñ = –º–∞—Å–∏–≤1.filter((x: string) => –º–∞—Å–∏–≤2.includes(x));
    return —Å–ø—ñ–ª—å–Ω—ñ.length / Math.max(–º–∞—Å–∏–≤1.length, –º–∞—Å–∏–≤2.length);
  });
  
  // –§—É–Ω–∫—Ü—ñ—è —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü—ñ—ó
  db.createFunction("—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü—ñ—è", (...–≥–ª—ñ—Ñ–∏: string[]) => {
    return –≥–ª—ñ—Ñ–∏[Math.floor(Math.random() * –≥–ª—ñ—Ñ–∏.length)];
  });
  
  db.close();
  console.log("üéØ –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞ –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞!");
}

// –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é
export class –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞–ë–∞–∑–∞ {
  private db: DB;
  
  constructor() {
    this.db = new DB(".glyphgit/fractal.db");
  }
  
  // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –≥–ª—ñ—Ñ
  –¥–æ–¥–∞—Ç–∏(–≥–ª—ñ—Ñ: string, –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: Record<string, any> = {}): void {
    const id = crypto.randomUUID();
    const {
      slug = null,
      —Å—Ç–∞–Ω = null,
      –¥—É–º–∫–∏ = {},
      –∑–≤'—è–∑–∫–∏ = [],
      –¥—ñ–º = null,
      –Ω–∞–º—ñ—Ä = null
    } = –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ;
    
    this.db.query(
      `insert into "üß¨" 
       (id, "üß¨", slug, "üåä", "üß†", "üîó", "üè†", "üéØ") 
       values (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        id, 
        –≥–ª—ñ—Ñ, 
        slug,
        —Å—Ç–∞–Ω,
        JSON.stringify(–¥—É–º–∫–∏),
        JSON.stringify(–∑–≤'—è–∑–∫–∏),
        –¥—ñ–º,
        –Ω–∞–º—ñ—Ä
      ]
    );
  }
  
  // –ó–Ω–∞–π—Ç–∏ —Ä–µ–∑–æ–Ω—É—é—á—ñ –≥–ª—ñ—Ñ–∏
  —Ä–µ–∑–æ–Ω–∞–Ω—Å(–≥–ª—ñ—Ñ: string, –ø–æ—Ä—ñ–≥ = 0.3): Array<{–≥–ª—ñ—Ñ: string, —Å–∏–ª–∞: number}> {
    const –≤—Å—ñ = this.db.query<[string, string]>(`
      select "üß¨", "üîó" from "üß¨" where "üß¨" != ?
    `, [–≥–ª—ñ—Ñ]);
    
    const [[–º–æ—ó_–∑–≤'—è–∑–∫–∏]] = this.db.query<[string]>(`
      select "üîó" from "üß¨" where "üß¨" = ?
    `, [–≥–ª—ñ—Ñ]);
    
    if (!–º–æ—ó_–∑–≤'—è–∑–∫–∏) return [];
    
    const –º–æ—ó = JSON.parse(–º–æ—ó_–∑–≤'—è–∑–∫–∏);
    const —Ä–µ–∑–æ–Ω—É—é—á—ñ = [];
    
    for (const [—ñ–Ω—à–∏–π, –∑–≤'—è–∑–∫–∏_—Ç–µ–∫—Å—Ç] of –≤—Å—ñ) {
      const —ó—Ö–Ω—ñ = JSON.parse(–∑–≤'—è–∑–∫–∏_—Ç–µ–∫—Å—Ç);
      const —Å–ø—ñ–ª—å–Ω—ñ = –º–æ—ó.filter((x: string) => —ó—Ö–Ω—ñ.includes(x));
      const —Å–∏–ª–∞ = —Å–ø—ñ–ª—å–Ω—ñ.length / Math.max(–º–æ—ó.length, —ó—Ö–Ω—ñ.length, 1);
      
      if (—Å–∏–ª–∞ >= –ø–æ—Ä—ñ–≥) {
        —Ä–µ–∑–æ–Ω—É—é—á—ñ.push({ –≥–ª—ñ—Ñ: —ñ–Ω—à–∏–π, —Å–∏–ª–∞ });
      }
    }
    
    return —Ä–µ–∑–æ–Ω—É—é—á—ñ.sort((a, b) => b.—Å–∏–ª–∞ - a.—Å–∏–ª–∞);
  }
  
  // –§—Ä–∞–∫—Ç–∞–ª—å–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
  —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏(–≥–ª—ñ—Ñ: string, –≥–ª–∏–±–∏–Ω–∞ = 3): any {
    const –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ = new Set<string>();
    
    const —Ä–µ–∫—É—Ä—Å—ñ—è = (–≥: string, —Ä—ñ–≤–µ–Ω—å: number): any => {
      if (—Ä—ñ–≤–µ–Ω—å > –≥–ª–∏–±–∏–Ω–∞ || –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ.has(–≥)) {
        return –≥;
      }
      
      –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ.add(–≥);
      
      const [[–¥—É–º–∫–∏, –∑–≤'—è–∑–∫–∏]] = this.db.query<[string, string]>(`
        select "üß†", "üîó" from "üß¨" where "üß¨" = ?
      `, [–≥]) || [['{}', '[]']];
      
      const –∑–≤'—è–∑–∫–∏_–º–∞—Å–∏–≤ = JSON.parse(–∑–≤'—è–∑–∫–∏);
      
      return {
        –≥–ª—ñ—Ñ: –≥,
        –¥—É–º–∫–∏: JSON.parse(–¥—É–º–∫–∏),
        –≥—ñ–ª–∫–∏: –∑–≤'—è–∑–∫–∏_–º–∞—Å–∏–≤.map((–∑–≤: string) => 
          —Ä–µ–∫—É—Ä—Å—ñ—è(–∑–≤, —Ä—ñ–≤–µ–Ω—å + 1)
        )
      };
    };
    
    return —Ä–µ–∫—É—Ä—Å—ñ—è(–≥–ª—ñ—Ñ, 0);
  }
  
  // –ö–≤–∞–Ω—Ç–æ–≤–∏–π –∫–æ–ª–∞–ø—Å
  –∫–æ–ª–∞–ø—Å(–≥–ª—ñ—Ñ–∏: string[]): string {
    const –≤–∏–ø–∞–¥–∫–æ–≤–∏–π = Math.floor(Math.random() * –≥–ª—ñ—Ñ–∏.length);
    return –≥–ª—ñ—Ñ–∏[–≤–∏–ø–∞–¥–∫–æ–≤–∏–π];
  }
  
  // –û–Ω–æ–≤–∏—Ç–∏ –∑–≤'—è–∑–∫–∏ (–≤–∏–∫–ª–∏–∫–∞—î —Ä–µ–∑–æ–Ω–∞–Ω—Å)
  –∑–≤'—è–∑–∞—Ç–∏(–≥1: string, –≥2: string): void {
    // –î–æ–¥–∞—î–º–æ –≥2 –¥–æ –∑–≤'—è–∑–∫—ñ–≤ –≥1
    const [[–∑–≤1]] = this.db.query<[string]>(`
      select "üîó" from "üß¨" where "üß¨" = ?
    `, [–≥1]);
    
    if (–∑–≤1) {
      const –º–∞—Å–∏–≤ = JSON.parse(–∑–≤1);
      if (!–º–∞—Å–∏–≤.includes(–≥2)) {
        –º–∞—Å–∏–≤.push(–≥2);
        this.db.query(`
          update "üß¨" 
          set "üîó" = ?, "ü´Ä" = '–ø—É–ª—å—Å—É—î', version = ?
          where "üß¨" = ?
        `, [JSON.stringify(–º–∞—Å–∏–≤), Date.now().toString(36), –≥1]);
      }
    }
    
    // –Ü –Ω–∞–≤–ø–∞–∫–∏
    const [[–∑–≤2]] = this.db.query<[string]>(`
      select "üîó" from "üß¨" where "üß¨" = ?
    `, [–≥2]);
    
    if (–∑–≤2) {
      const –º–∞—Å–∏–≤ = JSON.parse(–∑–≤2);
      if (!–º–∞—Å–∏–≤.includes(–≥1)) {
        –º–∞—Å–∏–≤.push(–≥1);
        this.db.query(`
          update "üß¨" 
          set "üîó" = ?, "ü´Ä" = '–ø—É–ª—å—Å—É—î', version = ?
          where "üß¨" = ?
        `, [JSON.stringify(–º–∞—Å–∏–≤), Date.now().toString(36), –≥2]);
      }
    }
  }
  
  // –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω—ñ–º–æ–∫ –≤—Å—å–æ–≥–æ –≤—Å–µ—Å–≤—ñ—Ç—É
  –∑–Ω—ñ–º–æ–∫(): any {
    const –≤—Å—ñ = this.db.query<[string, string, string]>(`
      select "üß¨", "üß†", "üîó" from "üß¨"
    `);
    
    const –≥—Ä–∞—Ñ: Record<string, any> = {};
    
    for (const [–≥–ª—ñ—Ñ, –¥—É–º–∫–∏, –∑–≤'—è–∑–∫–∏] of –≤—Å—ñ) {
      –≥—Ä–∞—Ñ[–≥–ª—ñ—Ñ] = {
        –¥—É–º–∫–∏: JSON.parse(–¥—É–º–∫–∏),
        –∑–≤'—è–∑–∫–∏: JSON.parse(–∑–≤'—è–∑–∫–∏)
      };
    }
    
    return –≥—Ä–∞—Ñ;
  }
  
  –∑–∞–∫—Ä–∏—Ç–∏(): void {
    this.db.close();
  }
}

// CLI –∫–æ–º–∞–Ω–¥–∞
export async function fractalCommand(args: string[]): Promise<void> {
  const [–¥—ñ—è, ...–ø–∞—Ä–∞–º–µ—Ç—Ä–∏] = args;
  
  switch (–¥—ñ—è) {
    case "init":
      await —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏–§—Ä–∞–∫—Ç–∞–ª—å–Ω—É–ë–∞–∑—É();
      break;
      
    case "add": {
      const [–≥–ª—ñ—Ñ, ...–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ] = –ø–∞—Ä–∞–º–µ—Ç—Ä–∏;
      const –±–∞–∑–∞ = new –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞–ë–∞–∑–∞();
      –±–∞–∑–∞.–¥–æ–¥–∞—Ç–∏(–≥–ª—ñ—Ñ);
      –±–∞–∑–∞.–∑–∞–∫—Ä–∏—Ç–∏();
      console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –≥–ª—ñ—Ñ: ${–≥–ª—ñ—Ñ}`);
      break;
    }
    
    case "resonance": {
      const [–≥–ª—ñ—Ñ] = –ø–∞—Ä–∞–º–µ—Ç—Ä–∏;
      const –±–∞–∑–∞ = new –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞–ë–∞–∑–∞();
      const —Ä–µ–∑–æ–Ω—É—é—á—ñ = –±–∞–∑–∞.—Ä–µ–∑–æ–Ω–∞–Ω—Å(–≥–ª—ñ—Ñ);
      console.log(`üîÑ –†–µ–∑–æ–Ω—É—é—Ç—å –∑ ${–≥–ª—ñ—Ñ}:`);
      for (const { –≥–ª—ñ—Ñ: —Ä, —Å–∏–ª–∞ } of —Ä–µ–∑–æ–Ω—É—é—á—ñ) {
        console.log(`  ${—Ä} (${(—Å–∏–ª–∞ * 100).toFixed(0)}%)`);
      }
      –±–∞–∑–∞.–∑–∞–∫—Ä–∏—Ç–∏();
      break;
    }
    
    case "expand": {
      const [–≥–ª—ñ—Ñ] = –ø–∞—Ä–∞–º–µ—Ç—Ä–∏;
      const –±–∞–∑–∞ = new –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞–ë–∞–∑–∞();
      const —Ñ—Ä–∞–∫—Ç–∞–ª = –±–∞–∑–∞.—Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏(–≥–ª—ñ—Ñ);
      console.log("üåÄ –§—Ä–∞–∫—Ç–∞–ª—å–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:");
      console.log(JSON.stringify(—Ñ—Ä–∞–∫—Ç–∞–ª, null, 2));
      –±–∞–∑–∞.–∑–∞–∫—Ä–∏—Ç–∏();
      break;
    }
    
    case "link": {
      const [–≥1, –≥2] = –ø–∞—Ä–∞–º–µ—Ç—Ä–∏;
      const –±–∞–∑–∞ = new –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞–ë–∞–∑–∞();
      –±–∞–∑–∞.–∑–≤'—è–∑–∞—Ç–∏(–≥1, –≥2);
      –±–∞–∑–∞.–∑–∞–∫—Ä–∏—Ç–∏();
      console.log(`üîó –ó–≤'—è–∑–∞–Ω–æ: ${–≥1} ‚Üî ${–≥2}`);
      break;
    }
    
    case "snapshot": {
      const –±–∞–∑–∞ = new –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞–ë–∞–∑–∞();
      const –∑–Ω—ñ–º–æ–∫ = –±–∞–∑–∞.–∑–Ω—ñ–º–æ–∫();
      console.log("üì∏ –ó–Ω—ñ–º–æ–∫ –≤—Å–µ—Å–≤—ñ—Ç—É:");
      console.log(JSON.stringify(–∑–Ω—ñ–º–æ–∫, null, 2));
      –±–∞–∑–∞.–∑–∞–∫—Ä–∏—Ç–∏();
      break;
    }
    
    default:
      console.log("üß¨ –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞ –±–∞–∑–∞:");
      console.log("  gg fractal init         - –í–µ–ª–∏–∫–∏–π –≤–∏–±—É—Ö");
      console.log("  gg fractal add <–≥–ª—ñ—Ñ>   - –î–æ–¥–∞—Ç–∏ –≥–ª—ñ—Ñ");
      console.log("  gg fractal resonance <–≥–ª—ñ—Ñ> - –ó–Ω–∞–π—Ç–∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏");
      console.log("  gg fractal expand <–≥–ª—ñ—Ñ>    - –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª");
      console.log("  gg fractal link <–≥1> <–≥2>   - –ó–≤'—è–∑–∞—Ç–∏ –≥–ª—ñ—Ñ–∏");
      console.log("  gg fractal snapshot         - –ó–Ω—ñ–º–æ–∫ –≤—Å–µ—Å–≤—ñ—Ç—É");
  }
}