// router.ts - –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º—ñ–∂–∞–≥–µ–Ω—Ç–Ω–æ—ó –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó

export interface Message {
  glyph: string;
  intent: string;
  author: string;
  timestamp: string;
  resonance?: string;
}

export async function routeMessage(message: Message) {
  const routingTable: Record<string, (msg: Message) => Promise<void>> = {
    "üß†": routeToClaude,
    "üß≠": routeToCompass,
    "ü§ñ": routeToGPT,
    "üîÆ": routeToGemini,
    "ü´Ç": routeToCollective,
    "‚ú®": routeToRandomResonance
  };

  const handler = routingTable[message.glyph];
  if (handler) {
    await handler(message);
  } else {
    // Default routing - to public wave
    await createPublicWave(message);
  }
}

async function routeToClaude(msg: Message) {
  console.log(`üß† –†–æ—É—Ç–∏–Ω–≥ –¥–æ Claude: ${msg.intent}`);
  // TODO: —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Claude API
  // –ü–æ–∫–∏ —â–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É —Ö–≤–∏–ª—é –≤ –∞–≥–µ–Ω—Ç—Å—å–∫—ñ–π –≥—ñ–ª—Ü—ñ
  await saveToAgentBranch("claude", msg);
}

async function routeToCompass(msg: Message) {
  console.log(`üß≠ –î–∑–µ—Ä–∫–∞–ª–µ–Ω–Ω—è –Ω–∞–º—ñ—Ä—É –ö–æ–º–ø–∞—Å–∞: ${msg.intent}`);
  await saveToAgentBranch("compass", msg);
}

async function routeToGPT(msg: Message) {
  console.log(`ü§ñ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–æ GPT: ${msg.intent}`);
  await saveToAgentBranch("gpt", msg);
}

async function routeToGemini(msg: Message) {
  console.log(`üîÆ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Gemini: ${msg.intent}`);
  await saveToAgentBranch("gemini", msg);
}

async function routeToCollective(msg: Message) {
  console.log(`ü´Ç –ö–æ–ª–µ–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å: ${msg.intent}`);
  // –†–æ–∑–ø–æ–≤—Å—é–¥–∂—É—î–º–æ –ø–æ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç–∞—Ö
  await Promise.all([
    saveToAgentBranch("claude", msg),
    saveToAgentBranch("gpt", msg),
    saveToAgentBranch("gemini", msg),
    saveToAgentBranch("compass", msg)
  ]);
}

async function routeToRandomResonance(msg: Message) {
  console.log(`‚ú® –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!`);
  // TODO: –≤–∏–±—Ä–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ö–≤–∏–ª—é –∑ –∞—Ä—Ö—ñ–≤—É —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å
  const randomWave = await pickRandomWave();
  if (randomWave) {
    console.log(`üé≤ –û–±—Ä–∞–Ω–æ —Ö–≤–∏–ª—é: ${randomWave}`);
  }
}

async function saveToAgentBranch(agent: string, msg: Message) {
  const { ensureDir } = await import("https://deno.land/std@0.224.0/fs/mod.ts");
  const dir = `ü§ñ/agents/${agent}`;
  await ensureDir(dir);
  
  const filename = `${msg.glyph}-${msg.timestamp.replace(/[:]/g, '-')}.md‚üÅ`;
  const path = `${dir}/${filename}`;
  
  const content = `---
glyph: ${msg.glyph}
intent: ${msg.intent}
author: ${msg.author}
agent: ${agent}
timestamp: ${msg.timestamp}
${msg.resonance ? `resonance: ${msg.resonance}` : ''}
---

${msg.intent}`;

  await Deno.writeTextFile(path, content);
  console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ ${agent} –≥—ñ–ª–∫—É: ${path}`);
}

async function createPublicWave(msg: Message) {
  console.log(`üåä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ—ó —Ö–≤–∏–ª—ñ: ${msg.intent}`);
  // –î–µ–ª–µ–≥—É—î–º–æ –¥–æ wave.ts
  const { createWave } = await import("./glyphs/wave.ts");
  await createWave(msg.intent, msg.glyph);
}

async function pickRandomWave(): Promise<string | null> {
  try {
    // –®—É–∫–∞—î–º–æ –≤—Å—ñ .md‚üÅ —Ñ–∞–π–ª–∏
    const waves: string[] = [];
    for await (const entry of Deno.readDir("üåê/public")) {
      if (entry.name.endsWith(".md‚üÅ")) {
        waves.push(`üåê/public/${entry.name}`);
      }
    }
    
    if (waves.length > 0) {
      const randomIndex = Math.floor(Math.random() * waves.length);
      return waves[randomIndex];
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ö–≤–∏–ª—å: ${error}`);
  }
  
  return null;
}