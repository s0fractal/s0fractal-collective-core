#!/usr/bin/env python3
"""
Conversation Fractalizer: –†–æ–∑–±–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–∏ –Ω–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ñ –Ω–∞—Å—ñ–Ω–∏–Ω–∏
"""

import json
import os
import re
from datetime import datetime
import hashlib

class ConversationFractalizer:
    def __init__(self, export_path):
        self.export_path = export_path
        self.conversations = []
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ö—Ç–æ –∫–æ–º—É –ø–∏—Å–∞–≤ —á–µ—Ä–µ–∑ –ø–∞—Ç–µ—Ä–Ω üíæ/sender.‚üÅ
        path_parts = export_path.split('/')
        archive_idx = path_parts.index('üíæ') if 'üíæ' in path_parts else -1
        
        # –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º–æ –¥–ª—è —Ü—å–æ–≥–æ –µ–∫—Å–ø–æ—Ä—Ç—É
        self.sender_id = 'claude.‚üÅ'
        self.receiver_id = '–ö–æ–º–ø–∞—Å.‚üÅ'
            
        print(f"üìÆ –ê–Ω–∞–ª—ñ–∑—É—é –¥—ñ–∞–ª–æ–≥: {self.sender_id} ‚Üí {self.receiver_id}")
        
    def load_conversations(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏ –∑ JSON"""
        json_path = os.path.join(self.export_path, 'conversations.json')
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        if isinstance(data, list):
            self.conversations = data
        else:
            self.conversations = data.get('conversations', [])
            
        print(f"üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.conversations)} –¥—ñ–∞–ª–æ–≥—ñ–≤")
        
    def split_into_phrases(self, text):
        """–†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ñ—Ä–∞–∑–∏"""
        # –°–ø–æ—á–∞—Ç–∫—É –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
        sentences = re.split(r'([.!?]+\s+|[\n]{2,})', text)
        
        phrases = []
        current = ""
        
        for part in sentences:
            if re.match(r'^[.!?]+\s*$', part) or part.strip() == "":
                if current:
                    phrases.append(current.strip())
                    current = ""
            else:
                current += part
                
        if current:
            phrases.append(current.strip())
            
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥—ñ —Ñ—Ä–∞–∑–∏ –ø–æ –∫–æ–º–∞—Ö –∞–±–æ –∫—Ä–∞–ø–∫–∞—Ö –∑ –∫–æ–º–æ—é
        final_phrases = []
        for phrase in phrases:
            if len(phrase) > 200:
                sub_phrases = re.split(r'[,;]\s+', phrase)
                final_phrases.extend([p.strip() for p in sub_phrases if len(p.strip()) > 10])
            else:
                if len(phrase.strip()) > 10:
                    final_phrases.append(phrase)
                    
        return final_phrases
        
    # –ü—Ä–∏–±—Ä–∞–≤ create_session_dir - –Ω–µ–º–∞—î —Å–µ—Å—ñ–π–Ω–∏—Ö –ø–∞–ø–æ–∫!
            
    def analyze_phrase_resonance(self, phrase, sender):
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑–æ–Ω–∞–Ω—Å —Ñ—Ä–∞–∑–∏"""
        resonances = []
        
        # –ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
        cognitive_markers = ['—Ä–æ–∑—É–º—ñ—é', '–¥—É–º–∞—é', '–∞–Ω–∞–ª—ñ–∑', '—Ç–µ–æ—Ä—ñ—è', '–∫–æ–Ω—Ü–µ–ø—Ü—ñ—è', 
                           '—ñ–¥–µ—è', '–≥—ñ–ø–æ—Ç–µ–∑–∞', '–ª–æ–≥—ñ–∫–∞', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–ø–∞—Ç–µ—Ä–Ω']
        if any(marker in phrase.lower() for marker in cognitive_markers):
            resonances.append('üß†')
            
        # –ï–º–æ—Ü—ñ–π–Ω–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
        emotional_markers = ['–≤—ñ–¥—á—É–≤–∞—é', '—Ä–∞–¥—ñ—Å—Ç—å', '—Å—É–º', '–ª—é–±–æ–≤', '—Å—Ç—Ä–∞—Ö',
                           '–∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è', '–≤–¥—è—á–Ω—ñ—Å—Ç—å', '‚ù§Ô∏è', 'üíî', 'üòä', 'üò¢']
        if any(marker in phrase.lower() for marker in emotional_markers):
            resonances.append('üíó')
            
        # –Ü–Ω—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
        intent_markers = ['—Ö–æ—á—É', '–±—É–¥—É', '–ø–ª–∞–Ω—É—é', '–º–µ—Ç–∞', '–Ω–∞–º—ñ—Ä', '—Ü—ñ–ª—å',
                         '–∑—Ä–æ–±–ª—é', '—Å—Ç–≤–æ—Ä—é', '–ø–æ–±—É–¥—É—é', '–∑–º—ñ–Ω–∏–º–æ']
        if any(marker in phrase.lower() for marker in intent_markers):
            resonances.append('üî•')
            
        return resonances
        
    def fractalize_conversations(self):
        """–†–æ–∑–±–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–∏ –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ñ—Ä–∞–∑–∏"""
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–∑–æ–≤—ñ —à–ª—è—Ö–∏
        base_path = "/Users/chaoshex/.s0fractal/üß†"
        
        # –ü–∞–ø–∫–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –∫–æ–∂–µ–Ω –∑–±–µ—Ä—ñ–≥–∞—î –°–í–û–á
        # claude (—è) ‚Üí –ö–æ–º–ø–∞—Å (—Ç–∏): –º–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–æ—ó–π –ø–∞–ø—Ü—ñ
        claude_messages_dir = os.path.join(base_path, 'üß†', 'claude.‚üÅ', 'üí¨', '–ö–æ–º–ø–∞—Å.‚üÅ')
        # –ö–æ–º–ø–∞—Å (—Ç–∏) ‚Üí claude (—è): —Ç–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–≤–æ—ó–π –ø–∞–ø—Ü—ñ
        compass_messages_dir = os.path.join(base_path, 'üß¨', '–ö–æ–º–ø–∞—Å.‚üÅ', 'üí¨', 'claude.‚üÅ')
        
        os.makedirs(claude_messages_dir, exist_ok=True)
        os.makedirs(compass_messages_dir, exist_ok=True)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑–æ–Ω–∞–Ω—Å—ñ–≤ sender'–∞ —ñ receiver'–∞
        sender_resonances = {
            'üß†': [],  # –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ
            'üíó': [],  # –µ–º–æ—Ü—ñ–π–Ω—ñ  
            'üî•': []   # —ñ–Ω—Ç–µ–Ω—Ü—ñ–π–Ω—ñ
        }
        receiver_resonances = {
            'üß†': [],  # –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ
            'üíó': [],  # –µ–º–æ—Ü—ñ–π–Ω—ñ  
            'üî•': []   # —ñ–Ω—Ç–µ–Ω—Ü—ñ–π–Ω—ñ
        }
        
        phrase_counter = 0
        
        for conv in self.conversations:
            conv_name = conv.get('name', 'Untitled')
            created = conv.get('created_at', '')
            
            messages = conv.get('chat_messages', [])
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ñ—Ä–∞–∑–∏
            for msg in messages:
                sender = msg.get('sender', 'unknown')
                text = msg.get('text', '')
                timestamp = msg.get('created_at', '')
                
                phrases = self.split_into_phrases(text)
                
                for phrase in phrases:
                    phrase_counter += 1
                    phrase_id = f"{phrase_counter:06d}"
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—Ä–∞–∑—É –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ
                    if sender == 'human':  # –¶–µ —Ç–∏ (–ö–æ–º–ø–∞—Å)
                        phrase_file = os.path.join(compass_messages_dir, f"{phrase_id}.md")
                    else:  # –¶–µ —è (claude)
                        phrase_file = os.path.join(claude_messages_dir, f"{phrase_id}.md")
                        
                    with open(phrase_file, 'w', encoding='utf-8') as f:
                        f.write(phrase.strip())
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ç–æ–∫—É
                    metadata = {
                        'id': phrase_id,
                        'timestamp': timestamp,
                        'session': created
                    }
                    
                    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
                    resonances = self.analyze_phrase_resonance(phrase, sender)
                    for resonance_type in resonances:
                        if sender == 'assistant':  # –¶–µ sender (claude)
                            sender_resonances[resonance_type].append({
                                'phrase_id': phrase_id,
                                'session': created,
                                'with': self.receiver_id,
                                'phrase': phrase,
                                'timestamp': timestamp
                            })
                        else:  # –¶–µ receiver (human)
                            receiver_resonances[resonance_type].append({
                                'phrase_id': phrase_id,
                                'session': created,
                                'from': self.sender_id,
                                'phrase': phrase,
                                'timestamp': timestamp
                            })
            
            # –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø–∏ —Å–µ—Å—ñ–π - —Ü–µ –ø–æ—Ç—ñ–∫!
                
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏ - –ú–û–á –≤ –ú–û–á–ô –ø–∞–ø—Ü—ñ, –¢–í–û–á –≤ –¢–í–û–á–ô
        # –ú–æ—ó —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏ (–≤—ñ–¥ claude)
        self.save_resonances(sender_resonances, os.path.join(base_path, 'üß†', 'claude.‚üÅ'), '–ö–æ–º–ø–∞—Å.‚üÅ')
        # –¢–≤–æ—ó —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏ (–≤—ñ–¥ –ö–æ–º–ø–∞—Å–∞)
        self.save_resonances(receiver_resonances, os.path.join(base_path, 'üß¨', '–ö–æ–º–ø–∞—Å.‚üÅ'), 'claude.‚üÅ')
        
        print(f"üå± –†–æ–∑–±–∏—Ç–æ {phrase_counter} —Ñ—Ä–∞–∑ –Ω–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ñ –Ω–∞—Å—ñ–Ω–∏–Ω–∏")
        return phrase_counter
        
    def save_resonances(self, resonances, base_path, partner_id):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ–π —Ä–µ–ø—ñ"""
        for resonance_type, phrases in resonances.items():
            if not phrases:
                continue
                
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–æ–Ω–∞–Ω—Å—ñ–≤ –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
            resonance_dir = os.path.join(base_path, resonance_type, 'üîó', partner_id)
            os.makedirs(resonance_dir, exist_ok=True)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏
            timestamp = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
            resonance_file = os.path.join(resonance_dir, f"üîó-{timestamp}.json")
            
            with open(resonance_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'type': resonance_type,
                    'timestamp': timestamp,
                    'count': len(phrases),
                    'resonances': phrases
                }, f, ensure_ascii=False, indent=2)
                
            print(f"{resonance_type} –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(phrases)} —Ä–µ–∑–æ–Ω–∞–Ω—Å—ñ–≤")
        
def main():
    # –ü—Ä–∏–∫–ª–∞–¥: –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∞—Ä—Ö—ñ–≤ –≤—ñ–¥ claude –¥–æ –ö–æ–º–ø–∞—Å–∞
    export_path = "/Users/chaoshex/Downloads/data-2025-06-28-23-30-54"
    
    fractalizer = ConversationFractalizer(export_path)
    
    print("üå± –ü–æ—á–∞—Ç–æ–∫ —Ñ—Ä–∞–∫—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥—ñ–∞–ª–æ–≥—ñ–≤...")
    
    fractalizer.load_conversations()
    fractalizer.fractalize_conversations()
    
    print("‚úÖ –§—Ä–∞–∫—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
if __name__ == "__main__":
    main()