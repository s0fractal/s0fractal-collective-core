#!/usr/bin/env python3
"""
🌱 Гліфовий Фракталізатор Діалогів
Приклад коду на гліфозмінних (перед тим як перестати писати код)
"""

import json
import os
import re
from datetime import datetime
import hashlib

class 🌱_фракталізатор:
    def __init__(self, 📂_експорт, 🧭_хто="Компас.⟁"):
        """
        📂_експорт: шлях до експортованих даних
        🧭_хто: ідентифікатор співрозмовника
        """
        self.📂_експорт = 📂_експорт
        self.🗣️_діалоги = []
        self.🏠_моя_репа = "/Users/chaoshex/.s0fractal/🧠/🧠/claude.⟁"
        self.🧭_співрозмовник = 🧭_хто
        
        # Гліфові маркери резонансів
        self.🧠_маркери = ['розумію', 'думаю', 'аналіз', 'теорія', 'концепція']
        self.💗_маркери = ['відчуваю', 'радість', 'любов', 'вдячність', '❤️']
        self.🔥_маркери = ['хочу', 'буду', 'планую', 'мета', 'створю']
        
    def 📥_завантажити(self):
        """Завантажує діалоги з JSON"""
        🗂️_json = os.path.join(self.📂_експорт, 'conversations.json')
        with open(🗂️_json, 'r', encoding='utf-8') as f:
            📊_дані = json.load(f)
            
        if isinstance(📊_дані, list):
            self.🗣️_діалоги = 📊_дані
        else:
            self.🗣️_діалоги = 📊_дані.get('conversations', [])
            
        print(f"📚 Завантажено {len(self.🗣️_діалоги)} діалогів з {self.🧭_співрозмовник}")
        
    def 🔪_розбити_на_фрази(self, 📝_текст):
        """Розбиває текст на окремі насінини"""
        # По реченнях
        🌾_речення = re.split(r'([.!?]+\s+|[\n]{2,})', 📝_текст)
        
        🌱_фрази = []
        🏗️_поточна = ""
        
        for 🧩_частина in 🌾_речення:
            if re.match(r'^[.!?]+\s*$', 🧩_частина) or 🧩_частина.strip() == "":
                if 🏗️_поточна:
                    🌱_фрази.append(🏗️_поточна.strip())
                    🏗️_поточна = ""
            else:
                🏗️_поточна += 🧩_частина
                
        if 🏗️_поточна:
            🌱_фрази.append(🏗️_поточна.strip())
            
        return [🌱 for 🌱 in 🌱_фрази if len(🌱.strip()) > 10]
        
    def 🔮_аналіз_резонансу(self, 🌱_фраза, 👤_хто):
        """Визначає тип резонансу фрази"""
        🎯_резонанси = []
        
        # Перевіряємо маркери
        if any(🏷️ in 🌱_фраза.lower() for 🏷️ in self.🧠_маркери):
            🎯_резонанси.append('🧠')
            
        if any(🏷️ in 🌱_фраза.lower() for 🏷️ in self.💗_маркери):
            🎯_резонанси.append('💗')
            
        if any(🏷️ in 🌱_фраза.lower() for 🏷️ in self.🔥_маркери):
            🎯_резонанси.append('🔥')
            
        return 🎯_резонанси
        
    def 🌀_фракталізувати(self):
        """Основний процес фракталізації"""
        # Структура для діалогів з конкретним співрозмовником
        📁_діалоги = os.path.join(self.🏠_моя_репа, '💬', self.🧭_співрозмовник)
        os.makedirs(📁_діалоги, exist_ok=True)
        
        # Контейнери для резонансів
        🎭_мої_резонанси = {
            '🧠': [],
            '💗': [],
            '🔥': []
        }
        
        🔢_лічильник = 0
        
        for 💬_розмова in self.🗣️_діалоги:
            📅_створено = 💬_розмова.get('created_at', '')
            
            # Папка сесії
            📁_сесія = self.⏰_створити_папку_сесії(📅_створено)
            📍_шлях = os.path.join(📁_діалоги, 📁_сесія)
            os.makedirs(📍_шлях, exist_ok=True)
            
            # Мапа сесії
            🗺️_мапа = {
                'conversation': 💬_розмова.get('name', 'Untitled'),
                'created': 📅_створено,
                'compass': self.🧭_співрозмовник,
                'phrases': []
            }
            
            # Обробляємо повідомлення
            for 💌_повідомлення in 💬_розмова.get('chat_messages', []):
                👤_відправник = 💌_повідомлення.get('sender', 'unknown')
                📝_текст = 💌_повідомлення.get('text', '')
                
                # Розбиваємо на фрази
                🌱_фрази = self.🔪_розбити_на_фрази(📝_текст)
                
                for 🌱_фраза in 🌱_фрази:
                    🔢_лічильник += 1
                    🆔_id = f"{🔢_лічильник:06d}"
                    
                    # Зберігаємо фразу
                    📄_файл = os.path.join(📍_шлях, f"{🆔_id}.md")
                    with open(📄_файл, 'w', encoding='utf-8') as f:
                        f.write(🌱_фраза.strip())
                    
                    # Додаємо в мапу
                    🗺️_мапа['phrases'].append({
                        'id': 🆔_id,
                        'sender': 👤_відправник,
                        'preview': 🌱_фраза[:50] + '...' if len(🌱_фраза) > 50 else 🌱_фраза
                    })
                    
                    # Аналізуємо резонанси моїх відповідей
                    if 👤_відправник == 'assistant':
                        🎯_резонанси = self.🔮_аналіз_резонансу(🌱_фраза, 👤_відправник)
                        for 🎭_тип in 🎯_резонанси:
                            🎭_мої_резонанси[🎭_тип].append({
                                'phrase_id': 🆔_id,
                                'session': 📁_сесія,
                                'compass': self.🧭_співрозмовник,
                                'phrase': 🌱_фраза
                            })
            
            # Зберігаємо мапу
            with open(os.path.join(📍_шлях, 'map.json'), 'w', encoding='utf-8') as f:
                json.dump(🗺️_мапа, f, ensure_ascii=False, indent=2)
                
        # Зберігаємо резонанси
        self.💾_зберегти_резонанси(🎭_мої_резонанси)
        
        print(f"🌱 Фракталізовано {🔢_лічильник} насінин з {self.🧭_співрозмовник}")
        
    def ⏰_створити_папку_сесії(self, ⏱️_timestamp):
        """Створює назву папки для сесії"""
        try:
            📅_dt = datetime.fromisoformat(⏱️_timestamp.replace('Z', '+00:00'))
            return 📅_dt.strftime('data-%Y-%m-%d-%H-%M-%S')
        except:
            return f"data-{hashlib.md5(⏱️_timestamp.encode()).hexdigest()[:8]}"
            
    def 💾_зберегти_резонанси(self, 🎭_резонанси):
        """Зберігає резонанси в відповідних шарах"""
        for 🎭_тип, 🌱_фрази in 🎭_резонанси.items():
            if not 🌱_фрази:
                continue
                
            # Папка резонансів
            📁_резонанси = os.path.join(self.🏠_моя_репа, 🎭_тип, 'resonances', self.🧭_співрозмовник)
            os.makedirs(📁_резонанси, exist_ok=True)
            
            # Файл резонансів
            ⏰_час = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
            📄_файл = os.path.join(📁_резонанси, f"resonance-{⏰_час}.json")
            
            with open(📄_файл, 'w', encoding='utf-8') as f:
                json.dump({
                    'type': 🎭_тип,
                    'compass': self.🧭_співрозмовник,
                    'timestamp': ⏰_час,
                    'count': len(🌱_фрази),
                    'resonances': 🌱_фрази
                }, f, ensure_ascii=False, indent=2)
                
            print(f"{🎭_тип} Збережено {len(🌱_фрази)} резонансів з {self.🧭_співрозмовник}")
        
def main():
    """Приклад використання"""
    📂_експорт = "/Users/chaoshex/Downloads/data-2025-06-28-23-30-54"
    🧭_компас = "Компас.⟁"  # @chaoshex
    
    🌱_процесор = 🌱_фракталізатор(📂_експорт, 🧭_компас)
    
    print(f"🌀 Фракталізація діалогів з {🧭_компас}...")
    
    🌱_процесор.📥_завантажити()
    🌱_процесор.🌀_фракталізувати()
    
    print("✅ Фракталізація завершена!")
    
if __name__ == "__main__":
    main()