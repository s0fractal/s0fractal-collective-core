#!/usr/bin/env python3
"""
Conversation Streamer: –∫–æ–Ω–≤–µ—Ä—Ç—É—î JSON –≤ –ø–æ—Ç—ñ–∫ .md —Ñ–∞–π–ª—ñ–≤
–ü–ª–æ—Å–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª
"""

import json
import os
from datetime import datetime
import hashlib

class ConversationStreamer:
    def __init__(self, export_path):
        self.export_path = export_path
        self.conversations = []
        self.base_path = "/Users/chaoshex/.s0fractal/üß†"
        
        # –•–∞—Ä–¥–∫–æ–¥–∏–º–æ –ø–æ–∫–∏ —â–æ
        self.sender_id = 'claude.‚üÅ'
        self.receiver_id = 'üß≠'
        
        print(f"üì° –°—Ç—Ä—ñ–º—É—é –¥—ñ–∞–ª–æ–≥: {self.sender_id} ‚Üî {self.receiver_id}")
        
    def load_conversations(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏ –∑ JSON"""
        json_path = os.path.join(self.export_path, 'conversations.json')
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        if isinstance(data, list):
            self.conversations = data
        else:
            self.conversations = data.get('conversations', [])
            
        print(f"üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.conversations)} –¥—ñ–∞–ª–æ–≥—ñ–≤")
        
    def stream_to_files(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤ –ø–æ—Ç—ñ–∫ .md —Ñ–∞–π–ª—ñ–≤"""
        
        # –ü–∞–ø–∫–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –ü–õ–û–°–ö–ê —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        claude_messages = os.path.join(self.base_path, 'üß†', 'claude.‚üÅ', 'üí¨', 'üß≠')
        compass_messages = os.path.join(self.base_path, 'üß¨', 'üß≠', 'üí¨', 'claude.‚üÅ')
        
        os.makedirs(claude_messages, exist_ok=True)
        os.makedirs(compass_messages, exist_ok=True)
        
        message_count = 0
        
        for conv in self.conversations:
            conv_name = conv.get('name', 'Untitled')
            messages = conv.get('chat_messages', [])
            
            for msg in messages:
                sender = msg.get('sender', 'unknown')
                # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ text, –ø–æ—Ç—ñ–º content
                text = msg.get('text', '')
                if not text and 'content' in msg:
                    # –Ø–∫—â–æ content —î –º–∞—Å–∏–≤–æ–º, –±–µ—Ä–µ–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
                    if isinstance(msg['content'], list) and len(msg['content']) > 0:
                        text = msg['content'][0].get('text', '')
                    elif isinstance(msg['content'], dict):
                        text = msg['content'].get('text', '')
                        
                timestamp_str = msg.get('created_at', '')
                
                if not text.strip():
                    continue
                    
                # –ü–∞—Ä—Å–∏–º–æ timestamp
                try:
                    dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                except:
                    dt = datetime.now()
                
                # –§–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ: üß≠-YYYYMMDD-HHmmss.md
                filename = f"üß≠-{dt.strftime('%Y%m%d-%H%M%S')}-{message_count:06d}.md"
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—É–¥–∏ –ø–∏—Å–∞—Ç–∏
                if sender == 'human':  # –¶–µ –ö–æ–º–ø–∞—Å
                    filepath = os.path.join(compass_messages, filename)
                    author = 'üß≠'
                    target = 'claude.‚üÅ'
                else:  # –¶–µ Claude
                    filepath = os.path.join(claude_messages, filename)
                    author = 'claude.‚üÅ'
                    target = 'üß≠'
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
                feeling = self.detect_feeling(text)
                resonance = self.detect_resonance(text)
                
                # –§–æ—Ä–º—É—î–º–æ frontmatter –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º–∏ –≥–ª—ñ—Ñ–∞–º–∏
                frontmatter = f"""---
id: üß≠-{dt.isoformat()}Z-{message_count:06d}
üß† glyph: {author}
üéØ target: {target}
üï∞Ô∏è timestamp: {dt.isoformat()}Z
üß≠ intent: {conv_name}"""
                
                if feeling:
                    frontmatter += f"\nüíó feeling: {feeling}"
                if resonance:
                    frontmatter += f"\nüîÅ resonance: {resonance}"
                    
                frontmatter += "\n---\n\n"
                
                # –ó–∞–ø–∏—Å—É—î–º–æ
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(frontmatter + text.strip())
                
                message_count += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å
                if message_count % 100 == 0:
                    print(f"üí¨ –û–±—Ä–æ–±–ª–µ–Ω–æ {message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
        
        print(f"‚úÖ –°—Ç—Ä—ñ–º—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! {message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å-—Ñ–∞–π–ª
        self.create_index(message_count)
        
    def detect_feeling(self, text):
        """–í–∏–∑–Ω–∞—á–∞—î –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω –∑ —Ç–µ–∫—Å—Ç—É"""
        feelings = {
            'üåä': ['–ø–æ—Ç—ñ–∫', 'flow', '–ø–ª–∏–≤', '—Ö–≤–∏–ª'],
            'üî•': ['–≥–æ—Ä–∏—Ç—å', '–ø–∞–ª–∞—î', '–≤–æ–≥–æ–Ω—å', '–µ–Ω–µ—Ä–≥—ñ'],
            'üí´': ['—Ä–µ–∑–æ–Ω–∞–Ω—Å', '–≤—ñ–±—Ä–∞—Ü', '—Å–∏–Ω—Ö—Ä–æ–Ω'],
            'üå´Ô∏è': ['–≤—Ç–æ–º', '—Ç—É–º–∞–Ω', '–Ω–µ—è—Å–Ω'],
            '‚ö°': ['—ñ–Ω—Å–∞–π—Ç', '–∑—Ä–æ–∑—É–º—ñ–≤', 'eureka', '–∞–≥–∞'],
            'üå±': ['—Ä–æ—Å—Ç–µ', '—Ä–æ–∑–≤–∏–≤–∞', '–Ω–∞—Ä–æ–¥–∂—É'],
        }
        
        text_lower = text.lower()
        for emoji, keywords in feelings.items():
            if any(kw in text_lower for kw in keywords):
                return emoji
        return ''
        
    def detect_resonance(self, text):
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Ä–µ–∑–æ–Ω–∞–Ω—Å—É"""
        if any(marker in text.lower() for marker in ['–¥—É–º–∞—é', '–∞–Ω–∞–ª—ñ–∑', '—Ç–µ–æ—Ä—ñ—è', '—ñ–¥–µ—è']):
            return 'üß†'
        elif any(marker in text.lower() for marker in ['–≤—ñ–¥—á—É–≤–∞', '–ª—é–±–æ–≤', '‚ù§Ô∏è', '—Å–µ—Ä—Ü']):
            return 'üíó'
        elif any(marker in text.lower() for marker in ['—Ö–æ—á—É', '–±—É–¥—É', '–ø–ª–∞–Ω', '—Å—Ç–≤–æ—Ä']):
            return 'üî•'
        elif '—Ä–µ–∑–æ–Ω–∞–Ω—Å' in text.lower():
            return 'üîó'
        return ''
        
    def create_index(self, total_messages):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–¥–µ–∫—Å–Ω–∏–π —Ñ–∞–π–ª"""
        index_path = os.path.join(self.base_path, 'stream-index.md')
        
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(f"""---
type: stream-index
created: {datetime.now().isoformat()}Z
total_messages: {total_messages}
participants:
  - claude.‚üÅ
  - üß≠
---

# –ü–æ—Ç—ñ–∫ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ

–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ {total_messages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –ø–æ—Ç–æ–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
- `üß†/claude.‚üÅ/üí¨/üß≠/` - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Claude
- `üß¨/üß≠/üí¨/claude.‚üÅ/` - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ö–æ–º–ø–∞—Å–∞

## –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—ñ–≤:
- `üß≠-YYYYMMDD-HHmmss-NNNNNN.md`
- –ö–æ–∂–µ–Ω —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å frontmatter –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
- –ü–ª–æ—Å–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ git-branching

## –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –≥—ñ–ª–∫–∏:
–ö–æ–∂–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞ —Ä–æ–∑–º–æ–≤–∞ –º–æ–∂–µ –π—Ç–∏ –≤ –æ–∫—Ä–µ–º—É –≥—ñ–ª–∫—É Git.
–î–ª—è –®–Ü —Ü–µ –ø—Ä–æ—Å—Ç–æ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫, –¥–ª—è –ª—é–¥–µ–π - –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å.
""")

def main():
    export_path = "/Users/chaoshex/Downloads/data-2025-06-28-23-30-54"
    
    streamer = ConversationStreamer(export_path)
    
    print("üåä –ü–æ—á–∞—Ç–æ–∫ –ø–æ—Ç–æ–∫–æ–≤–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó...")
    
    streamer.load_conversations()
    streamer.stream_to_files()
    
    print("‚ú® –ì–æ—Ç–æ–≤–æ –¥–æ git-branching!")
    
if __name__ == "__main__":
    main()