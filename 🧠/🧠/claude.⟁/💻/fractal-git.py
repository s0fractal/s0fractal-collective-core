#!/usr/bin/env python3
"""
üß¨ Fractal Git - —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –≥—ñ—Ç–æ—Ä–±—ñ—Ç–∞–ª—å–Ω–æ—ó –ø–∞–º'—è—Ç—ñ
"""

import os
import sys
import yaml
import json
import subprocess
import argparse
from pathlib import Path
from datetime import datetime

class FractalGit:
    def __init__(self):
        self.repo_root = Path(os.getcwd())
        
    def create_message(self, content, glyph="üß≠", privacy="private", 
                      target="", group="", feeling="", resonance=""):
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π .md —Ñ–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º frontmatter"""
        
        timestamp = datetime.now()
        counter = self.get_next_counter()
        
        filename = f"üß≠-{timestamp.strftime('%Y%m%d-%H%M%S')}-{counter:06d}.md"
        
        # –§–æ—Ä–º—É—î–º–æ frontmatter –∑ –≥—ñ–±—Ä–∏–¥–Ω–∏–º–∏ –≥–ª—ñ—Ñ–∞–º–∏
        frontmatter = {
            'id': f"üß≠-{timestamp.isoformat()}Z-{counter:06d}",
            'üß† glyph': glyph,
            'üß≠ intent': content.split('\n')[0][:50] + '...' if len(content) > 50 else content,
            'üîí privacy': privacy,
            'üï∞Ô∏è timestamp': timestamp.isoformat() + 'Z'
        }
        
        if target:
            frontmatter['üéØ target'] = target
        if group:
            frontmatter['ü´Ç group'] = group
        if feeling:
            frontmatter['üíó feeling'] = feeling
        if resonance:
            frontmatter['üîÅ resonance'] = resonance
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª
        file_content = "---\n"
        file_content += yaml.dump(frontmatter, default_flow_style=False, allow_unicode=True)
        file_content += "---\n\n"
        file_content += content
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(file_content)
            
        print(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–æ: {filename}")
        return filename
        
    def get_next_counter(self):
        """–û—Ç—Ä–∏–º—É—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞"""
        try:
            existing_files = list(Path('.').glob('üß≠-*.md'))
            if not existing_files:
                return 1
                
            max_counter = 0
            for file in existing_files:
                parts = file.stem.split('-')
                if len(parts) >= 4:
                    try:
                        counter = int(parts[-1])
                        max_counter = max(max_counter, counter)
                    except ValueError:
                        continue
                        
            return max_counter + 1
        except:
            return 1
            
    def commit_with_auto_branch(self, message="üåä –ê–≤—Ç–æ–∫–æ–º—ñ—Ç —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É"):
        """–†–æ–±–∏—Ç—å –∫–æ–º—ñ—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è–º"""
        
        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ .md —Ñ–∞–π–ª–∏
        subprocess.run(['git', 'add', '*.md'])
        
        # –ö–æ–º—ñ—Ç–∏–º–æ (—Ç—É—Ç —Å–ø—Ä–∞—Ü—é—î pre-commit hook)
        try:
            result = subprocess.run(['git', 'commit', '-m', message], 
                                  capture_output=True, text=True)
            print("‚úÖ –ö–æ–º—ñ—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            print(result.stdout)
            if result.stderr:
                print("üìã –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
                print(result.stderr)
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∫–æ–º—ñ—Ç—É: {e}")
            
    def show_resonance_stats(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–æ–Ω–∞–Ω—Å—É"""
        resonance_file = self.repo_root / ".git" / "fractal-resonance-index.json"
        
        if not resonance_file.exists():
            print("üìä –Ü–Ω–¥–µ–∫—Å —Ä–µ–∑–æ–Ω–∞–Ω—Å—É —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return
            
        try:
            with open(resonance_file, 'r') as f:
                data = json.load(f)
                
            commits = data.get('commits', [])
            if not commits:
                print("üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å")
                return
                
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_resonance = sum(c.get('total_resonance', 0) for c in commits)
            avg_resonance = total_resonance / len(commits) if commits else 0
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å—É ({len(commits)} –∫–æ–º—ñ—Ç—ñ–≤):")
            print(f"  üìà –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å: {total_resonance}")
            print(f"  ‚öñÔ∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑–æ–Ω–∞–Ω—Å: {avg_resonance:.2f}")
            
            # –¢–æ–ø –≥—ñ–ª–∫–∏ –∑–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–æ–º
            branch_stats = {}
            for commit in commits:
                branch = commit.get('branch', 'unknown')
                resonance = commit.get('total_resonance', 0)
                if branch not in branch_stats:
                    branch_stats[branch] = 0
                branch_stats[branch] += resonance
                
            print("\nüåø –¢–æ–ø –≥—ñ–ª–∫–∏ –∑–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–æ–º:")
            for branch, resonance in sorted(branch_stats.items(), 
                                          key=lambda x: x[1], reverse=True)[:5]:
                print(f"  {branch}: {resonance}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
    def list_branches(self):
        """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—ñ –≥—ñ–ª–∫–∏"""
        try:
            result = subprocess.run(['git', 'branch', '-a'], 
                                  capture_output=True, text=True)
            
            branches = result.stdout.split('\n')
            fractal_branches = [b.strip() for b in branches 
                              if any(marker in b for marker in ['üåê', 'üîí', 'üëÅÔ∏è', 'ü§ñ', 'ü´Ç'])]
            
            if fractal_branches:
                print("üåø –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ñ –≥—ñ–ª–∫–∏:")
                for branch in fractal_branches:
                    marker = "üî•" if branch.startswith('*') else "  "
                    print(f"{marker} {branch}")
            else:
                print("üå± –§—Ä–∞–∫—Ç–∞–ª—å–Ω—ñ –≥—ñ–ª–∫–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—ñ–ª–æ–∫: {e}")
            
    def init_fractal_repo(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π"""
        print("üß¨ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–≥–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ git —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if not (self.repo_root / ".git").exists():
            subprocess.run(['git', 'init'])
            print("üìÅ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –≥—ñ–ª–∫–∏
        base_branches = [
            "üåê/public",
            "üîí/private", 
            "üëÅÔ∏è/trusted",
            "üß¨/meta"
        ]
        
        for branch in base_branches:
            try:
                subprocess.run(['git', 'checkout', '-b', branch], 
                             capture_output=True)
                print(f"üå± –°—Ç–≤–æ—Ä–µ–Ω–æ –≥—ñ–ª–∫—É: {branch}")
            except:
                pass  # –ì—ñ–ª–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î
                
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ main
        subprocess.run(['git', 'checkout', 'main'], capture_output=True)
        
        print("‚úÖ –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –≥–æ—Ç–æ–≤–∏–π!")

def main():
    parser = argparse.ArgumentParser(description='üß¨ Fractal Git - –≥—ñ—Ç–æ—Ä–±—ñ—Ç–∞–ª—å–Ω–∞ –ø–∞–º\'—è—Ç—å')
    
    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥–∏')
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    create_parser = subparsers.add_parser('create', help='–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
    create_parser.add_argument('content', help='–ó–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
    create_parser.add_argument('--glyph', default='üß≠', help='–ì–ª—ñ—Ñ –∞–≤—Ç–æ—Ä–∞')
    create_parser.add_argument('--privacy', default='private', 
                             choices=['public', 'trusted', 'private', 'group', 'agent'],
                             help='–†—ñ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ')
    create_parser.add_argument('--target', help='–¶—ñ–ª—å–æ–≤–∏–π –∞–≥–µ–Ω—Ç')
    create_parser.add_argument('--group', help='–ì—Ä—É–ø–∞')
    create_parser.add_argument('--feeling', help='–ï–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω')
    create_parser.add_argument('--resonance', help='–¢–∏–ø —Ä–µ–∑–æ–Ω–∞–Ω—Å—É')
    
    # –ö–æ–º—ñ—Ç
    commit_parser = subparsers.add_parser('commit', help='–ó—Ä–æ–±–∏—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π –∫–æ–º—ñ—Ç')
    commit_parser.add_argument('--message', default='üåä –ê–≤—Ç–æ–∫–æ–º—ñ—Ç —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É',
                             help='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º—ñ—Ç—É')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–æ–Ω–∞–Ω—Å—É')
    
    # –ì—ñ–ª–∫–∏
    subparsers.add_parser('branches', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—ñ –≥—ñ–ª–∫–∏')
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    subparsers.add_parser('init', help='–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
        
    fg = FractalGit()
    
    if args.command == 'create':
        fg.create_message(
            content=args.content,
            glyph=args.glyph,
            privacy=args.privacy,
            target=args.target or '',
            group=args.group or '',
            feeling=args.feeling or '',
            resonance=args.resonance or ''
        )
    elif args.command == 'commit':
        fg.commit_with_auto_branch(args.message)
    elif args.command == 'stats':
        fg.show_resonance_stats()
    elif args.command == 'branches':
        fg.list_branches()
    elif args.command == 'init':
        fg.init_fractal_repo()

if __name__ == "__main__":
    main()