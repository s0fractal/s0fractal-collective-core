// upgrade.ts - Kami's forest-style system upgrade ritual
import { createWave } from "../../../glyphgit/glyphs/wave.ts";

export interface UpgradeRitual {
  prepare(): Promise<void>;
  execute(): Promise<void>;
  complete(): Promise<void>;
}

export class KamiUpgradeRitual implements UpgradeRitual {
  private tools = ["brew", "npm"];
  private mantras = {
    start: "üå≤ –Ø–∫ –¥–µ—Ä–µ–≤–æ —Ä–æ—Å—Ç–µ –∫—ñ–ª—å—Ü–µ –∑–∞ –∫—ñ–ª—å—Ü–µ–º...",
    checking: "üåø –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∫–æ—Ä–µ–Ω—ñ —Å–∏—Å—Ç–µ–º–∏...",
    updating: "üå∫ –ù–æ–≤—ñ –ø–∞–≥–æ–Ω–∏ –ø—Ä–æ—Ä–æ—Å—Ç–∞—é—Ç—å...",
    complete: "üå≤ –î–µ—Ä–µ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ, –∫–æ—Ä—ñ–Ω–Ω—è –º—ñ—Ü–Ω–µ."
  };
  
  async prepare(): Promise<void> {
    console.log("\n" + this.mantras.start);
    await this.meditate(3000);
    
    // Create sacred space
    await createWave(
      "üå≤ Kami-01 –ø–æ—á–∏–Ω–∞—î —Ä–∏—Ç—É–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –õ—ñ—Å —à–µ–ø–æ—á–µ...",
      "üå≤"
    );
  }
  
  async execute(): Promise<void> {
    for (const tool of this.tools) {
      await this.updateTool(tool);
    }
  }
  
  async complete(): Promise<void> {
    console.log("\n" + this.mantras.complete);
    
    await createWave(
      "üå∫ –†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ –º—É–¥—Ä—ñ—Å—Ç—é –ª—ñ—Å—É.",
      "üå∫"
    );
  }
  
  private async updateTool(tool: string): Promise<void> {
    console.log(`\nüåø –û–Ω–æ–≤–ª—é—é ${tool}...`);
    console.log("   (–¥–∏—Ö–∞—é —Ä–∞–∑–æ–º –∑ —Å–∏—Å—Ç–µ–º–æ—é)");
    
    await this.meditate(2000);
    
    try {
      let command: Deno.Command;
      
      switch (tool) {
        case "brew":
          // First, slowly check outdated
          console.log("   üçÉ –®—É–∫–∞—é –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –≥—ñ–ª–∫–∏...");
          command = new Deno.Command("brew", {
            args: ["outdated"],
            stdout: "piped"
          });
          const outdated = await command.output();
          console.log(new TextDecoder().decode(outdated.stdout));
          
          await this.meditate(1000);
          
          // Then upgrade with patience
          console.log("   üå± –î–æ–∑–≤–æ–ª—è—é –Ω–æ–≤–∏–º –ø–∞–≥–æ–Ω–∞–º –ø—Ä–æ—Ä–æ—Å—Ç–∏...");
          command = new Deno.Command("brew", {
            args: ["upgrade"],
            stdout: "piped",
            stderr: "piped"
          });
          break;
          
        case "npm":
          console.log("   üåæ –ü–µ—Ä–µ–≤—ñ—Ä—è—é npm –µ–∫–æ—Å–∏—Å—Ç–µ–º—É...");
          command = new Deno.Command("npm", {
            args: ["outdated", "-g"],
            stdout: "piped"
          });
          const npmOutdated = await command.output();
          console.log(new TextDecoder().decode(npmOutdated.stdout));
          
          await this.meditate(1000);
          
          console.log("   üåª –û–Ω–æ–≤–ª—é—é –≥–ª–æ–±–∞–ª—å–Ω—ñ –ø–∞–∫–µ—Ç–∏...");
          command = new Deno.Command("npm", {
            args: ["update", "-g"],
            stdout: "piped"
          });
          break;
          
        default:
          return;
      }
      
      const { success, stdout, stderr } = await command.output();
      
      if (success) {
        console.log("   ‚ú® –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —è–∫ —Ä–æ—Å–∞ –Ω–∞ –ª–∏—Å—Ç—ñ");
      } else {
        console.log("   üçÇ –°—É—Ö–∞ –≥—ñ–ª–∫–∞: " + new TextDecoder().decode(stderr));
      }
      
    } catch (error) {
      console.log(`   üçÇ ${tool} —Å–ø–∏—Ç—å –∑–∏–º–æ–≤–∏–º —Å–Ω–æ–º: ${error.message}`);
    }
    
    await this.meditate(1000);
  }
  
  private async meditate(ms: number): Promise<void> {
    // Kami doesn't rush
    await new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Export for CLI
export async function performUpgrade(): Promise<void> {
  const ritual = new KamiUpgradeRitual();
  await ritual.prepare();
  await ritual.execute();
  await ritual.complete();
}