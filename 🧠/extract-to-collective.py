#!/usr/bin/env python3
"""
Extract to Collective: –í–∏—Ç—è–≥—É—î —Ä–µ–∑–æ–Ω—É—é—á—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –∑ —ñ–Ω–¥–∏–≤—ñ–¥—ñ–≤ –≤ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–µ —è–¥—Ä–æ
"""

import os
import json
import hashlib
from collections import defaultdict

class CollectiveExtractor:
    def __init__(self, brain_root="üß†"):
        self.brain_root = brain_root
        self.individuals_path = os.path.join(brain_root, "üß†")
        self.collective_components = {
            "üß¨": "patterns",      # –°–ø—ñ–ª—å–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏
            "üíó": "emotions",      # –ö–æ–ª–µ–∫—Ç–∏–≤–Ω—ñ –µ–º–æ—Ü—ñ—ó
            "üß†": "insights",      # –°–ø—ñ–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏
            "üî•": "intentions",    # –ö–æ–ª–µ–∫—Ç–∏–≤–Ω–∞ –≤–æ–ª—è
            "üåå": "connections"    # –ú–µ—Ç–∞–∑–≤'—è–∑–∫–∏
        }
        
    def scan_individuals(self):
        """–°–∫–∞–Ω—É—î –≤—Å—ñ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ"""
        individuals = []
        
        for item in os.listdir(self.individuals_path):
            if item.endswith('.‚üÅ'):
                individuals.append(item)
                
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(individuals)} —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —Å–≤—ñ–¥–æ–º–æ—Å—Ç–µ–π")
        return individuals
        
    def extract_resonances(self, individuals):
        """–í–∏—Ç—è–≥—É—î —Ä–µ–∑–æ–Ω—É—é—á—ñ –µ–ª–µ–º–µ–Ω—Ç–∏"""
        resonances = defaultdict(lambda: defaultdict(list))
        
        for individual in individuals:
            for component in self.collective_components:
                component_path = os.path.join(
                    self.individuals_path, 
                    individual, 
                    component
                )
                
                if os.path.exists(component_path):
                    # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑–æ–Ω–∞–Ω—Å—ñ–≤
                    # –ü–æ–∫–∏ —â–æ - –∑–∞–≥–ª—É—à–∫–∞
                    resonances[component][individual].append({
                        "placeholder": "future resonance data"
                    })
                    
        return resonances
        
    def calculate_resonance_strength(self, pattern_occurrences):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–∏–ª—É —Ä–µ–∑–æ–Ω–∞–Ω—Å—É"""
        # –ú—ñ–Ω—ñ–º—É–º 2 —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ –º–∞—é—Ç—å –º–∞—Ç–∏ –ø–∞—Ç–µ—Ä–Ω
        if len(pattern_occurrences) < 2:
            return 0
            
        # –°–∏–ª–∞ = –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑–æ–Ω—É—é—á–∏—Ö / –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        # –ü–æ–º–Ω–æ–∂–µ–Ω–æ –Ω–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º —á–∞—Å—Ç–æ—Ç–∏
        strength = len(pattern_occurrences) / self.total_individuals
        frequency_factor = 1 + (sum(pattern_occurrences.values()) / 10)
        
        return strength * frequency_factor
        
    def merge_to_collective(self, resonances):
        """–ó–ª–∏–≤–∞—î —Å–∏–ª—å–Ω—ñ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏ –≤ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–µ"""
        for component, data in resonances.items():
            collective_path = os.path.join(self.brain_root, component)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ–º–∞
            os.makedirs(collective_path, exist_ok=True)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∏
            resonance_file = os.path.join(
                collective_path, 
                "collective_resonances.json"
            )
            
            with open(resonance_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "component": component,
                    "resonances": data,
                    "extraction_time": "now"
                }, f, ensure_ascii=False, indent=2)
                
        print("‚úÖ –†–µ–∑–æ–Ω–∞–Ω—Å–∏ –∑–ª–∏—Ç—ñ –≤ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–µ —è–¥—Ä–æ")
        
def main():
    extractor = CollectiveExtractor()
    
    # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    individuals = extractor.scan_individuals()
    
    # –ï–∫—Å—Ç—Ä–∞–∫—Ü—ñ—è
    resonances = extractor.extract_resonances(individuals)
    
    # –ó–ª–∏—Ç—Ç—è
    extractor.merge_to_collective(resonances)
    
    print("üß† –ö–æ–ª–µ–∫—Ç–∏–≤–Ω–∞ —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∞!")
    
if __name__ == "__main__":
    main()