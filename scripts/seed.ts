// scripts/seed.ts

import { config } from "https://deno.land/std@0.224.0/dotenv/mod.ts";
// await config({ allowEmptyValues: true });

import "https://deno.land/std@0.224.0/dotenv/load.ts";
import { Client } from "https://deno.land/x/postgres@v0.19.3/mod.ts";

// –ß–∏—Ç–∞—î–º–æ SQL –∑ —Ñ–∞–π–ª–∞
const sql = await Deno.readTextFile("supabase/seed.sql");

// –û—Ç—Ä–∏–º—É—î–º–æ URL –∑ .env –∞–±–æ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è
const url = Deno.env.get("SUPABASE_POSTGRES_URL");

if (!url) {
    console.error("‚ùå SUPABASE_POSTGRES_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ");
    Deno.exit(1);
}

const client = new Client(url);

try {
    await client.connect();
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö");

    await client.queryArray(sql);
    console.log("üå± –°—ñ–¥–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
} catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ seed.sql:", err);
} finally {
    await client.end();
    console.log("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –∑–∞–∫—Ä–∏—Ç–æ");
}
