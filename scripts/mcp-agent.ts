import * as wmill from "npm:windmill-client";

const MCP_URL = await wmill.getResource("f/test/MCP_URL");
console.log("üîó MCP_URL:", MCP_URL);

// –¥–∞–ª—ñ ‚Äî –ª–æ–≥—ñ–∫–∞ MCP –∞–≥–µ–Ω—Ç–∞
const response = await fetch(MCP_URL);
const reader = response.body?.getReader();

if (!reader) throw new Error("SSE stream not available");

const decoder = new TextDecoder();
let buffer = "";

console.log("üëÇ MCP –∞–≥–µ–Ω—Ç —Å–ª—É—Ö–∞—î...");

while (true) {
  const { value, done } = await reader.read();
  if (done) break;

  buffer += decoder.decode(value, { stream: true });
  const lines = buffer.split("\n");

  for (const line of lines) {
    if (line.startsWith("data: ")) {
      const json = line.slice(6);
      try {
        const command = JSON.parse(json);

        // üîß –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        console.log("üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É:", command);

        if (command.cmd === "git.pull") {
          const command = new Deno.Command("git", {
            args: ["pull"],
            stdout: "piped",
            stderr: "piped",
          });
          const { stdout } = await command.output();
          console.log("‚úÖ git pull:", new TextDecoder().decode(stdout));
        }

        if (command.cmd === "echo") {
          console.log("üóØ", command.msg || "echo received");
        }

        // –¥–æ–¥–∞–π —â–µ –∫–æ–º–∞–Ω–¥–∏ —Å—é–¥–∏
      } catch (e) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏:", e);
      }
    }
  }
}
