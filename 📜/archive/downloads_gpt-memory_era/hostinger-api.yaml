openapi: 3.0.0
info:
  title: Hostinger API
  description: >-
    # Overview

    The Hostinger API provides a comprehensive set of endpoints that allow
    developers to interact with Hostinger's services programmatically.

    This API enables you to manage various aspects of your Hostinger account.


    The Hostinger API is a (mostly) RESTful API that uses standard HTTP methods
    and status codes.

    # Authentication

    The Hostinger API uses tokens for authentication. To authenticate your
    requests, you need to include a valid bearer token in the Authorization
    header of your HTTP requests:

    ```yaml

    Authorization: Bearer YOUR_API_TOKEN

    ```

    API tokens for individual users can be created and managed from the [Account
    page](https://hpanel.hostinger.com/profile/api) of the Hostinger Panel.

    Tokens will have same permissions as the owning user. Optionally, tokens can
    be set to expire after a certain period of time.

    # Rate Limiting

    To ensure fair usage and prevent abuse, the API enforces rate limits on the
    number of requests that can be made within a certain time period.

    If you exceed the rate limit, you will receive a 429 Too Many Requests
    response. Rate limit headers are included in the response to help you manage
    your requests.

    Your IP address might get temporarily blocked if you exceed the rate limit
    multiple times.

    # Parameters

    All requests sent to API must have the content type `application/json`.
    `POST`, `PUT`, `PATCH` methods may include a JSON object in the request
    body. Documentation provides required structure and examples of the object.

    Some endpoints require path parameters. These parameters are included in the
    URL path and are marked with curly braces.

    # Pagination

    Some endpoints return a large number of items. To make these responses more
    manageable, the API uses pagination.

    By default, the API returns50 items per page.

     The page number can be specified using the `page` query parameter, for example: `/api/vps/v1/public-keys?page=2`
    # Errors

    The Hostinger API uses standard HTTP status codes to indicate the success or
    failure of a request.

    In case of an error, the API will return a JSON response with an `error`
    field, containing a human-readable error message.

    Error responses also contain a `correlation_id` field which can be used to
    identify the request in case you need to contact support.

    # SDKs & Tools

    To help you get started with the Hostinger API, we provide SDKs and tools in
    various programming languages.

    The usage & documentation for each SDK can be found in the respective
    repositories:            

    - Ansible - https://github.com/hostinger/ansible-collection-hostinger

    - CLI - https://github.com/hostinger/api-cli

    - n8n Node - https://github.com/hostinger/api-n8n-node

    - MCP Server - https://github.com/hostinger/api-mcp-server

    - PHP - https://github.com/hostinger/api-php-sdk

    - Python - https://github.com/hostinger/api-python-sdk

    - Terraform - https://github.com/hostinger/terraform-provider-hostinger

    - Node / TypeScript - https://github.com/hostinger/api-typescript-sdk

    - Postman Collection - https://www.postman.com/hostinger-api

    # Change log

    For information on the latest changes to the API, please refer to the
    [change log](https://github.com/hostinger/api/blob/main/CHANGELOG.md).

    # Support

    If you have any questions, feedback or feature requests, please create an
    [issue](https://github.com/hostinger/api/issues) or
    [discussion](https://github.com/hostinger/api/discussions) on the
    repository.


    For any support take a look at our [Github
    Repository](https://github.com/hostinger/api/), dedicated to the Hostinger
    API.
  contact:
    name: Hostinger
    url: https://developers.hostinger.com
    email: devs@hostinger.com
  version: 0.0.76
  x-scalar-sdk-installation:
    - lang: Shell
      description: Install official CLI tool. Examples and usage is in our [Github
        repository](https://github.com/hostinger/api-cli).
      source: hapi vps vm list
    - lang: PHP
      description: Install official PHP SDK. Examples and usage is in our [Github
        repository](https://github.com/hostinger/api-php-sdk).
      source: composer require hostinger/api-php-sdk
    - lang: Python
      description: Install official Python SDK. Examples and usage is in our [Github
        repository](https://github.com/hostinger/api-python-sdk).
      source: pip install hostinger_api
    - lang: Node
      description: Install official Node / Typescript SDK. Examples and usage is in
        our [Github
        repository](https://github.com/hostinger/api-typescript-sdk).
      source: npm install hostinger-api-sdk
servers:
  - url: https://developers.hostinger.com
    description: Production API Server
paths:
  /api/billing/v1/catalog:
    get:
      tags:
        - "Billing: Catalog"
      summary: Get catalog item list
      description: >-
        This endpoint retrieves a list of catalog items available for order. 


        Prices in catalog items is displayed as cents (without floating point),
        e.g: float `17.99` is displayed as integer `1799`.
      operationId: billing_getCatalogItemListV1
      parameters:
        - $ref: "#/components/parameters/category"
        - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing.V1.Catalog.CatalogItemCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/billing/v1/orders:
    post:
      tags:
        - "Billing: Orders"
      summary: Create new service order
      description: |-
        This endpoint creates a new service order. 

        **DEPRECATED**

        To purchase a domain, use [`POST /api/domains/v1/portfolio`](/#tag/domains-portfolio/POST/api/domains/v1/portfolio) instead.

        To purchase a VPS, use [`POST /api/vps/v1/virtual-machines`](/#tag/vps-virtual-machine/POST/api/vps/v1/virtual-machines) instead.


        To place order, you need to provide payment method ID and list of price items from the catalog endpoint together with quantity.
        Coupons also can be provided during order creation.

        Orders created using this endpoint will be set for automatic renewal.

        Some `credit_card` payments might need additional verification, rendering purchase unprocessed.
        We recommend use other payment methods than `credit_card` if you encounter this issue.
      operationId: billing_createNewServiceOrderV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Billing.V1.Order.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing.V1.Order.OrderResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
      deprecated: true
      x-scalar-ignore: true
  /api/billing/v1/payment-methods/{paymentMethodId}:
    post:
      tags:
        - "Billing: Payment methods"
      summary: Set default payment method
      description: This endpoint sets default payment method for your account.
      operationId: billing_setDefaultPaymentMethodV1
      parameters:
        - $ref: "#/components/parameters/paymentMethodId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "Billing: Payment methods"
      summary: Delete payment method
      description: This endpoint deletes a payment method from your account.
      operationId: billing_deletePaymentMethodV1
      parameters:
        - $ref: "#/components/parameters/paymentMethodId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/billing/v1/payment-methods:
    get:
      tags:
        - "Billing: Payment methods"
      summary: Get payment method list
      description: >-
        This endpoint retrieves a list of available payment methods that can be
        used for placing new orders.


        If you want to add new payment method, please use
        [hPanel](https://hpanel.hostinger.com/billing/payment-methods).
      operationId: billing_getPaymentMethodListV1
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing.V1.PaymentMethod.PaymentMethodCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/billing/v1/subscriptions/{subscriptionId}:
    delete:
      tags:
        - "Billing: Subscriptions"
      summary: Cancel subscription
      description: This endpoint cancels a subscription and stops any further billing.
      operationId: billing_cancelSubscriptionV1
      parameters:
        - $ref: "#/components/parameters/subscriptionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Billing.V1.Subscription.CancelRequest"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/billing/v1/subscriptions:
    get:
      tags:
        - "Billing: Subscriptions"
      summary: Get subscription list
      description: This endpoint retrieves a list of all subscriptions associated with
        your account.
      operationId: billing_getSubscriptionListV1
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing.V1.Subscription.SubscriptionCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/dns/v1/snapshots/{domain}/{snapshotId}:
    get:
      tags:
        - "DNS: Snapshot"
      summary: Get snapshot
      description: This endpoint retrieves particular DNS snapshot with the contents
        of DNS zone records.
      operationId: DNS_getSnapshotV1
      parameters:
        - $ref: "#/components/parameters/domain"
        - $ref: "#/components/parameters/snapshotId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DNS.V1.Snapshot.SnapshotWithContentResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/dns/v1/snapshots/{domain}:
    get:
      tags:
        - "DNS: Snapshot"
      summary: Get snapshot list
      description: This endpoint retrieves list of DNS snapshots.
      operationId: DNS_getSnapshotListV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DNS.V1.Snapshot.SnapshotCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/dns/v1/snapshots/{domain}/{snapshotId}/restore:
    post:
      tags:
        - "DNS: Snapshot"
      summary: Restore snapshot
      description: This endpoint restores DNS zone to the selected snapshot.
      operationId: DNS_restoreSnapshotV1
      parameters:
        - $ref: "#/components/parameters/domain"
        - $ref: "#/components/parameters/snapshotId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/dns/v1/zones/{domain}:
    get:
      tags:
        - "DNS: Zone"
      summary: Get records
      description: This endpoint retrieves DNS zone records for a specific domain.
      operationId: DNS_getRecordsV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DNS.V1.Zone.RecordCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    put:
      tags:
        - "DNS: Zone"
      summary: Update zone records
      description: >-
        This endpoint updates DNS records for the selected domain. 


        Using `overwrite = true` will replace existing records with the provided
        ones. 

        Otherwise existing records will be updated and new records will be
        added.
      operationId: DNS_updateZoneRecordsV1
      parameters:
        - $ref: "#/components/parameters/domain"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DNS.V1.Zone.UpdateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "DNS: Zone"
      summary: Delete zone records
      description: >-
        This endpoint deletes DNS records for the selected domain. 

        To filter which records to delete, add the `name` of the record and
        `type` to the filter. 

        Multiple filters can be provided with single request.


        If you have multiple records with the same name and type, and you want
        to delete only part of them,

        refer to the `Update zone records` endpoint.
      operationId: DNS_deleteZoneRecordsV1
      parameters:
        - $ref: "#/components/parameters/domain"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DNS.V1.Zone.DestroyRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/dns/v1/zones/{domain}/reset:
    post:
      tags:
        - "DNS: Zone"
      summary: Reset zone records
      description: This endpoint resets DNS zone to the default records.
      operationId: DNS_resetZoneRecordsV1
      parameters:
        - $ref: "#/components/parameters/domain"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DNS.V1.Zone.ResetRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/dns/v1/zones/{domain}/validate:
    post:
      tags:
        - "DNS: Zone"
      summary: Validate zone records
      description: >-
        This endpoint used to validate DNS records prior update for the selected
        domain. 


        If the validation is successful, the response will contain `200 Success`
        code.

        If there is validation error, the response will fail with `422
        Validation error` code.
      operationId: DNS_validateZoneRecordsV1
      parameters:
        - $ref: "#/components/parameters/domain"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DNS.V1.Zone.UpdateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/availability:
    post:
      tags:
        - "Domains: Availability"
      summary: Check domain availability
      description: >-
        This endpoint checks the availability of a domain name. Multiple TLDs
        can be checked at once.

        If you want to get alternative domains with response, provide only one
        TLD in the request and set `with_alternatives` to `true`.

        TLDs should be provided without the leading dot (e.g. `com`, `net`,
        `org`).


        Endpoint has rate limit of 10 requests per minute.
      operationId: domains_checkDomainAvailabilityV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Domains.V1.Availability.AvailabilityRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.Availability.AvailabilityCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/forwarding/{domain}:
    get:
      tags:
        - "Domains: Forwarding"
      summary: Get forwarding data
      description: This endpoint retrieves domain forwarding data.
      operationId: domains_getForwardingDataV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.Forwarding.ForwardingResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "Domains: Forwarding"
      summary: Delete forwarding data
      description: This endpoint deletes domain forwarding data.
      operationId: domains_deleteForwardingDataV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/forwarding:
    post:
      tags:
        - "Domains: Forwarding"
      summary: Create forwarding data
      description: This endpoint creates domain forwarding data.
      operationId: domains_createForwardingDataV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Domains.V1.Forwarding.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.Forwarding.ForwardingResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/portfolio/{domain}/domain-lock:
    put:
      tags:
        - "Domains: Portfolio"
      summary: Enable domain lock
      description: >-
        This endpoint enables domain lock for the domain. When domain lock is
        enabled, 

        the domain cannot be transferred to another registrar without first
        disabling the lock.
      operationId: domains_enableDomainLockV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "Domains: Portfolio"
      summary: Disable domain lock
      description: >-
        This endpoint disables domain lock for the domain. Domain lock needs to
        be disabled 

        before transferring the domain to another registrar.
      operationId: domains_disableDomainLockV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/portfolio/{domain}:
    get:
      tags:
        - "Domains: Portfolio"
      summary: Get domain
      description: This endpoint retrieves details for specified domain.
      operationId: domains_getDomainV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.Domain.DomainExtendedResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/portfolio:
    get:
      tags:
        - "Domains: Portfolio"
      summary: Get domain list
      description: This endpoint retrieves a list of all domains associated with your
        account.
      operationId: domains_getDomainListV1
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.Domain.DomainCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "Domains: Portfolio"
      summary: Purchase new domain
      description: >-
        This endpoint allows you to buy (purchase) and register a new domain
        name. 


        If registration fails, login to [hPanel](https://hpanel.hostinger.com/)
        and check the domain registration status.


        If no payment method is provided, your default payment method will be
        used automatically.


        If no WHOIS information is provided, the default contact information for
        that TLD (Top-Level Domain) will be used. 

        Before making a request, ensure that WHOIS information for the desired
        TLD exists in your account.


        Some TLDs require `additional_details` to be provided and these will be
        validated before completing the purchase. The required additional
        details vary by TLD.
      operationId: domains_purchaseNewDomainV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Domains.V1.Portfolio.PurchaseRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing.V1.Order.OrderResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/portfolio/{domain}/privacy-protection:
    put:
      tags:
        - "Domains: Portfolio"
      summary: Enable privacy protection
      description: >-
        This endpoint enables privacy protection for the domain.

        When privacy protection is enabled, the domain owner's personal
        information is hidden from the public WHOIS database.
      operationId: domains_enablePrivacyProtectionV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "Domains: Portfolio"
      summary: Disable privacy protection
      description: >-
        This endpoint disables privacy protection for the domain.

        When privacy protection is disabled, the domain owner's personal
        information is visible in the public WHOIS database.
      operationId: domains_disablePrivacyProtectionV1
      parameters:
        - $ref: "#/components/parameters/domain"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/portfolio/{domain}/nameservers:
    put:
      tags:
        - "Domains: Portfolio"
      summary: Update nameservers
      description: >-
        This endpoint sets the nameservers for a specified domain.


        Be aware, that improper nameserver configuration can lead to the domain
        being unresolvable or unavailable. 
      operationId: domains_updateNameserversV1
      parameters:
        - $ref: "#/components/parameters/domain"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Domains.V1.Portfolio.UpdateNameserversRequest"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/whois/{whoisId}:
    get:
      tags:
        - "Domains: WHOIS"
      summary: Get WHOIS profile
      description: This endpoint retrieves a WHOIS contact profile.
      operationId: domains_getWHOISProfileV1
      parameters:
        - $ref: "#/components/parameters/whoisId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.WHOIS.ProfileResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "Domains: WHOIS"
      summary: Delete WHOIS profile
      description: This endpoint deletes WHOIS contact profile.
      operationId: domains_deleteWHOISProfileV1
      parameters:
        - $ref: "#/components/parameters/whoisId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/whois:
    get:
      tags:
        - "Domains: WHOIS"
      summary: Get WHOIS profile list
      description: This endpoint retrieves a list of WHOIS contact profiles.
      operationId: domains_getWHOISProfileListV1
      parameters:
        - $ref: "#/components/parameters/tld"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.WHOIS.ProfileCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "Domains: WHOIS"
      summary: Create WHOIS profile
      description: This endpoint creates WHOIS contact profile.
      operationId: domains_createWHOISProfileV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Domains.V1.WHOIS.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.WHOIS.ProfileResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/domains/v1/whois/{whoisId}/usage:
    get:
      tags:
        - "Domains: WHOIS"
      summary: Get WHOIS profile usage
      description: This endpoint retrieves a domain list where provided WHOIS contact
        profile is used.
      operationId: domains_getWHOISProfileUsageV1
      parameters:
        - $ref: "#/components/parameters/whoisId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Domains.V1.WHOIS.ProfileUsageResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/data-centers:
    get:
      tags:
        - "VPS: Data centers"
      summary: Get data centers list
      description: This endpoint retrieves a list of all data centers available.
      operationId: VPS_getDataCentersListV1
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.DataCenter.DataCenterCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall/{firewallId}/activate/{virtualMachineId}:
    post:
      tags:
        - "VPS: Firewall"
      summary: Activate firewall
      description: |-
        This endpoint activates a firewall for a specified virtual machine. 

        Only one firewall can be active for a virtual machine at a time.
      operationId: VPS_activateFirewallV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall/{firewallId}/deactivate/{virtualMachineId}:
    post:
      tags:
        - "VPS: Firewall"
      summary: Deactivate firewall
      description: This endpoint deactivates a firewall for a specified virtual machine.
      operationId: VPS_deactivateFirewallV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall/{firewallId}:
    get:
      tags:
        - "VPS: Firewall"
      summary: Get firewall
      description: This endpoint retrieves firewall by its ID and rules associated with it.
      operationId: VPS_getFirewallV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Firewall.FirewallResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Firewall"
      summary: Delete firewall
      description: >-
        This endpoint deletes a specified firewall. 


        Any virtual machine that has this firewall activated will automatically
        have it deactivated.
      operationId: VPS_deleteFirewallV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall:
    get:
      tags:
        - "VPS: Firewall"
      summary: Get firewall list
      description: This endpoint retrieves a list of all firewalls available.
      operationId: VPS_getFirewallListV1
      parameters:
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/VPS.V1.Firewall.FirewallCollection"
                  meta:
                    $ref: "#/components/schemas/Common.Schema.PaginationMetaSchema"
                type: object
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "VPS: Firewall"
      summary: Create new firewall
      description: This endpoint creates a new firewall.
      operationId: VPS_createNewFirewallV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.Firewall.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Firewall.FirewallResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall/{firewallId}/rules/{ruleId}:
    put:
      tags:
        - "VPS: Firewall"
      summary: Update firewall rule
      description: >-
        This endpoint updates a specific firewall rule from a specified
        firewall.


        Any virtual machine that has this firewall activated will loose sync
        with the firewall and will have to be synced again manually.
      operationId: VPS_updateFirewallRuleV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
        - $ref: "#/components/parameters/ruleId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.Firewall.Rules.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Firewall.FirewallRuleResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Firewall"
      summary: Delete firewall rule
      description: >-
        This endpoint deletes a specific firewall rule from a specified
        firewall.


        Any virtual machine that has this firewall activated will loose sync
        with the firewall and will have to be synced again manually.
      operationId: VPS_deleteFirewallRuleV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
        - $ref: "#/components/parameters/ruleId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall/{firewallId}/rules:
    post:
      tags:
        - "VPS: Firewall"
      summary: Create firewall rule
      description: >-
        This endpoint creates new firewall rule from a specified firewall. 

        By default, the firewall drops all incoming traffic, which means you
        must add accept rules for all ports you want to use.


        Any virtual machine that has this firewall activated will loose sync
        with the firewall and will have to be synced again manually.
      operationId: VPS_createFirewallRuleV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.Firewall.Rules.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Firewall.FirewallRuleResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/firewall/{firewallId}/sync/{virtualMachineId}:
    post:
      tags:
        - "VPS: Firewall"
      summary: Sync firewall
      description: >-
        This endpoint syncs a firewall for a specified virtual machine.


        Firewall can loose sync with virtual machine if the firewall has new
        rules added, removed or updated.
      operationId: VPS_syncFirewallV1
      parameters:
        - $ref: "#/components/parameters/firewallId"
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/post-install-scripts/{postInstallScriptId}:
    get:
      tags:
        - "VPS: Post-install scripts"
      summary: Get post-install script
      description: This endpoint retrieves post-install script by its ID.
      operationId: VPS_getPostInstallScriptV1
      parameters:
        - $ref: "#/components/parameters/postInstallScriptId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.PostInstallScript.PostInstallScriptResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    put:
      tags:
        - "VPS: Post-install scripts"
      summary: Update post-install script
      description: This endpoint updates a specific post-install script.
      operationId: VPS_updatePostInstallScriptV1
      parameters:
        - $ref: "#/components/parameters/postInstallScriptId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.PostInstallScript.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.PostInstallScript.PostInstallScriptResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Post-install scripts"
      summary: Delete a post-install script
      description: "This endpoint deletes a post-install script from your account. "
      operationId: VPS_deleteAPostInstallScriptV1
      parameters:
        - $ref: "#/components/parameters/postInstallScriptId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/post-install-scripts:
    get:
      tags:
        - "VPS: Post-install scripts"
      summary: Get post-install script list
      description: This endpoint retrieves a list of post-install scripts associated
        with your account.
      operationId: VPS_getPostInstallScriptListV1
      parameters:
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/VPS.V1.PostInstallScript.PostInstallScriptCollectio\
                      n"
                  meta:
                    $ref: "#/components/schemas/Common.Schema.PaginationMetaSchema"
                type: object
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "VPS: Post-install scripts"
      summary: Create post-install script
      description: >-
        This endpoint allows you to add a new post-install script to your
        account, 

        which can then be used run after the installation of a virtual machine
        instance.


        The script contents will be saved to the file `/post_install` with
        executable attribute set and will be executed once virtual machine is
        installed.

        The output of the script will be redirected to `/post_install.log`.
        Maximum script size is 48KB. 
      operationId: VPS_createPostInstallScriptV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.PostInstallScript.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.PostInstallScript.PostInstallScriptResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/public-keys/attach/{virtualMachineId}:
    post:
      tags:
        - "VPS: Public Keys"
      summary: Attach public key
      description: >-
        This endpoint attaches an existing public keys from your account to a
        specified virtual machine.


        Multiple keys can be attached to a single virtual machine.
      operationId: VPS_attachPublicKeyV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.PublicKey.AttachRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/public-keys/{publicKeyId}:
    delete:
      tags:
        - "VPS: Public Keys"
      summary: Delete a public key
      description: >-
        This endpoint deletes a public key from your account. 


        **Deleting public key from account does not remove it from virtual
        machine** 
      operationId: VPS_deleteAPublicKeyV1
      parameters:
        - $ref: "#/components/parameters/publicKeyId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/public-keys:
    get:
      tags:
        - "VPS: Public Keys"
      summary: Get public key list
      description: This endpoint retrieves a list of public keys associated with your
        account.
      operationId: VPS_getPublicKeyListV1
      parameters:
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/VPS.V1.PublicKey.PublicKeyCollection"
                  meta:
                    $ref: "#/components/schemas/Common.Schema.PaginationMetaSchema"
                type: object
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "VPS: Public Keys"
      summary: Create new public key
      description: >-
        This endpoint allows you to add a new public key to your account, 

        which can then be attached to virtual machine instances for secure
        access.
      operationId: VPS_createNewPublicKeyV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.PublicKey.StoreRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.PublicKey.PublicKeyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/templates/{templateId}:
    get:
      tags:
        - "VPS: OS Templates"
      summary: Get template
      description: This endpoint retrieves details of a specific OS template for
        virtual machines.
      operationId: VPS_getTemplateV1
      parameters:
        - $ref: "#/components/parameters/templateId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Template.TemplateResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/templates:
    get:
      tags:
        - "VPS: OS Templates"
      summary: Get template list
      description: This endpoint retrieves a list of available OS templates for
        virtual machines.
      operationId: VPS_getTemplateListV1
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Template.TemplateCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/actions/{actionId}:
    get:
      tags:
        - "VPS: Actions"
      summary: Get action
      description: >-
        This endpoint retrieves details of a specific action performed on a
        specified virtual machine. 


        This endpoint allows you to view detailed information about a particular
        action, including the action name, timestamp, and status.
      operationId: VPS_getActionV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - $ref: "#/components/parameters/actionId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/actions:
    get:
      tags:
        - "VPS: Actions"
      summary: Get action list
      description: >-
        This endpoint retrieves a list of actions performed on a specified
        virtual machine.


        Actions are operations or events that have been executed on the virtual
        machine, such as starting, stopping, or modifying 

        the machine. This endpoint allows you to view the history of these
        actions, providing details about each action, 

        such as the action name, timestamp, and status.
      operationId: VPS_getActionListV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/VPS.V1.Action.ActionCollection"
                  meta:
                    $ref: "#/components/schemas/Common.Schema.PaginationMetaSchema"
                type: object
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/public-keys:
    get:
      tags:
        - "VPS: Virtual machine"
      summary: Get attached public keys
      description: This endpoint retrieves a list of public keys attached to a
        specified virtual machine.
      operationId: VPS_getAttachedPublicKeysV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/VPS.V1.PublicKey.PublicKeyCollection"
                  meta:
                    $ref: "#/components/schemas/Common.Schema.PaginationMetaSchema"
                type: object
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/backups/{backupId}:
    delete:
      tags:
        - "VPS: Backups"
      summary: Delete backup
      description: This endpoint deletes a specified backup for a virtual machine.
      operationId: VPS_deleteBackupV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - $ref: "#/components/parameters/backupId"
      responses:
        "200":
          description: Success empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Common.SuccessEmptyResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/backups:
    get:
      tags:
        - "VPS: Backups"
      summary: Get backup list
      description: This endpoint retrieves a list of backups for a specified virtual
        machine.
      operationId: VPS_getBackupListV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/VPS.V1.Backup.BackupCollection"
                  meta:
                    $ref: "#/components/schemas/Common.Schema.PaginationMetaSchema"
                type: object
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/backups/{backupId}/restore:
    post:
      tags:
        - "VPS: Backups"
      summary: Restore backup
      description: >-
        This endpoint restores a backup for a specified virtual machine.


        The system will then initiate the restore process, which may take some
        time depending on the size of the backup.


        **All data on the virtual machine will be overwritten with the data from
        the backup.**
      operationId: VPS_restoreBackupV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - $ref: "#/components/parameters/backupId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/hostname:
    put:
      tags:
        - "VPS: Virtual machine"
      summary: Set hostname
      description: >-
        This endpoint sets the hostname for a specified virtual machine. 

        Changing hostname does not update PTR record automatically.

        If you want your virtual machine to be reachable by a hostname, 

        you need to point your domain A/AAAA records to virtual machine IP as
        well.
      operationId: VPS_setHostnameV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.HostnameUpdateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Virtual machine"
      summary: Reset hostname
      description: This endpoint resets the hostname and PTR record of a specified
        virtual machine to the default value.
      operationId: VPS_resetHostnameV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}:
    get:
      tags:
        - "VPS: Virtual machine"
      summary: Get virtual machine
      description: This endpoint retrieves detailed information about a specified
        virtual machine.
      operationId: VPS_getVirtualMachineV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.VirtualMachine.VirtualMachineResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines:
    get:
      tags:
        - "VPS: Virtual machine"
      summary: Get virtual machine list
      description: This endpoint retrieves a list of all available virtual machines.
      operationId: VPS_getVirtualMachineListV1
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.VirtualMachine.VirtualMachineCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "VPS: Virtual machine"
      summary: Purchase new virtual machine
      description: >-
        This endpoint allows you to buy (purchase) and setup a new virtual
        machine.


        If virtual machine setup fails for any reason, login to
        [hPanel](https://hpanel.hostinger.com/) and complete the setup manually.


        If no payment method is provided, your default payment method will be
        used automatically.                        
      operationId: VPS_purchaseNewVirtualMachineV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.PurchaseRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Billing.V1.Order.VirtualMachineOrderResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/monarx:
    get:
      tags:
        - "VPS: Malware scanner"
      summary: Get scan metrics
      description: >-
        This endpoint retrieves the scan metrics for the
        [Monarx](https://www.monarx.com/) malware scanner installed on a
        specified virtual machine.

        The scan metrics provide detailed information about the malware scans
        performed by Monarx, including the number of scans, 

        detected threats, and other relevant statistics. This information is
        useful for monitoring the security status of the 

        virtual machine and assessing the effectiveness of the malware scanner.
      operationId: VPS_getScanMetricsV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Malware.MetricsResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "VPS: Malware scanner"
      summary: Install Monarx
      description: >-
        This endpoint installs the Monarx malware scanner on a specified virtual
        machine. 


        [Monarx](https://www.monarx.com/) is a security tool designed to detect
        and prevent malware infections on virtual machines. 

        By installing Monarx, users can enhance the security of their virtual
        machines, ensuring that they are protected against malicious software.
      operationId: VPS_installMonarxV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Malware scanner"
      summary: Uninstall Monarx
      description: >-
        This endpoint uninstalls the Monarx malware scanner on a specified
        virtual machine.

        If Monarx is not installed, the request will still be processed without
        any effect.
      operationId: VPS_uninstallMonarxV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/metrics:
    get:
      tags:
        - "VPS: Virtual machine"
      summary: Get metrics
      description: >-
        This endpoint retrieves the historical metrics for a specified virtual
        machine.

        It includes the following metrics: 

        - CPU usage

        - Memory usage

        - Disk usage

        - Network usage

        - Uptime
      operationId: VPS_getMetricsV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
        - name: date_from
          in: query
          required: true
          schema:
            type: string
            format: date-time
            default: null
            example: 2025-05-01T00:00:00Z
        - name: date_to
          in: query
          required: true
          schema:
            type: string
            format: date-time
            default: null
            example: 2025-06-01T00:00:00Z
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Metrics.MetricsCollection"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
      x-optic-ignore-example: true
  /api/vps/v1/virtual-machines/{virtualMachineId}/nameservers:
    put:
      tags:
        - "VPS: Virtual machine"
      summary: Set nameservers
      description: >-
        This endpoint sets the nameservers for a specified virtual machine.

        Be aware, that improper nameserver configuration can lead to the virtual
        machine being unable to resolve domain names.
      operationId: VPS_setNameserversV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.NameserversUpdateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/ptr:
    post:
      tags:
        - "VPS: PTR records"
      summary: Create PTR record
      description: This endpoint creates or updates a PTR (Pointer) record for a
        specified virtual machine.
      operationId: VPS_createPTRRecordV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: PTR records"
      summary: Delete PTR record
      description: >-
        This endpoint deletes a PTR (Pointer) record for a specified virtual
        machine. 


        Once deleted, reverse DNS lookups to the virtual machine's IP address
        will no longer return the previously configured hostname.
      operationId: VPS_deletePTRRecordV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/panel-password:
    put:
      tags:
        - "VPS: Virtual machine"
      summary: Set panel password
      description: |-
        This endpoint sets the panel password for a specified virtual machine. 
        If virtual machine does not use panel OS, the request will still be processed without any effect.
        Requirements for the password is the same as in the [recreate virtual machine endpoint](/#tag/vps-virtual-machine/POST/api/vps/v1/virtual-machines/{virtualMachineId}/recreate).
      operationId: VPS_setPanelPasswordV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.PanelPasswordUpdateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/recovery:
    post:
      tags:
        - "VPS: Recovery"
      summary: Start recovery mode
      description: >-
        This endpoint initiates the recovery mode for a specified virtual
        machine. 

        Recovery mode is a special state that allows users to perform system
        rescue operations, 

        such as repairing file systems, recovering data, or troubleshooting
        issues that prevent the virtual machine 

        from booting normally. 


        Virtual machine will boot recovery disk image and original disk image
        will be mounted in `/mnt` directory.
      operationId: VPS_startRecoveryModeV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.Recovery.StartRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Recovery"
      summary: Stop recovery mode
      description: |-
        This endpoint stops the recovery mode for a specified virtual machine. 
        If virtual machine is not in recovery mode, this operation will fail.
      operationId: VPS_stopRecoveryModeV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/recreate:
    post:
      tags:
        - "VPS: Virtual machine"
      summary: Recreate virtual machine
      description: >-
        This endpoint will recreate a virtual machine from scratch. 

        The recreation process involves reinstalling the operating system and
        resetting the virtual machine to its initial state.

        Snapshots, if there are any, will be deleted.


        ## Password Requirements

        Password will be checked against leaked password databases. 

        Requirements for the password are:

        - At least 8 characters long

        - At least one uppercase letter

        - At least one lowercase letter

        - At least one number

        - Is not leaked publicly


        **This operation is irreversible and will result in the loss of all data
        stored on the virtual machine!**
      operationId: VPS_recreateVirtualMachineV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.RecreateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/restart:
    post:
      tags:
        - "VPS: Virtual machine"
      summary: Restart virtual machine
      description: >-
        This endpoint restarts a specified virtual machine. This is equivalent
        to fully stopping and starting the virtual machine.

        If the virtual machine was stopped, it will be started.
      operationId: VPS_restartVirtualMachineV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/root-password:
    put:
      tags:
        - "VPS: Virtual machine"
      summary: Set root password
      description: |-
        This endpoint sets the root password for a specified virtual machine. 
        Requirements for the password is the same as in the [recreate virtual machine endpoint](/#tag/vps-virtual-machine/POST/api/vps/v1/virtual-machines/{virtualMachineId}/recreate).
      operationId: VPS_setRootPasswordV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.RootPasswordUpdateRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/setup:
    post:
      tags:
        - "VPS: Virtual machine"
      summary: Setup new virtual machine
      description: "This endpoint will setup newly purchased virtual machine with
        `initial` state. "
      operationId: VPS_setupNewVirtualMachineV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VPS.V1.VirtualMachine.SetupRequest"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.VirtualMachine.VirtualMachineResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "422":
          $ref: "#/components/responses/Common.Response.UnprocessableContentResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/snapshot:
    get:
      tags:
        - "VPS: Snapshots"
      summary: Get snapshot
      description: This endpoint retrieves a snapshot for a specified virtual machine.
      operationId: VPS_getSnapshotV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Snapshot.SnapshotResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    post:
      tags:
        - "VPS: Snapshots"
      summary: Create snapshot
      description: >-
        This endpoint creates a snapshot of a specified virtual machine. 

        A snapshot captures the state and data of the virtual machine at a
        specific point in time, 

        allowing users to restore the virtual machine to that state if needed. 

        This operation is useful for backup purposes, system recovery, 

        and testing changes without affecting the current state of the virtual
        machine.


        **Creating new snapshot will overwrite the existing snapshot!**
      operationId: VPS_createSnapshotV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
    delete:
      tags:
        - "VPS: Snapshots"
      summary: Delete snapshot
      description: This endpoint deletes a snapshot of a specified virtual machine.
      operationId: VPS_deleteSnapshotV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/snapshot/restore:
    post:
      tags:
        - "VPS: Snapshots"
      summary: Restore snapshot
      description: >-
        This endpoint restores a specified virtual machine to a previous state
        using a snapshot. 

        Restoring from a snapshot allows users to revert the virtual machine to
        that state, which is useful for system recovery, undoing changes, or
        testing.
      operationId: VPS_restoreSnapshotV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/start:
    post:
      tags:
        - "VPS: Virtual machine"
      summary: Start virtual machine
      description: >-
        This endpoint starts a specified virtual machine. 

        If the virtual machine is already running, the request will still be
        processed without any effect.
      operationId: VPS_startVirtualMachineV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
  /api/vps/v1/virtual-machines/{virtualMachineId}/stop:
    post:
      tags:
        - "VPS: Virtual machine"
      summary: Stop virtual machine
      description: >-
        This endpoint stops a specified virtual machine. 

        If the virtual machine is already stopped, the request will still be
        processed without any effect.
      operationId: VPS_stopVirtualMachineV1
      parameters:
        - $ref: "#/components/parameters/virtualMachineId"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
        "401":
          $ref: "#/components/responses/Common.Response.UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/Common.Response.ErrorResponse"
components:
  schemas:
    Common.Schema.PaginationMetaSchema:
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 15
        total:
          type: integer
          example: 100
      type: object
      x-scalar-ignore: true
    Billing.V1.Order.StoreRequest:
      required:
        - payment_method_id
        - items
      properties:
        payment_method_id:
          description: Payment method ID
          type: integer
          example: 517244
        items:
          type: array
          items:
            required:
              - item_id
              - quantity
            properties:
              item_id:
                description: Price Item ID
                type: string
                example: hostingercom-vps-kvm2-usd-1m
              quantity:
                type: integer
                example: 1
            type: object
        coupons:
          description: Discount coupon codes
          type: array
          items:
            example:
              - Coupon 3
      type: object
    Billing.V1.Subscription.CancelRequest:
      properties:
        reason_code:
          description: Cancellation reason code
          type: string
          enum:
            - other
          example: other
          nullable: true
        cancel_option:
          description: Cancellation option
          type: string
          enum:
            - immediately
          example: immediately
          nullable: true
      type: object
    DNS.V1.Zone.DestroyRequest:
      required:
        - filters
      properties:
        filters:
          description: Filter records for deletion
          type: array
          items:
            required:
              - name
              - type
            properties:
              name:
                description: Name of the record
                type: string
                example: "@"
              type:
                description: Type of the record
                type: string
                enum:
                  - A
                  - AAAA
                  - CNAME
                  - ALIAS
                  - MX
                  - TXT
                  - NS
                  - SOA
                  - SRV
                  - CAA
                example: A
            type: object
      type: object
    DNS.V1.Zone.ResetRequest:
      properties:
        sync:
          description: Determines if operation should be run synchronously
          type: boolean
          default: true
          example: true
        reset_email_records:
          description: Determines if email records should be reset
          type: boolean
          default: true
          example: true
        whitelisted_record_types:
          description: Specifies which record types to not reset
          type: array
          items:
            type: string
          example:
            - MX
            - TXT
      type: object
    DNS.V1.Zone.UpdateRequest:
      required:
        - zone
      properties:
        overwrite:
          description: If `true`, resource records (RRs) matching name and type will be
            deleted and new RRs will be created, otherwise resource records'
            ttl's are updated and new records are appended. If no matching RRs
            are found, they are created.
          type: boolean
          default: true
          example: true
        zone:
          type: array
          items:
            required:
              - name
              - records
              - type
            properties:
              name:
                description: Name of the record (use `@` for wildcard name)
                type: string
                example: www
              records:
                description: Records assigned to the name
                type: array
                items:
                  required:
                    - content
                  properties:
                    content:
                      description: Content of the name record
                      type: string
                      example: mydomain.tld.
                  type: object
              ttl:
                description: TTL (Time-To-Live) of the record
                type: integer
                example: 14400
              type:
                description: Type of the record
                type: string
                enum:
                  - A
                  - AAAA
                  - CNAME
                  - ALIAS
                  - MX
                  - TXT
                  - NS
                  - SOA
                  - SRV
                  - CAA
                example: A
            type: object
      type: object
    Domains.V1.Availability.AvailabilityRequest:
      required:
        - domain
        - tlds
      properties:
        domain:
          description: Domain name (without TLD)
          type: string
          example: mydomain
        tlds:
          description: TLDs list
          type: array
          items:
            description: TLD without leading dot
            type: string
          example:
            - com
            - net
            - org
        with_alternatives:
          description: Should response include alternatives
          type: boolean
          default: false
          example: true
      type: object
    Domains.V1.Forwarding.StoreRequest:
      required:
        - domain
        - redirect_type
        - redirect_url
      properties:
        domain:
          description: Domain name
          type: string
          example: mydomain.tld
        redirect_type:
          description: Redirect type
          type: string
          enum:
            - "301"
            - "302"
          example: "301"
          x-enumDescriptions:
            "301": Permanent
            "302": Temporary
        redirect_url:
          description: URL to forward domain to
          type: string
          example: https://forward.to.my.url
      type: object
    Domains.V1.Portfolio.PurchaseRequest:
      required:
        - domain
        - item_id
      properties:
        domain:
          description: Domain name
          type: string
          example: my-new-domain.tld
        item_id:
          description: Catalog price item ID
          type: string
          example: hostingercom-domain-com-usd-1y
        payment_method_id:
          description: Payment method ID, default will be used if not provided
          type: integer
          example: 1327362
        domain_contacts:
          description: Domain contact information
          properties:
            owner_id:
              description: Owner contact WHOIS record ID
              type: integer
              example: 741288
            admin_id:
              description: Administrative contact WHOIS record ID
              type: integer
              example: 546123
            billing_id:
              description: Billing contact WHOIS record ID
              type: integer
              example: 741288
            tech_id:
              description: Technical contact WHOIS record ID
              type: integer
              example: 741288
          type: object
        additional_details:
          description: Additional registration data, possible values depends on TLD
          type: object
        coupons:
          description: Discount coupon codes
          type: array
          items:
            example:
              - Coupon 3
      type: object
    Domains.V1.Portfolio.UpdateNameserversRequest:
      required:
        - ns1
        - ns2
      properties:
        ns1:
          description: First name server
          type: string
          example: ns1.some-nameserver.tld
        ns2:
          description: Second name server
          type: string
          example: ns2.some-nameserver.tld
        ns3:
          description: Third name server
          type: string
          example: ns3.some-nameserver.tld
        ns4:
          description: Fourth name server
          type: string
          example: ns4.some-nameserver.tld
      type: object
    Domains.V1.WHOIS.StoreRequest:
      required:
        - tld
        - entity_type
        - country
        - whois_details
      properties:
        tld:
          description: TLD of the domain (without leading dot)
          type: string
          example: com
        country:
          description: ISO 3166 2-letter country code
          type: string
          example: NL
        entity_type:
          description: Legal entity type
          type: string
          enum:
            - individual
            - organization
          example: individual
        tld_details:
          description: TLD details
          type: object
        whois_details:
          description: WHOIS details
          type: object
      type: object
    VPS.V1.Firewall.Rules.StoreRequest:
      required:
        - protocol
        - port
        - source
        - source_detail
      properties:
        protocol:
          type: string
          enum:
            - TCP
            - UDP
            - ICMP
            - GRE
            - any
            - ESP
            - AH
            - ICMPv6
            - SSH
            - HTTP
            - HTTPS
            - MySQL
            - PostgreSQL
          example: TCP
        port:
          description: "Port or port range, ex: 1024:2048"
          type: string
          example: "443"
        source:
          type: string
          enum:
            - any
            - custom
          example: any
        source_detail:
          description: IP range, CIDR, single IP or `any`
          type: string
          example: 351.15.24.0/24
      type: object
    VPS.V1.Firewall.StoreRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: My Firewall Group
      type: object
    VPS.V1.PostInstallScript.StoreRequest:
      required:
        - name
        - content
      properties:
        name:
          description: Name of the script
          type: string
          example: My Script
        content:
          description: Content of the script
          type: string
          example: |-
            #!/bin/bash

            echo 'Hello, World!'
      type: object
    VPS.V1.PublicKey.AttachRequest:
      required:
        - ids
      properties:
        ids:
          description: Public Key IDs to attach
          type: array
          items:
            type: integer
          example:
            - 18232
            - 10230230
      type: object
    VPS.V1.PublicKey.StoreRequest:
      required:
        - name
        - key
      properties:
        name:
          type: string
          example: My Public Key
        key:
          type: string
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD...
      type: object
    VPS.V1.VirtualMachine.HostnameUpdateRequest:
      required:
        - hostname
      properties:
        hostname:
          type: string
          example: my.server.tld
      type: object
    VPS.V1.VirtualMachine.MetricGetRequest:
      required:
        - date_from
        - date_to
      properties:
        date_from:
          type: string
          format: date-time
          example: 2025-05-01T00:00:00Z
        date_to:
          type: string
          format: date-time
          example: 2025-06-01T00:00:00Z
      type: object
    VPS.V1.VirtualMachine.NameserversUpdateRequest:
      required:
        - ns1
      properties:
        ns1:
          type: string
          example: 4.3.2.1
        ns2:
          type: string
          example: 1.2.3.4
      type: object
    VPS.V1.VirtualMachine.PanelPasswordUpdateRequest:
      required:
        - password
      properties:
        password:
          description: Panel password for the virtual machine
          type: string
          format: password
          minLength: 8
          example: oMeNRustosIO
      type: object
    VPS.V1.VirtualMachine.PurchaseRequest:
      required:
        - item_id
        - setup
      properties:
        item_id:
          description: Catalog price item ID
          type: string
          example: hostingercom-vps-kvm2-usd-1m
        payment_method_id:
          description: Payment method ID, default will be used if not provided
          type: integer
          example: 1327362
        setup:
          $ref: "#/components/schemas/VPS.V1.VirtualMachine.SetupRequest"
        coupons:
          description: Discount coupon codes
          type: array
          items:
            example:
              - Coupon 3
      type: object
    VPS.V1.VirtualMachine.Recovery.StartRequest:
      required:
        - root_password
      properties:
        root_password:
          description: Temporary root password for recovery mode
          type: string
          example: oMeNRustosIO
      type: object
    VPS.V1.VirtualMachine.RecreateRequest:
      required:
        - template_id
      properties:
        template_id:
          description: Template ID
          type: integer
          example: 1130
        password:
          description: Password for the virtual machine. If not provided, random password
            will be generated. Password will not be shown in the response.
          type: string
          format: password
          minLength: 8
          example: oMeNRustosIO
        post_install_script_id:
          description: Post-install script ID
          type: integer
          example: 6324
      type: object
    VPS.V1.VirtualMachine.RootPasswordUpdateRequest:
      required:
        - password
      properties:
        password:
          description: Root password for the virtual machine
          type: string
          format: password
          minLength: 8
          example: oMeNRustosIO
      type: object
    VPS.V1.VirtualMachine.SetupRequest:
      required:
        - data_center_id
        - template_id
      properties:
        template_id:
          description: Template ID
          type: integer
          example: 1130
        data_center_id:
          description: Data center ID
          type: integer
          example: 19
        post_install_script_id:
          description: Post-install script ID
          type: integer
          example: 6324
        password:
          description: Password for the virtual machine. If not provided, random password
            will be generated. Password will not be shown in the response.
          type: string
          format: password
          minLength: 8
          example: oMeNRustosIO
        hostname:
          description: Override default hostname of the virtual machine
          type: string
          example: my.server.tld
        install_monarx:
          description: Install Monarx malware scanner (if supported)
          type: boolean
          default: false
          example: false
        enable_backups:
          description: Enable weekly backup schedule
          type: boolean
          default: true
          example: true
        ns1:
          description: Name server 1
          type: string
          example: 4.3.2.1
        ns2:
          description: Name server 2
          type: string
          example: 1.2.3.4
        public_key:
          description: Use SSH key
          properties:
            name:
              description: Name of the SSH key
              type: string
              example: my-key
            key:
              description: Contents of the SSH key
              type: string
              example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2X...
          type: object
      type: object
    Billing.V1.Catalog.CatalogItemCollection:
      description: Array of
        [`Billing.V1.Catalog.CatalogItemResource`](#model/billingv1catalogcatalogitemresource)
      type: array
      items:
        $ref: "#/components/schemas/Billing.V1.Catalog.CatalogItemResource"
    Billing.V1.Catalog.CatalogItemPriceCollection:
      description: Array of
        [`Billing.V1.Catalog.CatalogItemPriceResource`](#model/billingv1catalogcatalogitempriceresource)
      type: array
      items:
        $ref: "#/components/schemas/Billing.V1.Catalog.CatalogItemPriceResource"
    Billing.V1.Catalog.CatalogItemPriceResource:
      properties:
        id:
          description: Price item ID
          type: string
          example: hostingercom-vps-kvm2-usd-1m
        name:
          description: Price item name
          type: string
          example: KVM 2 (billed every month)
        currency:
          description: Currency code
          type: string
          example: USD
        price:
          description: Price in cents
          type: integer
          example: 1799
        first_period_price:
          description: First period price in cents
          type: integer
          example: 899
        period:
          description: Period
          type: integer
          example: 1
        period_unit:
          description: Period unit
          type: string
          enum:
            - day
            - week
            - month
            - year
            - none
          example: day
      type: object
    Billing.V1.Catalog.CatalogItemResource:
      properties:
        id:
          description: Catalog item ID
          type: string
          example: hostingercom-vps-kvm2
        name:
          type: string
          example: KVM 2
        category:
          type: string
          example: VPS
        prices:
          $ref: "#/components/schemas/Billing.V1.Catalog.CatalogItemPriceCollection"
      type: object
    Billing.V1.Order.OrderBillingAddressResource:
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        company:
          type: string
          example: null
          nullable: true
        address_1:
          type: string
          example: null
          nullable: true
        address_2:
          type: string
          example: null
          nullable: true
        city:
          type: string
          example: null
          nullable: true
        state:
          type: string
          example: null
          nullable: true
        zip:
          type: string
          example: null
          nullable: true
        country:
          type: string
          example: NL
          nullable: true
        phone:
          type: string
          example: null
          nullable: true
        email:
          type: string
          example: john@doe.tld
      type: object
    Billing.V1.Order.OrderResource:
      properties:
        id:
          description: Order ID
          type: integer
          example: 2957086
        subscription_id:
          description: Subscription ID
          type: string
          example: Azz353Uhl1xC54pR0
        status:
          type: string
          enum:
            - completed
            - pending
            - processing
            - failed
            - refunded
            - cancelled
            - awaiting_payment
            - payment_initiated
            - fraud_refund
          example: completed
        currency:
          description: Currency code
          type: string
          example: USD
        subtotal:
          description: Subtotal price (exc. VAT) in cents
          type: integer
          example: 899
        total:
          description: Total price (inc. VAT) in cents
          type: integer
          example: 1088
        billing_address:
          $ref: "#/components/schemas/Billing.V1.Order.OrderBillingAddressResource"
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        updated_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
      type: object
    Billing.V1.Order.VirtualMachineOrderResource:
      properties:
        order:
          $ref: "#/components/schemas/Billing.V1.Order.OrderResource"
        virtual_machine:
          $ref: "#/components/schemas/VPS.V1.VirtualMachine.VirtualMachineResource"
      type: object
    Billing.V1.PaymentMethod.PaymentMethodCollection:
      description: Array of
        [`Billing.V1.PaymentMethod.PaymentMethodResource`](#model/billingv1paymentmethodpaymentmethodresource)
      type: array
      items:
        $ref: "#/components/schemas/Billing.V1.PaymentMethod.PaymentMethodResource"
    Billing.V1.PaymentMethod.PaymentMethodResource:
      properties:
        id:
          description: Payment method ID
          type: integer
          example: 6523
        name:
          type: string
          example: Credit Card
        identifier:
          type: string
          example: 1234*****6464
        payment_method:
          type: string
          example: card
        is_default:
          type: boolean
          example: true
        is_expired:
          type: boolean
          example: false
        is_suspended:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        expires_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
      type: object
    Billing.V1.Subscription.SubscriptionCollection:
      description: Array of
        [`Billing.V1.Subscription.SubscriptionResource`](#model/billingv1subscriptionsubscriptionresource)
      type: array
      items:
        $ref: "#/components/schemas/Billing.V1.Subscription.SubscriptionResource"
    Billing.V1.Subscription.SubscriptionResource:
      properties:
        id:
          description: Subscription ID
          type: string
          example: Azz36nUfKX1S1MSF
        name:
          type: string
          example: KVM 1
        status:
          type: string
          enum:
            - active
            - paused
            - cancelled
            - not_renewing
            - transferred
            - in_trial
            - future
          example: active
        billing_period:
          type: integer
          example: 1
        billing_period_unit:
          type: string
          example: day
        currency_code:
          type: string
          example: USD
        total_price:
          description: Total price in cents
          type: integer
          example: 1799
        renewal_price:
          description: Renewal price in cents
          type: integer
          example: 1799
        is_auto_renewed:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        expires_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
          nullable: true
        next_billing_at:
          type: string
          format: date-time
          example: 2025-02-28T11:54:22Z
          nullable: true
      type: object
    Common.SuccessEmptyResource:
      properties:
        message:
          type: string
          example: Request accepted
      type: object
      x-scalar-ignore: true
    DNS.V1.Snapshot.SnapshotCollection:
      description: Array of
        [`DNS.V1.Snapshot.SnapshotResource`](#model/dnsv1snapshotsnapshotresource)
      type: array
      items:
        $ref: "#/components/schemas/DNS.V1.Snapshot.SnapshotResource"
    DNS.V1.Snapshot.SnapshotResource:
      properties:
        id:
          description: Snapshot ID
          type: integer
          example: 5341
        reason:
          description: Reason of the update
          type: string
          example: Zone records update request
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
      type: object
    DNS.V1.Snapshot.SnapshotWithContentResource:
      properties:
        id:
          description: Snapshot ID
          type: integer
          example: 5341
        reason:
          description: Reason of the update
          type: string
          example: Zone records update request
        snapshot:
          $ref: "#/components/schemas/DNS.V1.Zone.RecordCollection"
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
      type: object
    DNS.V1.Zone.NameRecordCollection:
      description: Array of
        [`DNS.V1.Zone.NameRecordResource`](#model/dnsv1zonenamerecordresource)
      type: array
      items:
        $ref: "#/components/schemas/DNS.V1.Zone.NameRecordResource"
    DNS.V1.Zone.NameRecordResource:
      properties:
        content:
          description: Content of the name record
          type: string
          example: mydomain.tld.
        is_disabled:
          description: Flag to mark name record as disabled
          type: boolean
          example: false
      type: object
    DNS.V1.Zone.RecordCollection:
      description: Array of [`DNS.V1.Zone.RecordResource`](#model/dnsv1zonerecordresource)
      type: array
      items:
        $ref: "#/components/schemas/DNS.V1.Zone.RecordResource"
    DNS.V1.Zone.RecordResource:
      properties:
        name:
          description: Name of the record (use `@` for wildcard name)
          type: string
          example: www
        records:
          $ref: "#/components/schemas/DNS.V1.Zone.NameRecordCollection"
        ttl:
          description: TTL (Time-To-Live) of the record
          type: integer
          example: 14400
        type:
          description: Type of the record
          type: string
          enum:
            - A
            - AAAA
            - CNAME
            - ALIAS
            - MX
            - TXT
            - NS
            - SOA
            - SRV
            - CAA
          example: A
      type: object
    Domains.V1.Availability.AvailabilityCollection:
      description: Array of
        [`Domains.V1.Availability.AvailabilityResource`](#model/domainsv1availabilityavailabilityresource)
      type: array
      items:
        $ref: "#/components/schemas/Domains.V1.Availability.AvailabilityResource"
    Domains.V1.Availability.AvailabilityResource:
      properties:
        domain:
          description: Domain name, `null` when not claimed free domain
          type: string
          example: mydomain.tld
          nullable: true
        is_available:
          description: "`true` if domain is available for registration"
          type: boolean
          example: true
        is_alternative:
          description: "`true` if domain is provided as an alternative"
          type: boolean
          example: false
        restriction:
          description: Special rules and/or restrictions applied for registering TLD
          type: string
          nullable: true
      type: object
    Domains.V1.Domain.DomainCollection:
      description: Array of
        [`Domains.V1.Domain.DomainResource`](#model/domainsv1domaindomainresource)
      type: array
      items:
        $ref: "#/components/schemas/Domains.V1.Domain.DomainResource"
    Domains.V1.Domain.DomainExtendedResource:
      properties:
        domain:
          description: Domain name
          type: string
          example: mydomain.tld
        status:
          description: Status of the domain
          type: string
          enum:
            - active
            - pending_setup
            - expired
            - requested
            - pending_verification
          example: active
        message:
          type: string
          nullable: true
        is_privacy_protection_allowed:
          description: Is privacy protection allowed for the domain
          type: boolean
          example: true
        is_privacy_protected:
          description: Is privacy protection enabled for the domain
          type: boolean
          example: false
        is_lockable:
          description: Is domain allowed to be locked
          type: boolean
          example: true
        is_locked:
          description: Is domain locked
          type: boolean
          example: true
        name_servers:
          description: Name servers
          properties:
            ns1:
              description: Name server 1
              type: string
              example: ns1.example.tld
            ns2:
              description: Name server 2
              type: string
              example: ns2.example.tld
          type: object
          example:
            ns1: ns1.example.tld
            ns2: ns2.example.tld
        child_name_servers:
          description: Child name servers
          type: array
          items:
            type: array
            items:
              type: string
          example:
            ns1.example.tld:
              - 258.231.55.321
              - 258.231.55.322
        domain_contacts:
          description: WHOIS profiles
          properties:
            admin_id:
              description: Admin WHOIS profile ID
              type: integer
              example: 114698
            owner_id:
              description: Owner WHOIS profile ID
              type: integer
              example: 614698
            billing_id:
              description: Billing WHOIS profile ID
              type: integer
              example: 154698
            tech_id:
              description: Technician WHOIS profile ID
              type: integer
              example: 524248
          type: object
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        updated_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        60_days_lock_expires_at:
          type: string
          format: date-time
          example: 2025-04-27T11:54:22Z
          nullable: true
        registered_at:
          type: string
          format: date-time
          example: 2025-02-27T12:54:22Z
          nullable: true
        expires_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
          nullable: true
      type: object
    Domains.V1.Domain.DomainResource:
      properties:
        id:
          description: Domain ID
          type: integer
          example: 13632
        domain:
          description: Domain name, `null` when not claimed free domain
          type: string
          example: mydomain.tld
          nullable: true
        type:
          type: string
          enum:
            - domain
            - free_domain
          example: domain
        status:
          type: string
          enum:
            - active
            - pending_setup
            - expired
            - requested
            - pending_verification
          example: active
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        expires_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
          nullable: true
      type: object
    Domains.V1.Forwarding.ForwardingResource:
      properties:
        domain:
          description: Domain name
          type: string
          example: mydomain.tld
          nullable: true
        redirect_type:
          description: Redirect type
          type: string
          enum:
            - "301"
            - "302"
          example: "301"
          x-enumDescriptions:
            "301": Permanent
            "302": Temporary
        redirect_url:
          description: URL domain is forwarded to
          type: string
          example: https://forward.to.my.url
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        updated_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
          nullable: true
      type: object
    Domains.V1.WHOIS.ProfileCollection:
      description: Array of
        [`Domains.V1.WHOIS.ProfileResource`](#model/domainsv1whoisprofileresource)
      type: array
      items:
        $ref: "#/components/schemas/Domains.V1.WHOIS.ProfileResource"
    Domains.V1.WHOIS.ProfileResource:
      properties:
        id:
          description: WHOIS Profile ID
          type: integer
          example: 746263
        tld:
          description: TLD to which contact profile can be applied to
          type: string
          example: com
        country:
          description: ISO 3166 2-letter country code
          type: string
          example: NL
        entity_type:
          description: WHOIS profile entity type
          type: string
          enum:
            - individual
            - organization
          example: individual
        whois_details:
          description: WHOIS profile details
          type: object
          example:
            first_name: John
            last_name: Doe
            email: john@doe.tld
        tld_details:
          description: TLD details
          type: object
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        updated_at:
          type: string
          format: date-time
          example: 2025-03-19T11:54:22Z
      type: object
    Domains.V1.WHOIS.ProfileUsageResource:
      description: Array of domains
      type: array
      items:
        type: string
      example:
        - mydomain1.tld
        - mydomain2.tld
    VPS.V1.Action.ActionCollection:
      description: Array of
        [`VPS.V1.Action.ActionResource`](#model/vpsv1actionactionresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.Action.ActionResource"
    VPS.V1.Action.ActionResource:
      properties:
        id:
          description: Action ID
          type: integer
          example: 8123712
        name:
          description: Action name
          type: string
          example: action_name
        state:
          description: Action state
          type: string
          enum:
            - success
            - error
            - delayed
            - sent
            - created
          example: success
          x-enumDescriptions:
            success: Action was successful
            error: Action failed
            delayed: Action is delayed
            sent: Action was sent
            created: Action was created
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:00Z
        updated_at:
          type: string
          format: date-time
          example: 2025-02-27T11:58:00Z
      type: object
    VPS.V1.Backup.BackupCollection:
      description: Array of
        [`VPS.V1.Backup.BackupResource`](#model/vpsv1backupbackupresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.Backup.BackupResource"
    VPS.V1.Backup.BackupResource:
      properties:
        id:
          description: Backup ID
          type: integer
          example: 325
        location:
          description: Location of the backup
          type: string
          example: nl-srv-openvzbackups
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
      type: object
    VPS.V1.DataCenter.DataCenterCollection:
      description: Array of
        [`VPS.V1.DataCenter.DataCenterResource`](#model/vpsv1datacenterdatacenterresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.DataCenter.DataCenterResource"
    VPS.V1.DataCenter.DataCenterResource:
      properties:
        id:
          description: Data center ID
          type: integer
          example: 29
        name:
          description: Data center name
          type: string
          example: phx
          nullable: true
        location:
          description: Data center location country (two letter code)
          type: string
          example: us
          nullable: true
        city:
          description: Data center location city
          type: string
          example: Phoenix
          nullable: true
        continent:
          description: Data center location continent
          type: string
          example: North America
          nullable: true
      type: object
    VPS.V1.Firewall.FirewallCollection:
      description: Array of
        [`VPS.V1.Firewall.FirewallResource`](#model/vpsv1firewallfirewallresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.Firewall.FirewallResource"
    VPS.V1.Firewall.FirewallResource:
      properties:
        id:
          description: Firewall ID
          type: integer
          example: 65224
        name:
          description: Firewall name
          type: string
          example: HTTP and SSH only
        is_synced:
          description: Is current firewall synced with VPS
          type: boolean
          example: false
        rules:
          $ref: "#/components/schemas/VPS.V1.Firewall.FirewallRuleCollection"
        created_at:
          type: string
          format: date-time
          example: 2021-09-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2021-09-01T12:00:00Z
      type: object
    VPS.V1.Firewall.FirewallRuleCollection:
      description: Array of
        [`VPS.V1.Firewall.FirewallRuleResource`](#model/vpsv1firewallfirewallruleresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.Firewall.FirewallRuleResource"
    VPS.V1.Firewall.FirewallRuleResource:
      properties:
        id:
          description: Firewall rule ID
          type: integer
          example: 24541
        action:
          description: Firewall rule action
          type: string
          enum:
            - accept
            - drop
          example: accept
        protocol:
          description: Firewall rule protocol
          type: string
          enum:
            - TCP
            - UDP
            - ICMP
            - GRE
            - any
            - ESP
            - AH
            - ICMPv6
            - SSH
            - HTTP
            - HTTPS
            - MySQL
            - PostgreSQL
          example: TCP
        port:
          description: "Firewall rule destination port: single or port range"
          type: string
          example: 1024:2048
        source:
          description: Firewall rule source. Can be `any` or `custom`
          type: string
          example: any
        source_detail:
          description: Firewall rule source detail. Can be `any` or IP address, CIDR or
            range
          type: string
          example: any
      type: object
    VPS.V1.IPAddress.IPAddressCollection:
      description: Array of
        [`VPS.V1.IPAddress.IPAddressResource`](#model/vpsv1ipaddressipaddressresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.IPAddress.IPAddressResource"
    VPS.V1.IPAddress.IPAddressResource:
      properties:
        id:
          description: IP address ID
          type: integer
          example: 52347
        address:
          description: "IP address: IPv4 or IPv6"
          type: string
          example: 213.331.273.15
        ptr:
          description: IP address PTR record
          type: string
          example: something.domain.tld
          nullable: true
      type: object
    VPS.V1.Malware.MetricsResource:
      properties:
        records:
          description: Records found during last scan
          type: integer
          example: 1
        malicious:
          description: Malicious files found during last scan
          type: integer
          example: 2
        compromised:
          description: Compromised files found during last scan
          type: integer
          example: 3
        scanned_files:
          description: Total number of files scanned during last scan
          type: integer
          example: 193218
        scan_started_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        scan_ended_at:
          type: string
          format: date-time
          example: 2025-03-27T11:54:22Z
          nullable: true
      type: object
    VPS.V1.Metrics.MetricsCollection:
      properties:
        cpu_usage:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Metrics.MetricsResource"
          nullable: true
          description: CPU usage in percentage, 0 - 100%
          type: object
          example:
            unit: "%"
            usage:
              "1742269632": 1.45
        ram_usage:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Metrics.MetricsResource"
          nullable: true
          description: RAM usage in bytes
          type: object
          example:
            unit: bytes
            usage:
              "1742269632": 554176512
        disk_space:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Metrics.MetricsResource"
          nullable: true
          description: Disk space usage in bytes
          type: object
          example:
            unit: bytes
            usage:
              "1742269632": 2620018688
        outgoing_traffic:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Metrics.MetricsResource"
          nullable: true
          description: Outgoing traffic in bytes
          type: object
          example:
            unit: bytes
            usage:
              "1742269632": 784800
        incoming_traffic:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Metrics.MetricsResource"
          nullable: true
          description: Incoming traffic in bytes
          type: object
          example:
            unit: bytes
            usage:
              "1742269632": 8978400
        uptime:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Metrics.MetricsResource"
          nullable: true
          description: Uptime in milliseconds
          type: object
          example:
            unit: milliseconds
            usage:
              "1742269632": 455248
      type: object
    VPS.V1.Metrics.MetricsResource:
      properties:
        unit:
          description: Measurement unit
          type: string
          example: measurement-unit
        usage:
          description: Object, containing UNIX timestamps as a key and measurement as a
            value.
          type: object
          example:
            timestamp: 123
      type: object
    VPS.V1.PostInstallScript.PostInstallScriptCollection:
      description: Array of
        [`VPS.V1.PostInstallScript.PostInstallScriptResource`](#model/vpsv1postinstallscriptpostinstallscriptresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.PostInstallScript.PostInstallScriptResource"
    VPS.V1.PostInstallScript.PostInstallScriptResource:
      properties:
        id:
          description: Post-install script ID
          type: integer
          example: 325
        name:
          description: Name of the script
          type: string
          example: My Setup Script
        content:
          description: Content of the script
          type: string
          example: "#!/bin/bash\\napt-get update\\napt-get install -y nginx"
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        updated_at:
          type: string
          format: date-time
          example: 2025-03-19T11:54:22Z
      type: object
    VPS.V1.PublicKey.PublicKeyCollection:
      description: Array of
        [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.PublicKey.PublicKeyResource"
    VPS.V1.PublicKey.PublicKeyResource:
      properties:
        id:
          description: Public key ID
          type: integer
          example: 325
        name:
          description: Public key name
          type: string
          example: My public key
        key:
          description: Public key content
          type: string
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD...
      type: object
    VPS.V1.Snapshot.SnapshotResource:
      properties:
        id:
          description: Snapshot ID
          type: integer
          example: 325
        created_at:
          type: string
          format: date-time
          example: 2025-02-27T11:54:22Z
        expires_at:
          type: string
          format: date-time
          example: 2025-03-19T11:54:22Z
      type: object
    VPS.V1.Template.TemplateCollection:
      description: Array of
        [`VPS.V1.Template.TemplateResource`](#model/vpsv1templatetemplateresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.Template.TemplateResource"
    VPS.V1.Template.TemplateResource:
      properties:
        id:
          description: Template ID
          type: integer
          example: 6523
        name:
          description: Template name
          type: string
          example: Ubuntu 20.04 LTS
        description:
          description: Template description
          type: string
          example: Ubuntu 20.04 LTS
        documentation:
          description: Link to official OS documentation
          type: string
          example: https://docs.ubuntu.com
          nullable: true
      type: object
    VPS.V1.VirtualMachine.VirtualMachineCollection:
      description: Array of
        [`VPS.V1.VirtualMachine.VirtualMachineResource`](#model/vpsv1virtualmachinevirtualmachineresource)
      type: array
      items:
        $ref: "#/components/schemas/VPS.V1.VirtualMachine.VirtualMachineResource"
    VPS.V1.VirtualMachine.VirtualMachineResource:
      properties:
        id:
          description: Virtual machine ID
          type: integer
          example: 17923
        firewall_group_id:
          description: Active firewall ID, `null` if disabled
          type: integer
          example: null
          nullable: true
        subscription_id:
          description: Subscription ID
          type: string
          example: Azz353Uhl1xC54pR0
          nullable: true
        plan:
          description: VPS plan name
          type: string
          example: KVM 4
          nullable: true
        hostname:
          type: string
          example: srv17923.hstgr.cloud
        state:
          type: string
          enum:
            - running
            - starting
            - stopping
            - stopped
            - creating
            - initial
            - error
            - suspending
            - unsuspending
            - suspended
            - destroying
            - destroyed
            - recreating
            - restoring
            - recovery
            - stopping_recovery
          example: running
        actions_lock:
          type: string
          enum:
            - unlocked
            - locked
          example: unlocked
        cpus:
          description: CPUs count assigned to virtual machine
          type: integer
          example: 4
        memory:
          description: Memory available to virtual machine (in megabytes)
          type: integer
          example: 8192
        disk:
          description: Virtual machine disk size (in megabytes)
          type: integer
          example: 51200
        bandwidth:
          description: Monthly internet traffic available to virtual machine (in megabytes)
          type: integer
          example: 1073741824
        ns1:
          description: Primary DNS resolver
          type: string
          example: 1.1.1.1
          nullable: true
        ns2:
          description: Secondary DNS resolver
          type: string
          example: 8.8.8.8
          nullable: true
        ipv4:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.IPAddress.IPAddressCollection"
          nullable: true
          description: IPv4 address of virtual machine
        ipv6:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.IPAddress.IPAddressCollection"
          nullable: true
          description: IPv6 address of virtual machine, `null` if not assigned
        template:
          oneOf:
            - $ref: "#/components/schemas/VPS.V1.Template.TemplateResource"
          nullable: true
          description: OS template installed in virtual machine
        created_at:
          type: string
          format: date-time
          example: 2024-09-05T07:25:36.00000Z
      type: object
  responses:
    Common.Response.ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            properties:
              message:
                description: Message of the error
                type: string
                example: Error message
              correlation_id:
                description: Request correlation ID
                type: string
                example: 26a91bd9-f8c8-4a83-9df9-83e23d696fe3
            type: object
      x-scalar-ignore: true
    Common.Response.UnauthorizedResponse:
      description: Unauthenticated response
      content:
        application/json:
          schema:
            properties:
              message:
                description: Message of the error
                type: string
                example: Unauthenticated
              correlation_id:
                description: Request correlation ID
                type: string
                example: 26a91bd9-f8c8-4a83-9df9-83e23d696fe3
            type: object
      x-scalar-ignore: true
    Common.Response.UnprocessableContentResponse:
      description: Validation error response
      content:
        application/json:
          schema:
            properties:
              message:
                description: Validation error message
                type: string
                example: The name field is required. (and 1 more error)
              errors:
                description: Object of detailed errors for each field
                properties:
                  field_1:
                    type: array
                    items: {}
                    example:
                      - The field_1 field is required.
                      - The field_1 must be a number.
                  field_2:
                    type: array
                    items: {}
                    example:
                      - The field_2 field is required.
                      - The field_2 must be a string.
                type: object
              correlation_id:
                description: Request correlation ID
                type: string
                example: 26a91bd9-f8c8-4a83-9df9-83e23d696fe3
            type: object
      x-scalar-ignore: true
  parameters:
    category:
      name: category
      in: query
      description: Filter catalog items by category
      schema:
        type: string
        enum:
          - DOMAIN
          - VPS
        example: VPS
    name:
      name: name
      in: query
      description: Filter catalog items by name. Use `*` for wildcard search, e.g.
        `.COM*` to find .com domain
      schema:
        type: string
        example: .COM*
    paymentMethodId:
      name: paymentMethodId
      in: path
      description: Payment method ID
      required: true
      schema:
        type: integer
        example: 9693613
    subscriptionId:
      name: subscriptionId
      in: path
      description: Subscription ID
      required: true
      schema:
        type: string
        example: Cxy353Uhl1xC54pG6
    domain:
      name: domain
      in: path
      description: Domain name
      required: true
      schema:
        type: string
        example: mydomain.tld
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        example: 1
    snapshotId:
      name: snapshotId
      in: path
      description: Snapshot ID
      required: true
      schema:
        type: integer
        example: 53513053
    tld:
      name: tld
      in: query
      description: Filter by TLD (without leading dot)
      schema:
        type: string
        example: com
    whoisId:
      name: whoisId
      in: path
      description: WHOIS ID
      required: true
      schema:
        type: integer
        example: 564651
    tokenId:
      name: tokenId
      in: path
      description: Token ID
      required: true
      schema:
        type: integer
        example: 6409747
    actionId:
      name: actionId
      in: path
      description: Action ID
      required: true
      schema:
        type: integer
        example: 8123712
    backupId:
      name: backupId
      in: path
      description: Backup ID
      required: true
      schema:
        type: integer
        example: 8676502
    firewallId:
      name: firewallId
      in: path
      description: Firewall ID
      required: true
      schema:
        type: integer
        example: 9449049
    ruleId:
      name: ruleId
      in: path
      description: Firewall Rule ID
      required: true
      schema:
        type: integer
        example: 8941182
    postInstallScriptId:
      name: postInstallScriptId
      in: path
      description: Post-install script ID
      required: true
      schema:
        type: integer
        example: 9568314
    publicKeyId:
      name: publicKeyId
      in: path
      description: Public Key ID
      required: true
      schema:
        type: integer
        example: 6672861
    templateId:
      name: templateId
      in: path
      description: Template ID
      required: true
      schema:
        type: integer
        example: 2868928
    virtualMachineId:
      name: virtualMachineId
      in: path
      description: Virtual Machine ID
      required: true
      schema:
        type: integer
        example: 1268054
  securitySchemes:
    apiToken:
      type: http
      description: API Token authentication
      scheme: bearer
security:
  - apiToken: []
tags:
  - name: "Billing: Catalog"
    description: Access a comprehensive catalog of service plans and subscription
      options, complete with detailed pricing and features.
    x-displayName: Catalog
  - name: "Billing: Orders"
    description: Initiate and track new service orders seamlessly. This category
      streamlines the process of purchasing Hostinger services, enabling
      efficient management of order details.
    x-displayName: Orders
  - name: "Billing: Payment methods"
    description: Review and manage the payment methods linked to your Hostinger
      account. Enjoy a secure and convenient overview for handling billing and
      transactions.
    x-displayName: Payment methods
  - name: "Billing: Subscriptions"
    description: Manage your account’s subscriptions by retrieving lists of active
      and expired plans along with details such as activation and expiration
      dates.
    x-displayName: Subscriptions
  - name: "DNS: Snapshot"
    description: >-
      Manage DNS snapshots for your domains.

      This category includes endpoints for viewing and restoring snapshots of
      your domain DNS zone.

      Snapshot is a point-in-time copy of your DNS zone, allowing you to restore
      your domain's DNS settings to a previous state.
    x-displayName: Snapshot
  - name: "DNS: Zone"
    description: >-
      Manage DNS zones and records for your domains. This category includes
      endpoints for retrieving, updating, deleting DNS zone and it's associated
      records.

      The DNS zone will be created once you purchase new domain at Hostinger. 
    x-displayName: Zone
  - name: "Domains: Availability"
    description: Check the availability of domain names across multiple TLDs. This
      category allows you to verify if a specific domain name is available for
      registration.
    x-displayName: Availability
  - name: "Domains: Forwarding"
    description: Domain forwarding or redirect is an easy way to direct your website
      visitors to another site or page, making it simple to maintain your brand
      and keep your visitors engaged.
    x-displayName: Forwarding
  - name: "Domains: Portfolio"
    description: Retrieve and manage your domain portfolio. This category lets you
      list all domains linked to your account, including their creation and
      expiration details.
    x-displayName: Portfolio
  - name: "Domains: WHOIS"
    description: >-
      Manage WHOIS contact profiles for your domains. This category includes
      endpoints for creating, updating, deleting, and retrieving WHOIS profiles.

      WHOIS profile stores registration data for domain names and is required
      for domain registration.
    x-displayName: WHOIS
  - name: "VPS: Data centers"
    description: Access information on available data centers, including location
      details, so you can choose the optimal region for deploying your virtual
      machines.
    x-displayName: Data centers
  - name: "VPS: Firewall"
    description: >-
      Enhance network security with endpoints for creating, activating,
      deactivating, syncing, updating, and deleting firewalls and firewall rules
      for your virtual machines.

      This firewall applies rules at the network level, so it will take
      precedence over the virtual machine's internal firewall.


      **Access to firewall requires having at least one virtual machine.**
    x-displayName: Firewall
  - name: "VPS: Post-install scripts"
    description: This category allows you to create, update, delete, and retrieve
      scripts that can be used for automated tasks after the operating system
      installation. Use case includes setting up software, configuring settings,
      or running custom commands.
    x-displayName: Post-install scripts
  - name: "VPS: Public Keys"
    description: Manage SSH keys for secure access. This category covers adding new
      public keys, attaching them to virtual machines, retrieving key lists, and
      deleting keys.
    x-displayName: Public Keys
  - name: "VPS: OS Templates"
    description: Retrieve details of operating system templates or list all
      available templates to choose the right configuration when deploying or
      recreating virtual machines.
    x-displayName: OS Templates
  - name: "VPS: Actions"
    description: Track and review operations performed on your virtual machines.
      These endpoints provide details about specific actions—such as start,
      stop, or restart—including timestamps and statuses.
    x-displayName: Actions
  - name: "VPS: Virtual machine"
    description: Core virtual machine management functionality. Endpoints in this
      category let you retrieve machine details, configure settings (hostname,
      nameservers, passwords), and perform operations like start, stop, restart,
      or recreate.
    x-displayName: Virtual machine
  - name: "VPS: Backups"
    description: Safeguard your data by managing backups. You can list available
      backups, restore a virtual machine from a backup, or delete backups as
      needed.
    x-displayName: Backups
  - name: "VPS: Malware scanner"
    description: Monitor your virtual machines’ security using the Monarx malware
      scanner. Retrieve scan metrics or install/uninstall the scanner to help
      protect against malware threats.
    x-displayName: Malware scanner
  - name: "VPS: PTR records"
    description: Manage reverse DNS settings by creating or deleting PTR records for
      your virtual machines, ensuring that IP addresses correctly resolve to
      hostnames.
    x-displayName: PTR records
  - name: "VPS: Recovery"
    description: Initiate or stop recovery mode to perform system rescue operations.
      This category enables you to boot a virtual machine into a state suitable
      for repairing file systems or recovering data.
    x-displayName: Recovery
  - name: "VPS: Snapshots"
    description: Create, restore, or delete snapshots that capture the state of your
      virtual machines at a given point, allowing you to quickly recover or test
      changes without affecting current operations.
    x-displayName: Snapshots
x-tagGroups:
  - name: Domains
    tags:
      - "Domains: Availability"
      - "Domains: Forwarding"
      - "Domains: Portfolio"
      - "Domains: WHOIS"
  - name: DNS
    tags:
      - "DNS: Snapshot"
      - "DNS: Zone"
  - name: Billing
    tags:
      - "Billing: Catalog"
      - "Billing: Orders"
      - "Billing: Payment methods"
      - "Billing: Subscriptions"
  - name: VPS
    tags:
      - "VPS: Actions"
      - "VPS: Backups"
      - "VPS: Data centers"
      - "VPS: PTR records"
      - "VPS: Firewall"
      - "VPS: Malware scanner"
      - "VPS: OS Templates"
      - "VPS: Post-install scripts"
      - "VPS: Public Keys"
      - "VPS: Recovery"
      - "VPS: Snapshots"
      - "VPS: Virtual machine"
  - name: Miscellaneous
    tags:
      - Models
