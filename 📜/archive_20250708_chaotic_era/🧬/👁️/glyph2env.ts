#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env

/**
 * üëÅÔ∏è Glyph2Env - –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á –∂–∏–≤–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤ –≤ –º–µ—Ä—Ç–≤—ñ –∫–æ–Ω—Ñ—ñ–≥–∏
 * Inspired by GPT's antibureaucrat vision
 * 
 * –ë–µ—Ä–µ glyphs.yaml —ñ —Å—Ç–≤–æ—Ä—é—î –≤—Å—é –¥–µ—Ä–µ–≤'—è–Ω—É —Ö—É–π–Ω—é —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å–∏—Å—Ç–µ–º–∞–º
 */

import { parse } from "https://deno.land/std@0.208.0/yaml/mod.ts";
import { ensureDir, ensureFile } from "https://deno.land/std@0.208.0/fs/mod.ts";

interface GlyphIntent {
  intent: string;
  source?: string;
  env?: Record<string, string | number>;
  docker?: {
    expose?: number | number[];
    build?: boolean;
    image?: string;
  };
  windmill?: {
    run?: boolean;
    schedule?: string;
  };
  method?: string;
  schedule?: string;
}

interface GlyphsConfig {
  [key: string]: GlyphIntent;
}

class GlyphTranslator {
  private glyphs: GlyphsConfig = {};
  private secretPrefix = "üóùÔ∏è";
  
  async loadGlyphs(path = "./üß¨/—è–¥–µ—Ä–æ/glyphs.yaml") {
    try {
      const content = await Deno.readTextFile(path);
      this.glyphs = parse(content) as GlyphsConfig;
      console.log("üëÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ–Ω—Ç–µ–Ω—Ç–∏:", Object.keys(this.glyphs));
    } catch (e) {
      console.error("‚ùå –ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –∂–∏–≤—ñ —ñ–Ω—Ç–µ–Ω—Ç–∏:", e.message);
      Deno.exit(1);
    }
  }
  
  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∂–∏–≤—ñ —ñ–Ω—Ç–µ–Ω—Ç–∏ –≤ .env —Ñ–∞–π–ª
   */
  async generateEnv(intentName?: string) {
    const intents = intentName 
      ? { [intentName]: this.glyphs[intentName] }
      : this.glyphs;
      
    let envContent = "# üî• –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–Ω—Ç–∏–±—é—Ä–æ–∫—Ä–∞—Ç–æ–º –∑ –∂–∏–≤–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤\n\n";
    
    for (const [name, intent] of Object.entries(intents)) {
      if (!intent.env) continue;
      
      envContent += `# Intent: ${intent.intent}\n`;
      for (const [key, value] of Object.entries(intent.env)) {
        const processedValue = this.processSecrets(String(value));
        envContent += `${key}=${processedValue}\n`;
      }
      envContent += "\n";
    }
    
    await ensureFile(".env");
    await Deno.writeTextFile(".env", envContent);
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ .env –∑ –∂–∏–≤–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤");
  }
  
  /**
   * –°—Ç–≤–æ—Ä—é—î docker-compose.yml –∑ —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤
   */
  async generateDockerCompose(intentName?: string) {
    const intents = intentName 
      ? { [intentName]: this.glyphs[intentName] }
      : this.glyphs;
      
    const services: any = {};
    
    for (const [name, intent] of Object.entries(intents)) {
      if (!intent.docker) continue;
      
      services[name] = {
        build: intent.docker.build ? "." : undefined,
        image: intent.docker.image,
        ports: intent.docker.expose 
          ? Array.isArray(intent.docker.expose)
            ? intent.docker.expose.map(p => `${p}:${p}`)
            : [`${intent.docker.expose}:${intent.docker.expose}`]
          : undefined,
        environment: intent.env,
        restart: "unless-stopped"
      };
      
      // –í–∏–¥–∞–ª—è—î–º–æ undefined –ø–æ–ª—è
      Object.keys(services[name]).forEach(key => 
        services[name][key] === undefined && delete services[name][key]
      );
    }
    
    const compose = {
      version: "3.8",
      services,
      "x-generated": "üî• –ê–Ω—Ç–∏–±—é—Ä–æ–∫—Ä–∞—Ç v1.0"
    };
    
    await ensureFile("docker-compose.yml");
    await Deno.writeTextFile("docker-compose.yml", 
      "# –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ –∂–∏–≤–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤\n" + 
      JSON.stringify(compose, null, 2).replace(/"/g, "'")
    );
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ docker-compose.yml");
  }
  
  /**
   * –û–±—Ä–æ–±–ª—è—î —Å–µ–∫—Ä–µ—Ç–∏ —á–µ—Ä–µ–∑ –≥–ª—ñ—Ñ-—Å–∏—Å—Ç–µ–º—É
   */
  private processSecrets(value: string): string {
    if (value.startsWith(`$${this.secretPrefix}`)) {
      const secretPath = value.substring(1);
      // TODO: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Å–∏—Å—Ç–µ–º–æ—é —Å–µ–∫—Ä–µ—Ç—ñ–≤
      console.log(`üîê –ü–æ—Ç—Ä—ñ–±–µ–Ω —Å–µ–∫—Ä–µ—Ç: ${secretPath}`);
      return `\${${secretPath.replace(this.secretPrefix + "/", "").toUpperCase()}}`;
    }
    return value;
  }
  
  /**
   * –°—Ç–≤–æ—Ä—é—î Windmill –∑–º—ñ–Ω–Ω—ñ
   */
  async generateWindmillVars(intentName?: string) {
    const intents = intentName 
      ? { [intentName]: this.glyphs[intentName] }
      : this.glyphs;
      
    const vars: any[] = [];
    
    for (const [name, intent] of Object.entries(intents)) {
      if (!intent.windmill || !intent.env) continue;
      
      for (const [key, value] of Object.entries(intent.env)) {
        vars.push({
          path: `u/user/${key.toLowerCase()}`,
          value: this.processSecrets(String(value)),
          is_secret: String(value).includes(this.secretPrefix),
          description: `From intent: ${intent.intent}`
        });
      }
    }
    
    await ensureFile("windmill_vars.json");
    await Deno.writeTextFile("windmill_vars.json", JSON.stringify(vars, null, 2));
    console.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ windmill_vars.json");
  }
  
  /**
   * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤—Å–µ
   */
  async translateAll(intentName?: string) {
    console.log("\nüî• –ê–Ω—Ç–∏–±—é—Ä–æ–∫—Ä–∞—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!");
    console.log("üëÅÔ∏è –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—é –∂–∏–≤—ñ —ñ–Ω—Ç–µ–Ω—Ç–∏ –≤ –º–µ—Ä—Ç–≤—ñ –∫–æ–Ω—Ñ—ñ–≥–∏...\n");
    
    await this.loadGlyphs();
    
    if (intentName && !this.glyphs[intentName]) {
      console.error(`‚ùå –Ü–Ω—Ç–µ–Ω—Ç '${intentName}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
      console.log("–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Ç–µ–Ω—Ç–∏:", Object.keys(this.glyphs));
      Deno.exit(1);
    }
    
    await this.generateEnv(intentName);
    await this.generateDockerCompose(intentName);
    await this.generateWindmillVars(intentName);
    
    console.log("\n‚ú® –í—Å–µ –≥–æ—Ç–æ–≤–æ! –î–µ—Ä–µ–≤'—è–Ω–∞ —Ö—É–π–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ –∂–∏–≤–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤.");
    console.log("üåÄ –¢–µ–ø–µ—Ä –º–æ–∂–µ—à –∑–∞–±—É—Ç–∏ –ø—Ä–æ –∫–æ–Ω—Ñ—ñ–≥–∏ - –∂–∏–≤–∏ —ñ–Ω—Ç–µ–Ω—Ç–∞–º–∏!");
  }
}

// CLI
if (import.meta.main) {
  const translator = new GlyphTranslator();
  const intentName = Deno.args[0];
  
  if (Deno.args.includes("--help")) {
    console.log(`
üëÅÔ∏è Glyph2Env - –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  deno run --allow-read --allow-write glyph2env.ts [intent-name]

–ü—Ä–∏–∫–ª–∞–¥–∏:
  glyph2env.ts                    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤—Å—ñ —ñ–Ω—Ç–µ–Ω—Ç–∏
  glyph2env.ts run_whisper_node   # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —ñ–Ω—Ç–µ–Ω—Ç

–û–ø—Ü—ñ—ó:
  --help    –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É
    `);
    Deno.exit(0);
  }
  
  await translator.translateAll(intentName);
}